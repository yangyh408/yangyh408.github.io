{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/NexT/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/user-avatar.jpg","path":"images/user-avatar.jpg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/post_images/Colaboratory的使用-01.jpg","path":"images/post_images/Colaboratory的使用-01.jpg","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/post_images/DigitalOcean的使用-01.png","path":"images/post_images/DigitalOcean的使用-01.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/post_images/DigitalOcean的使用-03.png","path":"images/post_images/DigitalOcean的使用-03.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/post_images/DigitalOcean的使用-02.png","path":"images/post_images/DigitalOcean的使用-02.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/src/clipboard-use.js","path":"js/src/clipboard-use.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/src/clipboard.js","path":"js/src/clipboard.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/post_images/DigitalOcean的使用-06.png","path":"images/post_images/DigitalOcean的使用-06.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/post_images/DigitalOcean的使用-07.png","path":"images/post_images/DigitalOcean的使用-07.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/post_images/快速傅立叶变换(FFT)-01.png","path":"images/post_images/快速傅立叶变换(FFT)-01.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/post_images/DigitalOcean的使用-05.png","path":"images/post_images/DigitalOcean的使用-05.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/post_images/网络流--Dinic算法-01.png","path":"images/post_images/网络流--Dinic算法-01.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/NexT/source/images/post_images/DigitalOcean的使用-04.png","path":"images/post_images/DigitalOcean的使用-04.png","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"66b9ca508bdf5c4071cb03e093b33d59e595f097","modified":1584455188949},{"_id":"source/CNAME","hash":"3fa5002a9bfe425b65312f904878ee992d1bc9cd","modified":1554624681904},{"_id":"themes/NexT/.DS_Store","hash":"b3947d6b589e2bf324ea7044f37045b2df0a0a0e","modified":1554785108591},{"_id":"themes/NexT/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1554622912887},{"_id":"themes/NexT/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1554622912887},{"_id":"themes/NexT/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1554622912887},{"_id":"themes/NexT/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1554622912887},{"_id":"themes/NexT/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1554622912887},{"_id":"themes/NexT/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1554622912888},{"_id":"themes/NexT/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1554622912888},{"_id":"themes/NexT/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1554622912888},{"_id":"themes/NexT/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1554622912888},{"_id":"themes/NexT/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1554622912888},{"_id":"themes/NexT/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1554622912888},{"_id":"themes/NexT/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1554622912888},{"_id":"themes/NexT/_config.yml","hash":"117e3302d70e20bdf769fb79b94fdbcf1802dcea","modified":1584455846097},{"_id":"themes/NexT/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1554622912889},{"_id":"themes/NexT/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1554622912889},{"_id":"themes/NexT/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1554622912902},{"_id":"source/_posts/.DS_Store","hash":"505d48027ae269e278fecf9f626fd3969dcf6920","modified":1584455250808},{"_id":"source/_posts/Colaboratory的使用.md","hash":"4964443b2e6f4204f48d6b4ae2e4c29a6f22a0d1","modified":1584453760024},{"_id":"source/_posts/DigitalOcean的使用.md","hash":"3aee91376171bd909c587916442dc6da088420a1","modified":1584453756433},{"_id":"source/_posts/WelcomePage.md","hash":"0b6e438740adf53a6d1e8d2bab122dc9559bd953","modified":1584453802730},{"_id":"source/_posts/venv的安装和使用.md","hash":"4f3d030356a4b0837d538640c58672db936d4c16","modified":1584453787838},{"_id":"source/_posts/快速傅立叶变换-FFT.md","hash":"7184725845170d4d3e70a6cb324847494c85666d","modified":1584453711988},{"_id":"source/_posts/快速线性筛法求素数.md","hash":"55e79e9e573a962361143908443dcdbcd269b8c8","modified":1554726526762},{"_id":"source/_posts/网络流-Dinic算法.md","hash":"ba239dce01b4934302bceeb1be7ae616b9c51434","modified":1584453776502},{"_id":"source/_posts/错排公式的推导与应用.md","hash":"1f6fdd3cd68ff37ce0454ddb7198e2f9cae593b2","modified":1554726012741},{"_id":"source/_posts/阶梯博弈.md","hash":"9182e1106ebb8477c18601fcbe13e4de84dbd720","modified":1584453710730},{"_id":"source/tags/index.md","hash":"416a1dd5d7c9db9ae5310957f317ece9c3eca5f3","modified":1554724190364},{"_id":"themes/NexT/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554622912882},{"_id":"themes/NexT/.git/config","hash":"ca83ce520f770c3104c997d323b9f293dd920073","modified":1554622912883},{"_id":"themes/NexT/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554622907664},{"_id":"themes/NexT/.git/index","hash":"ecf9d3db47ebcc934f0ebe57f86e7d9efbc14b1c","modified":1584456053953},{"_id":"themes/NexT/.git/packed-refs","hash":"3bb2e8e3fad44742d3e3bfadfb0b4d791fe9fe9e","modified":1554622912880},{"_id":"themes/NexT/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1554622912887},{"_id":"themes/NexT/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1554622912887},{"_id":"themes/NexT/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1554622912887},{"_id":"themes/NexT/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1554622912887},{"_id":"themes/NexT/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1554622912889},{"_id":"themes/NexT/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1554622912889},{"_id":"themes/NexT/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1554622912889},{"_id":"themes/NexT/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1554622912889},{"_id":"themes/NexT/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1554622912890},{"_id":"themes/NexT/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1554622912890},{"_id":"themes/NexT/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1554622912890},{"_id":"themes/NexT/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1554622912890},{"_id":"themes/NexT/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1554622912890},{"_id":"themes/NexT/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1554622912890},{"_id":"themes/NexT/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1554622912890},{"_id":"themes/NexT/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1554622912891},{"_id":"themes/NexT/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1554622912891},{"_id":"themes/NexT/languages/zh-Hans.yml","hash":"c4dae341d81deff5e60b16243ce239f626022a26","modified":1554708617960},{"_id":"themes/NexT/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1554622912891},{"_id":"themes/NexT/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1554622912891},{"_id":"themes/NexT/layout/_layout.swig","hash":"53339261dab2938a21cfed45d2a30d9cbd0110f5","modified":1554739055625},{"_id":"themes/NexT/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1554622912901},{"_id":"themes/NexT/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1554622912901},{"_id":"themes/NexT/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1554622912901},{"_id":"themes/NexT/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1554622912901},{"_id":"themes/NexT/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1554622912902},{"_id":"themes/NexT/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1554622912902},{"_id":"themes/NexT/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1554622912902},{"_id":"themes/NexT/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1554622912902},{"_id":"themes/NexT/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1554622912902},{"_id":"themes/NexT/source/.DS_Store","hash":"7b0ac7e4c196f60a70449d6fde8506d4b6d646cc","modified":1554785115215},{"_id":"themes/NexT/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1554622912959},{"_id":"themes/NexT/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1554622912959},{"_id":"themes/NexT/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1554622912959},{"_id":"themes/NexT/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554622912922},{"_id":"themes/NexT/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554622907665},{"_id":"themes/NexT/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554622907664},{"_id":"themes/NexT/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1554622907665},{"_id":"themes/NexT/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554622907665},{"_id":"themes/NexT/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554622907665},{"_id":"themes/NexT/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1554622907665},{"_id":"themes/NexT/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554622907666},{"_id":"themes/NexT/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554622907665},{"_id":"themes/NexT/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554622907665},{"_id":"themes/NexT/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554622907666},{"_id":"themes/NexT/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554622907665},{"_id":"themes/NexT/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1554622907664},{"_id":"themes/NexT/.git/logs/HEAD","hash":"b03fa6fc68cd6fafcb45c144c2e9df00a2804f03","modified":1554622912882},{"_id":"themes/NexT/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1554622912891},{"_id":"themes/NexT/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1554622912891},{"_id":"themes/NexT/layout/_macro/passage-end-tag.swig","hash":"f29b50d83bcdc9e70696b6a8a8917d8b2ad4be10","modified":1554715306930},{"_id":"themes/NexT/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1554622912892},{"_id":"themes/NexT/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1554622912892},{"_id":"themes/NexT/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1554622912892},{"_id":"themes/NexT/layout/_macro/post.swig","hash":"dcddfdb6c8ead69795b0086f9d6e66a239ba292c","modified":1554739205169},{"_id":"themes/NexT/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1554622912893},{"_id":"themes/NexT/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1554622912893},{"_id":"themes/NexT/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1554622912896},{"_id":"themes/NexT/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1554622912896},{"_id":"themes/NexT/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1554622912896},{"_id":"themes/NexT/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1554622912893},{"_id":"themes/NexT/layout/_partials/footer.swig","hash":"da6dd246c63aa97de15bd241590f757a8ed6ecae","modified":1554715854693},{"_id":"themes/NexT/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1554622912894},{"_id":"themes/NexT/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1554622912893},{"_id":"themes/NexT/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1554622912894},{"_id":"themes/NexT/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1554622912894},{"_id":"themes/NexT/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1554622912895},{"_id":"themes/NexT/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1554622912900},{"_id":"themes/NexT/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1554622912900},{"_id":"themes/NexT/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1554622912900},{"_id":"themes/NexT/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1554622912900},{"_id":"themes/NexT/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1554622912900},{"_id":"themes/NexT/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1554622912900},{"_id":"themes/NexT/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1554622912900},{"_id":"themes/NexT/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1554622912903},{"_id":"themes/NexT/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1554622912903},{"_id":"themes/NexT/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1554622912903},{"_id":"themes/NexT/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1554622912903},{"_id":"themes/NexT/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1554622912903},{"_id":"themes/NexT/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1554622912903},{"_id":"themes/NexT/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1554622912903},{"_id":"themes/NexT/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1554622912904},{"_id":"themes/NexT/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1554622912903},{"_id":"themes/NexT/source/css/.DS_Store","hash":"e024abfdb7ee60d35f21094be968bb958918983e","modified":1554697301969},{"_id":"themes/NexT/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1554622912921},{"_id":"themes/NexT/source/images/.DS_Store","hash":"e8b1186c626390e025859371a7da5e992d62ee9e","modified":1554801461449},{"_id":"themes/NexT/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1554622912922},{"_id":"themes/NexT/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1554622912922},{"_id":"themes/NexT/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1554622912922},{"_id":"themes/NexT/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1554622912923},{"_id":"themes/NexT/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1554622912923},{"_id":"themes/NexT/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1554622912923},{"_id":"themes/NexT/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1554622912923},{"_id":"themes/NexT/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1554622912923},{"_id":"themes/NexT/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1554622912924},{"_id":"themes/NexT/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1554622912924},{"_id":"themes/NexT/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1554622912924},{"_id":"themes/NexT/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1554622912924},{"_id":"themes/NexT/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554622912924},{"_id":"themes/NexT/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554622912924},{"_id":"themes/NexT/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1554622912924},{"_id":"themes/NexT/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1554622912925},{"_id":"themes/NexT/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1554622912925},{"_id":"themes/NexT/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1554622912925},{"_id":"themes/NexT/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554622912896},{"_id":"themes/NexT/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554622912896},{"_id":"themes/NexT/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554622912915},{"_id":"themes/NexT/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554622912915},{"_id":"themes/NexT/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554622912916},{"_id":"themes/NexT/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554622912921},{"_id":"themes/NexT/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554622912921},{"_id":"themes/NexT/source/images/user-avatar.jpg","hash":"c6fc215525daf0cefd73f1c3e4289f0229160711","modified":1554695560000},{"_id":"themes/NexT/.git/refs/heads/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1554622912882},{"_id":"themes/NexT/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1554622912896},{"_id":"themes/NexT/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1554622912896},{"_id":"themes/NexT/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1554622912896},{"_id":"themes/NexT/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1554622912894},{"_id":"themes/NexT/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1584454877691},{"_id":"themes/NexT/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1554622912895},{"_id":"themes/NexT/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1554622912895},{"_id":"themes/NexT/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1554622912895},{"_id":"themes/NexT/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1554622912895},{"_id":"themes/NexT/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1554622912895},{"_id":"themes/NexT/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1554622912895},{"_id":"themes/NexT/layout/_partials/share/jiathis.swig","hash":"37974654885bb900023afb69dd0e4c86526f67d3","modified":1554716448190},{"_id":"themes/NexT/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1554622912897},{"_id":"themes/NexT/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1554622912897},{"_id":"themes/NexT/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1554622912897},{"_id":"themes/NexT/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1554622912897},{"_id":"themes/NexT/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1554622912897},{"_id":"themes/NexT/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1554622912897},{"_id":"themes/NexT/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1554622912898},{"_id":"themes/NexT/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1554622912898},{"_id":"themes/NexT/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1554622912898},{"_id":"themes/NexT/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1554622912898},{"_id":"themes/NexT/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1554622912898},{"_id":"themes/NexT/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1554622912898},{"_id":"themes/NexT/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1554622912898},{"_id":"themes/NexT/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1554622912898},{"_id":"themes/NexT/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1554622912899},{"_id":"themes/NexT/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1554622912899},{"_id":"themes/NexT/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1554622912899},{"_id":"themes/NexT/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1554622912899},{"_id":"themes/NexT/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1554622912899},{"_id":"themes/NexT/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1554622912899},{"_id":"themes/NexT/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1554622912899},{"_id":"themes/NexT/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1554622912899},{"_id":"themes/NexT/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1554622912901},{"_id":"themes/NexT/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1554622912901},{"_id":"themes/NexT/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1554622912901},{"_id":"themes/NexT/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1554622912901},{"_id":"themes/NexT/source/css/_common/.DS_Store","hash":"4e57db0f3f60d6975302d021570eecc64f6929cd","modified":1554697301972},{"_id":"themes/NexT/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1554622912915},{"_id":"themes/NexT/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1554622912915},{"_id":"themes/NexT/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1554622912916},{"_id":"themes/NexT/source/css/_custom/custom.styl","hash":"901048e294290e7eee8fd2db3aee77adfe0c6086","modified":1554717081450},{"_id":"themes/NexT/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1554622912921},{"_id":"themes/NexT/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1554622912921},{"_id":"themes/NexT/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1554622912921},{"_id":"themes/NexT/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1554622912921},{"_id":"themes/NexT/source/images/post_images/.DS_Store","hash":"bd12400a2fef4ac6bdbd7d7d48acc6ea3d9bb8f2","modified":1554785122570},{"_id":"themes/NexT/source/images/post_images/Colaboratory的使用-01.jpg","hash":"60a4ead872cdc7d565335f3f90f51fedf68d8a13","modified":1554727783005},{"_id":"themes/NexT/source/images/post_images/DigitalOcean的使用-01.png","hash":"bb3ebc1a1c68fc490447b3a8bf38bd0e3ffe9503","modified":1554784949516},{"_id":"themes/NexT/source/images/post_images/DigitalOcean的使用-03.png","hash":"0fe7dee688062b601f7b05328156c1c3416f1f2e","modified":1554784959255},{"_id":"themes/NexT/source/images/post_images/DigitalOcean的使用-02.png","hash":"c4b9b182989793fab5546874d099dbc525db512c","modified":1554784955897},{"_id":"themes/NexT/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1554622912925},{"_id":"themes/NexT/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1554622912925},{"_id":"themes/NexT/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1554622912926},{"_id":"themes/NexT/source/js/src/clipboard-use.js","hash":"2259e3232abfc44618d50d2882a26c65d5a05827","modified":1554717408849},{"_id":"themes/NexT/source/js/src/clipboard.js","hash":"43d4af727a32a793d9146eb828ed114e3ca29cec","modified":1554716944778},{"_id":"themes/NexT/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1554622912926},{"_id":"themes/NexT/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1554622912926},{"_id":"themes/NexT/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1554622912926},{"_id":"themes/NexT/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1554622912926},{"_id":"themes/NexT/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1554622912927},{"_id":"themes/NexT/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1554622912927},{"_id":"themes/NexT/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1554622912927},{"_id":"themes/NexT/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1554622912927},{"_id":"themes/NexT/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1554622912931},{"_id":"themes/NexT/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1554622912933},{"_id":"themes/NexT/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1554622912933},{"_id":"themes/NexT/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1554622912934},{"_id":"themes/NexT/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1554622912934},{"_id":"themes/NexT/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1554622912937},{"_id":"themes/NexT/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1554622912937},{"_id":"themes/NexT/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1554622912937},{"_id":"themes/NexT/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1554622912937},{"_id":"themes/NexT/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1554622912947},{"_id":"themes/NexT/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1554622912938},{"_id":"themes/NexT/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1554622912938},{"_id":"themes/NexT/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1554622912938},{"_id":"themes/NexT/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1554622912938},{"_id":"themes/NexT/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1554622912938},{"_id":"themes/NexT/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1554622912948},{"_id":"themes/NexT/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1554622912948},{"_id":"themes/NexT/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1554622912949},{"_id":"themes/NexT/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1554622912949},{"_id":"themes/NexT/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1554622912948},{"_id":"themes/NexT/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1554622912949},{"_id":"themes/NexT/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1554622912949},{"_id":"themes/NexT/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1554622912949},{"_id":"themes/NexT/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1554622912950},{"_id":"themes/NexT/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1554622912950},{"_id":"themes/NexT/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1554622912950},{"_id":"themes/NexT/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1554622912950},{"_id":"themes/NexT/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1554622912951},{"_id":"themes/NexT/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1554622912950},{"_id":"themes/NexT/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1554622912951},{"_id":"themes/NexT/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1554622912951},{"_id":"themes/NexT/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1554622912951},{"_id":"themes/NexT/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1554622912951},{"_id":"themes/NexT/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1554622912951},{"_id":"themes/NexT/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1554622912951},{"_id":"themes/NexT/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1554622912952},{"_id":"themes/NexT/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1554622912952},{"_id":"themes/NexT/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1554622912952},{"_id":"themes/NexT/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1554622912952},{"_id":"themes/NexT/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1554622912952},{"_id":"themes/NexT/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1554622912953},{"_id":"themes/NexT/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1554622912956},{"_id":"themes/NexT/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1554622912956},{"_id":"themes/NexT/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1554622912958},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1554622912958},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1554622912959},{"_id":"themes/NexT/source/images/post_images/DigitalOcean的使用-06.png","hash":"4fd461b2b202c49efd2c3400ae2a6ff565804775","modified":1554784971181},{"_id":"themes/NexT/source/images/post_images/DigitalOcean的使用-07.png","hash":"3b9c32eaf4879198c87c90c15ac46ec8291ed310","modified":1554799340655},{"_id":"themes/NexT/source/images/post_images/快速傅立叶变换(FFT)-01.png","hash":"fd78d4328b47e6e20d7a1434fd1d11dbedd4b006","modified":1554730550752},{"_id":"themes/NexT/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1554622912948},{"_id":"themes/NexT/.git/logs/refs/heads/master","hash":"b03fa6fc68cd6fafcb45c144c2e9df00a2804f03","modified":1554622912882},{"_id":"themes/NexT/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1554622912881},{"_id":"themes/NexT/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1554622912900},{"_id":"themes/NexT/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1554622912900},{"_id":"themes/NexT/source/css/_common/components/.DS_Store","hash":"94b36a5899d872689887ae61ae78c4c0c8bf8825","modified":1554697306978},{"_id":"themes/NexT/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1554622912904},{"_id":"themes/NexT/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1554622912904},{"_id":"themes/NexT/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1554622912904},{"_id":"themes/NexT/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1554622912904},{"_id":"themes/NexT/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1554622912904},{"_id":"themes/NexT/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1554622912907},{"_id":"themes/NexT/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1554622912910},{"_id":"themes/NexT/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1554622912914},{"_id":"themes/NexT/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1554622912914},{"_id":"themes/NexT/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1554622912914},{"_id":"themes/NexT/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1554622912914},{"_id":"themes/NexT/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1554622912914},{"_id":"themes/NexT/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1554622912914},{"_id":"themes/NexT/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1554622912915},{"_id":"themes/NexT/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1554622912916},{"_id":"themes/NexT/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1554622912916},{"_id":"themes/NexT/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1554622912917},{"_id":"themes/NexT/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1554622912917},{"_id":"themes/NexT/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1554622912917},{"_id":"themes/NexT/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1554622912917},{"_id":"themes/NexT/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1554622912917},{"_id":"themes/NexT/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1554622912918},{"_id":"themes/NexT/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1554622912918},{"_id":"themes/NexT/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1554622912918},{"_id":"themes/NexT/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1554622912919},{"_id":"themes/NexT/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1554622912919},{"_id":"themes/NexT/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1554622912919},{"_id":"themes/NexT/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1554622912919},{"_id":"themes/NexT/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1554622912920},{"_id":"themes/NexT/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1554622912920},{"_id":"themes/NexT/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1554622912920},{"_id":"themes/NexT/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1554622912920},{"_id":"themes/NexT/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1554622912920},{"_id":"themes/NexT/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1554622912927},{"_id":"themes/NexT/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1554622912929},{"_id":"themes/NexT/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1554622912930},{"_id":"themes/NexT/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1554622912931},{"_id":"themes/NexT/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554622912934},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554622912934},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554622912934},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554622912935},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554622912935},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554622912935},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1554622912936},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1554622912936},{"_id":"themes/NexT/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1554622912937},{"_id":"themes/NexT/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1554622912938},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1554622912939},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1554622912939},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1554622912939},{"_id":"themes/NexT/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1554622912956},{"_id":"themes/NexT/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1554622912955},{"_id":"themes/NexT/source/images/post_images/DigitalOcean的使用-05.png","hash":"c0e03ba8e9abb29b64b5110db771df7154359696","modified":1554784967619},{"_id":"themes/NexT/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1554622912930},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1554622912936},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554622912947},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554622912947},{"_id":"themes/NexT/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1554622912958},{"_id":"themes/NexT/.git/logs/refs/remotes/origin/HEAD","hash":"b03fa6fc68cd6fafcb45c144c2e9df00a2804f03","modified":1554622912881},{"_id":"themes/NexT/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1554622912905},{"_id":"themes/NexT/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1554622912905},{"_id":"themes/NexT/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1554622912905},{"_id":"themes/NexT/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1554622912905},{"_id":"themes/NexT/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1554622912905},{"_id":"themes/NexT/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1554622912905},{"_id":"themes/NexT/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1554622912906},{"_id":"themes/NexT/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1554622912906},{"_id":"themes/NexT/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1554622912906},{"_id":"themes/NexT/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1554622912906},{"_id":"themes/NexT/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1554622912906},{"_id":"themes/NexT/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1554622912906},{"_id":"themes/NexT/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1554622912906},{"_id":"themes/NexT/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1554622912906},{"_id":"themes/NexT/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1554622912907},{"_id":"themes/NexT/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1554622912907},{"_id":"themes/NexT/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1554622912907},{"_id":"themes/NexT/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1554622912907},{"_id":"themes/NexT/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1554622912907},{"_id":"themes/NexT/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1554622912908},{"_id":"themes/NexT/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1554622912908},{"_id":"themes/NexT/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1554622912908},{"_id":"themes/NexT/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1554622912908},{"_id":"themes/NexT/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1554622912908},{"_id":"themes/NexT/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1554622912908},{"_id":"themes/NexT/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1554622912908},{"_id":"themes/NexT/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1554622912908},{"_id":"themes/NexT/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1554622912909},{"_id":"themes/NexT/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1554622912909},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1554622912909},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-author.styl","hash":"8b6c41d72264d3c1e69e5e43bc206fd62c729d16","modified":1554697500876},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1554622912909},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1554622912909},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1554622912910},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1554622912910},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1554622912910},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1554622912910},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1554622912910},{"_id":"themes/NexT/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1554622912910},{"_id":"themes/NexT/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1554622912910},{"_id":"themes/NexT/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1554622912911},{"_id":"themes/NexT/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1554622912911},{"_id":"themes/NexT/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1554622912911},{"_id":"themes/NexT/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1554622912911},{"_id":"themes/NexT/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1554622912911},{"_id":"themes/NexT/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1554622912911},{"_id":"themes/NexT/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1554622912911},{"_id":"themes/NexT/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1554622912912},{"_id":"themes/NexT/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1554622912912},{"_id":"themes/NexT/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1554622912912},{"_id":"themes/NexT/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1554622912912},{"_id":"themes/NexT/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1554622912912},{"_id":"themes/NexT/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1554622912913},{"_id":"themes/NexT/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1554622912913},{"_id":"themes/NexT/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1554622912913},{"_id":"themes/NexT/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1554622912913},{"_id":"themes/NexT/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1554622912913},{"_id":"themes/NexT/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1554622912913},{"_id":"themes/NexT/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1554622912918},{"_id":"themes/NexT/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1554622912918},{"_id":"themes/NexT/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1554622912919},{"_id":"themes/NexT/source/images/post_images/网络流--Dinic算法-01.png","hash":"4e89a6f22e12005e51e4f3721b65733a9986c759","modified":1554729819668},{"_id":"themes/NexT/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1554622912928},{"_id":"themes/NexT/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1554622912928},{"_id":"themes/NexT/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1554622912928},{"_id":"themes/NexT/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1554622912929},{"_id":"themes/NexT/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1554622912929},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554622912935},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1554622912935},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1554622912935},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1554622912935},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1554622912936},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1554622912936},{"_id":"themes/NexT/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1554622912940},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1554622912946},{"_id":"themes/NexT/source/images/post_images/DigitalOcean的使用-04.png","hash":"3947a6ff8291e6f98cf069999b85d4dc096f514b","modified":1554784964064},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554622912941},{"_id":"themes/NexT/.git/objects/pack/pack-4e095c5dae748fb943f0f9d3a885868e02a2fb4f.idx","hash":"b61fb47d5b1a55f694a85e5e3385494420e681db","modified":1554622912873},{"_id":"themes/NexT/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1554622912933},{"_id":"themes/NexT/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1554622912955},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1554622912945},{"_id":"themes/NexT/.git/objects/pack/pack-4e095c5dae748fb943f0f9d3a885868e02a2fb4f.pack","hash":"cbaaeef505ebee0927de8d1462b5e546b9082625","modified":1554622912870},{"_id":"public/search.xml","hash":"21ee2c2e64392286f0cdaa71a1a688549431d068","modified":1584528704117},{"_id":"public/tags/index.html","hash":"99d92dafeac49c55eda914b99aebd0bee3cb8a58","modified":1584528704251},{"_id":"public/2019/04/09/DigitalOcean的使用/index.html","hash":"2e180031c8339bf87c8af1ba7d8f9716c3bfcaa7","modified":1584528704252},{"_id":"public/2019/04/08/快速傅立叶变换-FFT/index.html","hash":"2e8a516d59914129b9b22af49430213fb4baf586","modified":1584528704252},{"_id":"public/2019/04/08/网络流-Dinic算法/index.html","hash":"446c22ecc7cd7f462fa2c1c0f043d335904e1767","modified":1584528704252},{"_id":"public/2019/04/08/阶梯博弈/index.html","hash":"5f32d32d12647eeeb4ec389b8704126b09e90424","modified":1584528704251},{"_id":"public/2019/04/08/Colaboratory的使用/index.html","hash":"8171cddea3e7ac982be5842036d88d96945ff155","modified":1584528704252},{"_id":"public/2019/04/08/venv的安装和使用/index.html","hash":"d0c1baa2a29a4ad5d29ed9dacdb6048d59adf3a7","modified":1584528704252},{"_id":"public/2019/04/08/快速线性筛法求素数/index.html","hash":"2046f7c2210d78cd989edfaa890854570fa7b47e","modified":1584528704252},{"_id":"public/2019/04/08/错排公式的推导与应用/index.html","hash":"e3a658aa439410c50578c33fef1501c3d1bf49ec","modified":1584528704252},{"_id":"public/2019/04/08/WelcomePage/index.html","hash":"09ac63c797025574eb7d5b69df306524e600787e","modified":1584528704252},{"_id":"public/archives/index.html","hash":"1ff89d60b83f156901726939ce3d22b00a236be2","modified":1584528704252},{"_id":"public/archives/2019/index.html","hash":"2d65818549358dfb58be918f7dcd06381097d9a0","modified":1584528704252},{"_id":"public/archives/2019/04/index.html","hash":"ac8ac5bcb12c33c03f7d44a3f15ca0cb996c4aba","modified":1584528704253},{"_id":"public/index.html","hash":"018bc7503a1c7a54166ec2de3c8d8eaeb5d3b94c","modified":1584528704252},{"_id":"public/tags/Notes/index.html","hash":"02a18c4f6a75d3029d95c2f46a98c24f28f911c0","modified":1584528704253},{"_id":"public/tags/Others/index.html","hash":"a0fed8ad48f35f1504ca41df949f39c1d80e3bc6","modified":1584528704253},{"_id":"public/tags/Math/index.html","hash":"7682f398e94ae17ca088047426bcb7f923c030f3","modified":1584528704253},{"_id":"public/tags/NOI/index.html","hash":"b8106847adf78636f7044455e9ba45657b7b8b94","modified":1584528704253},{"_id":"public/CNAME","hash":"3fa5002a9bfe425b65312f904878ee992d1bc9cd","modified":1584455902891},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1584455902891},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1584455902891},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1584455902891},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1584455902891},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1584455902891},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1584455902891},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1584455902891},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1584455902891},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1584455902891},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1584455902891},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1584455902892},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1584455902892},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1584455902892},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1584455902892},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1584455902892},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1584455902892},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1584455902892},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1584455902892},{"_id":"public/images/post_images/DigitalOcean的使用-03.png","hash":"0fe7dee688062b601f7b05328156c1c3416f1f2e","modified":1584455902892},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1584455902892},{"_id":"public/images/post_images/Colaboratory的使用-01.jpg","hash":"60a4ead872cdc7d565335f3f90f51fedf68d8a13","modified":1584455902892},{"_id":"public/images/post_images/DigitalOcean的使用-01.png","hash":"bb3ebc1a1c68fc490447b3a8bf38bd0e3ffe9503","modified":1584455902892},{"_id":"public/images/post_images/DigitalOcean的使用-02.png","hash":"c4b9b182989793fab5546874d099dbc525db512c","modified":1584455902892},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1584455902892},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1584455902892},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1584455902892},{"_id":"public/images/post_images/快速傅立叶变换(FFT)-01.png","hash":"fd78d4328b47e6e20d7a1434fd1d11dbedd4b006","modified":1584455902892},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1584455902892},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1584455902892},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1584455902892},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1584455902892},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1584455902892},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1584455902892},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1584455902892},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1584455902892},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1584455902892},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1584455902892},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1584455902893},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"6c83e0f9a075b112b6b477033f5ec58459aed8c0","modified":1584455902893},{"_id":"public/images/user-avatar.jpg","hash":"c6fc215525daf0cefd73f1c3e4289f0229160711","modified":1584455903258},{"_id":"public/images/post_images/DigitalOcean的使用-06.png","hash":"4fd461b2b202c49efd2c3400ae2a6ff565804775","modified":1584455903261},{"_id":"public/images/post_images/DigitalOcean的使用-07.png","hash":"3b9c32eaf4879198c87c90c15ac46ec8291ed310","modified":1584455903262},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1584455903262},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1584455903262},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"e2fb232264162793ffdeec550152a6a8ecf23a4b","modified":1584455903262},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"d68ff78878b16b98b6e5cb8a3c3081e5d5b97101","modified":1584455903263},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1584455903268},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1584455903268},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1584455903269},{"_id":"public/js/src/clipboard-use.js","hash":"2259e3232abfc44618d50d2882a26c65d5a05827","modified":1584455903269},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1584455903269},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1584455903269},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1584455903269},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1584455903269},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1584455903269},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1584455903269},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1584455903269},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1584455903269},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1584455903269},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1584455903269},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1584455903269},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1584455903269},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1584455903270},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1584455903270},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1584455903270},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1584455903270},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1584455903270},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1584455903270},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1584455903270},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1584455903270},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1584455903270},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1584455903270},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1584455903270},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1584455903270},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1584455903270},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1584455903270},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1584455903270},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1584455903270},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1584455903270},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1584455903270},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1584455903270},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1584455903270},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1584455903270},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1584455903270},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1584455903270},{"_id":"public/lib/fastclick/README.html","hash":"c07b353b4efa132290ec4479102a55d80ac6d300","modified":1584455903270},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"06811ca2f722dead021493457f27cdc264ef928d","modified":1584455903271},{"_id":"public/lib/jquery_lazyload/README.html","hash":"a08fccd381c8fdb70ba8974b208254c5ba23a95f","modified":1584455903271},{"_id":"public/css/main.css","hash":"56362b5662365bc62f39924d9a6b8064209bf846","modified":1584455903271},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1584455903271},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1584455903271},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1584455903271},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1584455903274},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1584455903274},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1584455903275},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1584455903275},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1584455903275},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1584455903275},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1584455903275},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1584455903275},{"_id":"public/images/post_images/DigitalOcean的使用-05.png","hash":"c0e03ba8e9abb29b64b5110db771df7154359696","modified":1584455903275},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1584455903278},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1584455903278},{"_id":"public/images/post_images/DigitalOcean的使用-04.png","hash":"3947a6ff8291e6f98cf069999b85d4dc096f514b","modified":1584455903278},{"_id":"public/assets/algolia/algoliasearch.js","hash":"79672c9cb8391adbdc4fa28053c83a2389ef92ce","modified":1584455903278},{"_id":"public/js/src/clipboard.js","hash":"43d4af727a32a793d9146eb828ed114e3ca29cec","modified":1584455903283},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1584455903283},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1584455903284},{"_id":"public/images/post_images/网络流--Dinic算法-01.png","hash":"4e89a6f22e12005e51e4f3721b65733a9986c759","modified":1584455903284},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1584455903288},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1584455903288},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1584455903289},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1584455903289},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1584455903290},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1584455903290},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1584455903290},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1584455903293},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1584455903293},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1584455903294},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1584455903297},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1584455903300},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1584455903313},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1584455903314},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1584455903316},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1584455903324},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1584455903327},{"_id":"source/_posts/selenium实现自动健康填报.md","hash":"6cdfed928d108d5b7c343602e54c074e2f224c5d","modified":1584528570384},{"_id":"public/2020/03/18/selenium实现自动健康填报/index.html","hash":"3f6e4913c862147a7596cbb537bebb3eb2348ecb","modified":1584528704254},{"_id":"public/archives/2020/index.html","hash":"21af0283d77857d62e6b5b6278774f981a05c602","modified":1584528704254},{"_id":"public/archives/2020/03/index.html","hash":"c0dbaec9e6f074bbf5b0ce61f97ed570be7cb647","modified":1584528704254},{"_id":"public/tags/Python/index.html","hash":"9a46017eb507f6ac7ceb77be4d89068e44623d84","modified":1584528704254}],"Category":[],"Data":[],"Page":[{"title":"标签","date":"2019-04-08T07:18:33.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-04-08 15:18:33\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-04-08T11:49:50.364Z","path":"tags/index.html","layout":"page","_id":"ck7w04u3c0001pv6ptcglc4tk","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Colaboratory的使用","date":"2019-04-08T12:44:10.000Z","_content":"\n# Google备份与同步\n\n在使用Colaboratory之前，由于涉及GoogleDrive的文档同步，需要在电脑上安装Google备份与同步软件\n\n## GoogleDrive安装\n<https://www.google.com/intl/zh-CN_ALL/drive/download/backup-and-sync/>\n\n<!--more-->\n## 登陆问题处理\n在安装完软件之后需要登陆Google账户，但是一直在提示“无法正常登陆，请检查网络连接”\n在确认VPN可以正常使用后百度到了处理这类问题的正确姿势[解决Mac下Google备份和同步网络连接问题][1]\n> 系统编号设置->网络->高级...->代理->网页代理(HTTP)->设置代理（127.0.0.1:1087）\n\n![](/images/post_images/Colaboratory的使用-01.jpg)\n\n登陆成功！\n\n# 设置GPU加速\n> 修改->笔记本设置->硬件加速器->GPU\n\n1. 检查GPU是否启用\n\n```\nimport tensorflow as tf\ntf.test.gpu_device_name()\n```\n\n2. 显示GPU详细信息\n\n```\nfrom tensorflow.python.client import device_lib\ndevice_lib.list_local_devices()\n```\n\n3. 显示CPU详细信息\n\n```\n!cat /proc/cpuinfo\n```\n\n# 使用Colab打开.py文件\n{% note info %}\n\n### 转载说明\n\n该部分转载自[薅资本主义羊毛，用Google免费GPU][2]\n\n{% endnote %}\n\n1. 配置服务器\n\n```\n!apt-get install -y -qq software-properties-common python-software-properties module-init-tools\n!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null\n!apt-get update -qq 2>&1 > /dev/null\n!apt-get -y install -qq google-drive-ocamlfuse fuse\nfrom google.colab import auth\nauth.authenticate_user()\nfrom oauth2client.client import GoogleCredentials\ncreds = GoogleCredentials.get_application_default()\nimport getpass\n!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL\nvcode = getpass.getpass()\n!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}\n```\n按步骤要求点击链接输入验证码即可\n\n2. 授权完成后挂载GoogleDrive：\n\n```\n!mkdir -p drive\n!google-drive-ocamlfuse drive\n```\n\n3. GoogleDrive文档打开位置\n\n```\ncd /drive/xxx\n```\n\n# 重置(reset)服务器\n\n```\n!kill -9 -1\n```\n\n[1]:https://www.fangpengjun.com/2017/09/08/%E8%A7%A3%E5%86%B3Mac%E4%B8%8BGoogle%E5%A4%87%E4%BB%BD%E5%92%8C%E5%90%8C%E6%AD%A5%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/\n[2]:https://zhuanlan.zhihu.com/p/33344222","source":"_posts/Colaboratory的使用.md","raw":"---\ntitle: Colaboratory的使用\ndate: 2019-04-08 20:44:10\ntags: Notes\n---\n\n# Google备份与同步\n\n在使用Colaboratory之前，由于涉及GoogleDrive的文档同步，需要在电脑上安装Google备份与同步软件\n\n## GoogleDrive安装\n<https://www.google.com/intl/zh-CN_ALL/drive/download/backup-and-sync/>\n\n<!--more-->\n## 登陆问题处理\n在安装完软件之后需要登陆Google账户，但是一直在提示“无法正常登陆，请检查网络连接”\n在确认VPN可以正常使用后百度到了处理这类问题的正确姿势[解决Mac下Google备份和同步网络连接问题][1]\n> 系统编号设置->网络->高级...->代理->网页代理(HTTP)->设置代理（127.0.0.1:1087）\n\n![](/images/post_images/Colaboratory的使用-01.jpg)\n\n登陆成功！\n\n# 设置GPU加速\n> 修改->笔记本设置->硬件加速器->GPU\n\n1. 检查GPU是否启用\n\n```\nimport tensorflow as tf\ntf.test.gpu_device_name()\n```\n\n2. 显示GPU详细信息\n\n```\nfrom tensorflow.python.client import device_lib\ndevice_lib.list_local_devices()\n```\n\n3. 显示CPU详细信息\n\n```\n!cat /proc/cpuinfo\n```\n\n# 使用Colab打开.py文件\n{% note info %}\n\n### 转载说明\n\n该部分转载自[薅资本主义羊毛，用Google免费GPU][2]\n\n{% endnote %}\n\n1. 配置服务器\n\n```\n!apt-get install -y -qq software-properties-common python-software-properties module-init-tools\n!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null\n!apt-get update -qq 2>&1 > /dev/null\n!apt-get -y install -qq google-drive-ocamlfuse fuse\nfrom google.colab import auth\nauth.authenticate_user()\nfrom oauth2client.client import GoogleCredentials\ncreds = GoogleCredentials.get_application_default()\nimport getpass\n!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL\nvcode = getpass.getpass()\n!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}\n```\n按步骤要求点击链接输入验证码即可\n\n2. 授权完成后挂载GoogleDrive：\n\n```\n!mkdir -p drive\n!google-drive-ocamlfuse drive\n```\n\n3. GoogleDrive文档打开位置\n\n```\ncd /drive/xxx\n```\n\n# 重置(reset)服务器\n\n```\n!kill -9 -1\n```\n\n[1]:https://www.fangpengjun.com/2017/09/08/%E8%A7%A3%E5%86%B3Mac%E4%B8%8BGoogle%E5%A4%87%E4%BB%BD%E5%92%8C%E5%90%8C%E6%AD%A5%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/\n[2]:https://zhuanlan.zhihu.com/p/33344222","slug":"Colaboratory的使用","published":1,"updated":"2020-03-17T14:02:40.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7w04u380000pv6pjtom02se","content":"<h1 id=\"Google备份与同步\"><a href=\"#Google备份与同步\" class=\"headerlink\" title=\"Google备份与同步\"></a>Google备份与同步</h1><p>在使用Colaboratory之前，由于涉及GoogleDrive的文档同步，需要在电脑上安装Google备份与同步软件</p>\n<h2 id=\"GoogleDrive安装\"><a href=\"#GoogleDrive安装\" class=\"headerlink\" title=\"GoogleDrive安装\"></a>GoogleDrive安装</h2><p><a href=\"https://www.google.com/intl/zh-CN_ALL/drive/download/backup-and-sync/\" target=\"_blank\" rel=\"noopener\">https://www.google.com/intl/zh-CN_ALL/drive/download/backup-and-sync/</a></p>\n<a id=\"more\"></a>\n<h2 id=\"登陆问题处理\"><a href=\"#登陆问题处理\" class=\"headerlink\" title=\"登陆问题处理\"></a>登陆问题处理</h2><p>在安装完软件之后需要登陆Google账户，但是一直在提示“无法正常登陆，请检查网络连接”<br>在确认VPN可以正常使用后百度到了处理这类问题的正确姿势<a href=\"https://www.fangpengjun.com/2017/09/08/%E8%A7%A3%E5%86%B3Mac%E4%B8%8BGoogle%E5%A4%87%E4%BB%BD%E5%92%8C%E5%90%8C%E6%AD%A5%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"noopener\">解决Mac下Google备份和同步网络连接问题</a></p>\n<blockquote>\n<p>系统编号设置-&gt;网络-&gt;高级…-&gt;代理-&gt;网页代理(HTTP)-&gt;设置代理（127.0.0.1:1087）</p>\n</blockquote>\n<p><img src=\"/images/post_images/Colaboratory的使用-01.jpg\" alt></p>\n<p>登陆成功！</p>\n<h1 id=\"设置GPU加速\"><a href=\"#设置GPU加速\" class=\"headerlink\" title=\"设置GPU加速\"></a>设置GPU加速</h1><blockquote>\n<p>修改-&gt;笔记本设置-&gt;硬件加速器-&gt;GPU</p>\n</blockquote>\n<ol>\n<li>检查GPU是否启用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tensorflow as tf</span><br><span class=\"line\">tf.test.gpu_device_name()</span><br></pre></td></tr></table></figure>\n<ol>\n<li>显示GPU详细信息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tensorflow.python.client import device_lib</span><br><span class=\"line\">device_lib.list_local_devices()</span><br></pre></td></tr></table></figure>\n<ol>\n<li>显示CPU详细信息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!cat /proc/cpuinfo</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用Colab打开-py文件\"><a href=\"#使用Colab打开-py文件\" class=\"headerlink\" title=\"使用Colab打开.py文件\"></a>使用Colab打开.py文件</h1><div class=\"note info\"><h3 id=\"转载说明\"><a href=\"#转载说明\" class=\"headerlink\" title=\"转载说明\"></a>转载说明</h3><p>该部分转载自[薅资本主义羊毛，用Google免费GPU][2]</p></div>\n<ol>\n<li>配置服务器</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!apt-get install -y -qq software-properties-common python-software-properties module-init-tools</span><br><span class=\"line\">!add-apt-repository -y ppa:alessandro-strada/ppa 2&gt;&amp;1 &gt; /dev/null</span><br><span class=\"line\">!apt-get update -qq 2&gt;&amp;1 &gt; /dev/null</span><br><span class=\"line\">!apt-get -y install -qq google-drive-ocamlfuse fuse</span><br><span class=\"line\">from google.colab import auth</span><br><span class=\"line\">auth.authenticate_user()</span><br><span class=\"line\">from oauth2client.client import GoogleCredentials</span><br><span class=\"line\">creds = GoogleCredentials.get_application_default()</span><br><span class=\"line\">import getpass</span><br><span class=\"line\">!google-drive-ocamlfuse -headless -id=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125; &lt; /dev/null 2&gt;&amp;1 | grep URL</span><br><span class=\"line\">vcode = getpass.getpass()</span><br><span class=\"line\">!echo &#123;vcode&#125; | google-drive-ocamlfuse -headless -id=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125;</span><br></pre></td></tr></table></figure>\n<p>按步骤要求点击链接输入验证码即可</p>\n<ol>\n<li>授权完成后挂载GoogleDrive：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!mkdir -p drive</span><br><span class=\"line\">!google-drive-ocamlfuse drive</span><br></pre></td></tr></table></figure>\n<ol>\n<li>GoogleDrive文档打开位置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /drive/xxx</span><br></pre></td></tr></table></figure>\n<h1 id=\"重置-reset-服务器\"><a href=\"#重置-reset-服务器\" class=\"headerlink\" title=\"重置(reset)服务器\"></a>重置(reset)服务器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!kill -9 -1</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"Google备份与同步\"><a href=\"#Google备份与同步\" class=\"headerlink\" title=\"Google备份与同步\"></a>Google备份与同步</h1><p>在使用Colaboratory之前，由于涉及GoogleDrive的文档同步，需要在电脑上安装Google备份与同步软件</p>\n<h2 id=\"GoogleDrive安装\"><a href=\"#GoogleDrive安装\" class=\"headerlink\" title=\"GoogleDrive安装\"></a>GoogleDrive安装</h2><p><a href=\"https://www.google.com/intl/zh-CN_ALL/drive/download/backup-and-sync/\" target=\"_blank\" rel=\"noopener\">https://www.google.com/intl/zh-CN_ALL/drive/download/backup-and-sync/</a></p>","more":"<h2 id=\"登陆问题处理\"><a href=\"#登陆问题处理\" class=\"headerlink\" title=\"登陆问题处理\"></a>登陆问题处理</h2><p>在安装完软件之后需要登陆Google账户，但是一直在提示“无法正常登陆，请检查网络连接”<br>在确认VPN可以正常使用后百度到了处理这类问题的正确姿势<a href=\"https://www.fangpengjun.com/2017/09/08/%E8%A7%A3%E5%86%B3Mac%E4%B8%8BGoogle%E5%A4%87%E4%BB%BD%E5%92%8C%E5%90%8C%E6%AD%A5%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/\" target=\"_blank\" rel=\"noopener\">解决Mac下Google备份和同步网络连接问题</a></p>\n<blockquote>\n<p>系统编号设置-&gt;网络-&gt;高级…-&gt;代理-&gt;网页代理(HTTP)-&gt;设置代理（127.0.0.1:1087）</p>\n</blockquote>\n<p><img src=\"/images/post_images/Colaboratory的使用-01.jpg\" alt></p>\n<p>登陆成功！</p>\n<h1 id=\"设置GPU加速\"><a href=\"#设置GPU加速\" class=\"headerlink\" title=\"设置GPU加速\"></a>设置GPU加速</h1><blockquote>\n<p>修改-&gt;笔记本设置-&gt;硬件加速器-&gt;GPU</p>\n</blockquote>\n<ol>\n<li>检查GPU是否启用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tensorflow as tf</span><br><span class=\"line\">tf.test.gpu_device_name()</span><br></pre></td></tr></table></figure>\n<ol>\n<li>显示GPU详细信息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from tensorflow.python.client import device_lib</span><br><span class=\"line\">device_lib.list_local_devices()</span><br></pre></td></tr></table></figure>\n<ol>\n<li>显示CPU详细信息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!cat /proc/cpuinfo</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用Colab打开-py文件\"><a href=\"#使用Colab打开-py文件\" class=\"headerlink\" title=\"使用Colab打开.py文件\"></a>使用Colab打开.py文件</h1><div class=\"note info\"><h3 id=\"转载说明\"><a href=\"#转载说明\" class=\"headerlink\" title=\"转载说明\"></a>转载说明</h3><p>该部分转载自[薅资本主义羊毛，用Google免费GPU][2]</p></div>\n<ol>\n<li>配置服务器</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!apt-get install -y -qq software-properties-common python-software-properties module-init-tools</span><br><span class=\"line\">!add-apt-repository -y ppa:alessandro-strada/ppa 2&gt;&amp;1 &gt; /dev/null</span><br><span class=\"line\">!apt-get update -qq 2&gt;&amp;1 &gt; /dev/null</span><br><span class=\"line\">!apt-get -y install -qq google-drive-ocamlfuse fuse</span><br><span class=\"line\">from google.colab import auth</span><br><span class=\"line\">auth.authenticate_user()</span><br><span class=\"line\">from oauth2client.client import GoogleCredentials</span><br><span class=\"line\">creds = GoogleCredentials.get_application_default()</span><br><span class=\"line\">import getpass</span><br><span class=\"line\">!google-drive-ocamlfuse -headless -id=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125; &lt; /dev/null 2&gt;&amp;1 | grep URL</span><br><span class=\"line\">vcode = getpass.getpass()</span><br><span class=\"line\">!echo &#123;vcode&#125; | google-drive-ocamlfuse -headless -id=&#123;creds.client_id&#125; -secret=&#123;creds.client_secret&#125;</span><br></pre></td></tr></table></figure>\n<p>按步骤要求点击链接输入验证码即可</p>\n<ol>\n<li>授权完成后挂载GoogleDrive：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!mkdir -p drive</span><br><span class=\"line\">!google-drive-ocamlfuse drive</span><br></pre></td></tr></table></figure>\n<ol>\n<li>GoogleDrive文档打开位置</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /drive/xxx</span><br></pre></td></tr></table></figure>\n<h1 id=\"重置-reset-服务器\"><a href=\"#重置-reset-服务器\" class=\"headerlink\" title=\"重置(reset)服务器\"></a>重置(reset)服务器</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!kill -9 -1</span><br></pre></td></tr></table></figure>"},{"title":"DigitalOcean的使用","date":"2019-04-09T04:42:06.000Z","_content":"\n{% note info %}\n## 创建Droplets\n{% endnote %}\n\n![创建][1]\n\n<!--more-->\n\n{% note info %}\n## 配置选择\n{% endnote %}\n\nimage 选择Ubuntu系统\nSize 选第一个5$/mon\n![配置][2]\n\n{% note info %}\n## 节点选择\n联通用户推荐选择**SanFrancisco-01**\n{% endnote %}\n\n1. 通过ping来检测丢包率和延迟，200ms一下就很优秀\n2. 通过[speedtest][9]来测单线程连接速率，能否把带宽跑满\n\n![节点][3]\n\n{% note info %}\n## 查看服务器信息\n{% endnote %}\n\n进入您的邮箱，此时您会收到一封包含服务器详细登陆信息的邮件\n\n![该服务器已注销][4]\n\n{% note info %}\n## 登陆服务器\n{% endnote %}\n\n在终端中输入：\n\n```\nssh Username @ IP Address\n```\n![登陆][5]\n\n{% note info %}\n## 安装最新内核\n{% endnote %}\n\n```\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && chmod +x bbr.sh && ./bbr.sh\n```\n\n![][6]\n\n{% note warning %}\n## 安装脚本\n加密类型选择:\n**14）chacha20-ietf-poly1305**\n{% endnote %}\n\n```\nwget --no-check-certificate -O shadowsocks-libev-debian.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.sh\nchmod +x shadowsocks-libev-debian.sh\n./shadowsocks-libev-debian.sh 2>&1 | tee shadowsocks-libev-debian.log\n```\n\n稍等片刻，完成！\n\n详细信息可以查看[秋水逸冰][10]的博文!\n\n{% note info %}\n## 导入Shadowsocks\n{% endnote %}\n\n在服务器设置中输入服务器的地址、节点、加密方法、密码即可\n![Shadowsocks][7]\n\n⚠️***注意***:\n将指定网站加入PAC规则中：```|| www.example.com ^```\n\n{% note success %}\n### 福利鸭\n{% endnote %}\n完成在读大学生认证可以在[GitHub学生礼包][8]中免费领取$50的DigitalOcean抵用券嗷！\n\n[1]:/images/post_images/DigitalOcean的使用-01.png\n[2]:/images/post_images/DigitalOcean的使用-02.png\n[3]:/images/post_images/DigitalOcean的使用-03.png\n[4]:/images/post_images/DigitalOcean的使用-04.png\n[5]:/images/post_images/DigitalOcean的使用-05.png\n[6]:/images/post_images/DigitalOcean的使用-06.png\n[7]:/images/post_images/DigitalOcean的使用-07.png\n[8]:https://education.github.com/\n[9]:https://speedtest.net/\n[10]:https://teddysun.com/358.html","source":"_posts/DigitalOcean的使用.md","raw":"---\ntitle: DigitalOcean的使用\ndate: 2019-04-09 12:42:06\ntags: Notes\n---\n\n{% note info %}\n## 创建Droplets\n{% endnote %}\n\n![创建][1]\n\n<!--more-->\n\n{% note info %}\n## 配置选择\n{% endnote %}\n\nimage 选择Ubuntu系统\nSize 选第一个5$/mon\n![配置][2]\n\n{% note info %}\n## 节点选择\n联通用户推荐选择**SanFrancisco-01**\n{% endnote %}\n\n1. 通过ping来检测丢包率和延迟，200ms一下就很优秀\n2. 通过[speedtest][9]来测单线程连接速率，能否把带宽跑满\n\n![节点][3]\n\n{% note info %}\n## 查看服务器信息\n{% endnote %}\n\n进入您的邮箱，此时您会收到一封包含服务器详细登陆信息的邮件\n\n![该服务器已注销][4]\n\n{% note info %}\n## 登陆服务器\n{% endnote %}\n\n在终端中输入：\n\n```\nssh Username @ IP Address\n```\n![登陆][5]\n\n{% note info %}\n## 安装最新内核\n{% endnote %}\n\n```\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && chmod +x bbr.sh && ./bbr.sh\n```\n\n![][6]\n\n{% note warning %}\n## 安装脚本\n加密类型选择:\n**14）chacha20-ietf-poly1305**\n{% endnote %}\n\n```\nwget --no-check-certificate -O shadowsocks-libev-debian.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.sh\nchmod +x shadowsocks-libev-debian.sh\n./shadowsocks-libev-debian.sh 2>&1 | tee shadowsocks-libev-debian.log\n```\n\n稍等片刻，完成！\n\n详细信息可以查看[秋水逸冰][10]的博文!\n\n{% note info %}\n## 导入Shadowsocks\n{% endnote %}\n\n在服务器设置中输入服务器的地址、节点、加密方法、密码即可\n![Shadowsocks][7]\n\n⚠️***注意***:\n将指定网站加入PAC规则中：```|| www.example.com ^```\n\n{% note success %}\n### 福利鸭\n{% endnote %}\n完成在读大学生认证可以在[GitHub学生礼包][8]中免费领取$50的DigitalOcean抵用券嗷！\n\n[1]:/images/post_images/DigitalOcean的使用-01.png\n[2]:/images/post_images/DigitalOcean的使用-02.png\n[3]:/images/post_images/DigitalOcean的使用-03.png\n[4]:/images/post_images/DigitalOcean的使用-04.png\n[5]:/images/post_images/DigitalOcean的使用-05.png\n[6]:/images/post_images/DigitalOcean的使用-06.png\n[7]:/images/post_images/DigitalOcean的使用-07.png\n[8]:https://education.github.com/\n[9]:https://speedtest.net/\n[10]:https://teddysun.com/358.html","slug":"DigitalOcean的使用","published":1,"updated":"2020-03-17T14:02:36.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7w04u3d0002pv6phb3uxy48","content":"<div class=\"note info\"><h2 id=\"创建Droplets\"><a href=\"#创建Droplets\" class=\"headerlink\" title=\"创建Droplets\"></a>创建Droplets</h2></div>\n<p><img src=\"/images/post_images/DigitalOcean的使用-01.png\" alt=\"创建\"></p>\n<a id=\"more\"></a>\n<div class=\"note info\"><h2 id=\"配置选择\"><a href=\"#配置选择\" class=\"headerlink\" title=\"配置选择\"></a>配置选择</h2></div>\n<p>image 选择Ubuntu系统<br>Size 选第一个5$/mon<br><img src=\"/images/post_images/DigitalOcean的使用-02.png\" alt=\"配置\"></p>\n<div class=\"note info\"><h2 id=\"节点选择\"><a href=\"#节点选择\" class=\"headerlink\" title=\"节点选择\"></a>节点选择</h2><p>联通用户推荐选择<strong>SanFrancisco-01</strong></p></div>\n<ol>\n<li>通过ping来检测丢包率和延迟，200ms一下就很优秀</li>\n<li>通过<a href=\"https://speedtest.net/\" target=\"_blank\" rel=\"noopener\">speedtest</a>来测单线程连接速率，能否把带宽跑满</li>\n</ol>\n<p><img src=\"/images/post_images/DigitalOcean的使用-03.png\" alt=\"节点\"></p>\n<div class=\"note info\"><h2 id=\"查看服务器信息\"><a href=\"#查看服务器信息\" class=\"headerlink\" title=\"查看服务器信息\"></a>查看服务器信息</h2></div>\n<p>进入您的邮箱，此时您会收到一封包含服务器详细登陆信息的邮件</p>\n<p><img src=\"/images/post_images/DigitalOcean的使用-04.png\" alt=\"该服务器已注销\"></p>\n<div class=\"note info\"><h2 id=\"登陆服务器\"><a href=\"#登陆服务器\" class=\"headerlink\" title=\"登陆服务器\"></a>登陆服务器</h2></div>\n<p>在终端中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh Username @ IP Address</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/post_images/DigitalOcean的使用-05.png\" alt=\"登陆\"></p>\n<div class=\"note info\"><h2 id=\"安装最新内核\"><a href=\"#安装最新内核\" class=\"headerlink\" title=\"安装最新内核\"></a>安装最新内核</h2></div>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/post_images/DigitalOcean的使用-06.png\" alt></p>\n<div class=\"note warning\"><h2 id=\"安装脚本\"><a href=\"#安装脚本\" class=\"headerlink\" title=\"安装脚本\"></a>安装脚本</h2><p>加密类型选择:<br><strong>14）chacha20-ietf-poly1305</strong></p></div>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks-libev-debian.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.sh</span><br><span class=\"line\">chmod +x shadowsocks-libev-debian.sh</span><br><span class=\"line\">./shadowsocks-libev-debian.sh 2&gt;&amp;1 | tee shadowsocks-libev-debian.log</span><br></pre></td></tr></table></figure>\n<p>稍等片刻，完成！</p>\n<p>详细信息可以查看<a href=\"https://teddysun.com/358.html\" target=\"_blank\" rel=\"noopener\">秋水逸冰</a>的博文!</p>\n<div class=\"note info\"><h2 id=\"导入Shadowsocks\"><a href=\"#导入Shadowsocks\" class=\"headerlink\" title=\"导入Shadowsocks\"></a>导入Shadowsocks</h2></div>\n<p>在服务器设置中输入服务器的地址、节点、加密方法、密码即可<br><img src=\"/images/post_images/DigitalOcean的使用-07.png\" alt=\"Shadowsocks\"></p>\n<p>⚠️<strong><em>注意</em></strong>:<br>将指定网站加入PAC规则中：<code>|| www.example.com ^</code></p>\n<div class=\"note success\"><h3 id=\"福利鸭\"><a href=\"#福利鸭\" class=\"headerlink\" title=\"福利鸭\"></a>福利鸭</h3></div>\n<p>完成在读大学生认证可以在<a href=\"https://education.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub学生礼包</a>中免费领取$50的DigitalOcean抵用券嗷！</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><h2 id=\"创建Droplets\"><a href=\"#创建Droplets\" class=\"headerlink\" title=\"创建Droplets\"></a>创建Droplets</h2></div>\n<p><img src=\"/images/post_images/DigitalOcean的使用-01.png\" alt=\"创建\"></p>","more":"<div class=\"note info\"><h2 id=\"配置选择\"><a href=\"#配置选择\" class=\"headerlink\" title=\"配置选择\"></a>配置选择</h2></div>\n<p>image 选择Ubuntu系统<br>Size 选第一个5$/mon<br><img src=\"/images/post_images/DigitalOcean的使用-02.png\" alt=\"配置\"></p>\n<div class=\"note info\"><h2 id=\"节点选择\"><a href=\"#节点选择\" class=\"headerlink\" title=\"节点选择\"></a>节点选择</h2><p>联通用户推荐选择<strong>SanFrancisco-01</strong></p></div>\n<ol>\n<li>通过ping来检测丢包率和延迟，200ms一下就很优秀</li>\n<li>通过<a href=\"https://speedtest.net/\" target=\"_blank\" rel=\"noopener\">speedtest</a>来测单线程连接速率，能否把带宽跑满</li>\n</ol>\n<p><img src=\"/images/post_images/DigitalOcean的使用-03.png\" alt=\"节点\"></p>\n<div class=\"note info\"><h2 id=\"查看服务器信息\"><a href=\"#查看服务器信息\" class=\"headerlink\" title=\"查看服务器信息\"></a>查看服务器信息</h2></div>\n<p>进入您的邮箱，此时您会收到一封包含服务器详细登陆信息的邮件</p>\n<p><img src=\"/images/post_images/DigitalOcean的使用-04.png\" alt=\"该服务器已注销\"></p>\n<div class=\"note info\"><h2 id=\"登陆服务器\"><a href=\"#登陆服务器\" class=\"headerlink\" title=\"登陆服务器\"></a>登陆服务器</h2></div>\n<p>在终端中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh Username @ IP Address</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/post_images/DigitalOcean的使用-05.png\" alt=\"登陆\"></p>\n<div class=\"note info\"><h2 id=\"安装最新内核\"><a href=\"#安装最新内核\" class=\"headerlink\" title=\"安装最新内核\"></a>安装最新内核</h2></div>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/post_images/DigitalOcean的使用-06.png\" alt></p>\n<div class=\"note warning\"><h2 id=\"安装脚本\"><a href=\"#安装脚本\" class=\"headerlink\" title=\"安装脚本\"></a>安装脚本</h2><p>加密类型选择:<br><strong>14）chacha20-ietf-poly1305</strong></p></div>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks-libev-debian.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.sh</span><br><span class=\"line\">chmod +x shadowsocks-libev-debian.sh</span><br><span class=\"line\">./shadowsocks-libev-debian.sh 2&gt;&amp;1 | tee shadowsocks-libev-debian.log</span><br></pre></td></tr></table></figure>\n<p>稍等片刻，完成！</p>\n<p>详细信息可以查看<a href=\"https://teddysun.com/358.html\" target=\"_blank\" rel=\"noopener\">秋水逸冰</a>的博文!</p>\n<div class=\"note info\"><h2 id=\"导入Shadowsocks\"><a href=\"#导入Shadowsocks\" class=\"headerlink\" title=\"导入Shadowsocks\"></a>导入Shadowsocks</h2></div>\n<p>在服务器设置中输入服务器的地址、节点、加密方法、密码即可<br><img src=\"/images/post_images/DigitalOcean的使用-07.png\" alt=\"Shadowsocks\"></p>\n<p>⚠️<strong><em>注意</em></strong>:<br>将指定网站加入PAC规则中：<code>|| www.example.com ^</code></p>\n<div class=\"note success\"><h3 id=\"福利鸭\"><a href=\"#福利鸭\" class=\"headerlink\" title=\"福利鸭\"></a>福利鸭</h3></div>\n<p>完成在读大学生认证可以在<a href=\"https://education.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub学生礼包</a>中免费领取$50的DigitalOcean抵用券嗷！</p>"},{"title":"WelcomePage","date":"2019-04-08T11:40:12.000Z","top":true,"_content":"\n# Welcome to my new blog\n> Hope you can leave messages here !\n\n## Details\n+ manager:yangyuhao\n+ set_time:2019-04-07\n+ update_time:2019-04-08\n\n<!-- more -->\n## Contract\n\n+ QQ: 895258058\n+ E-mail: yangyh408@qq.com\n+ GitHub: yangyh408\n\n","source":"_posts/WelcomePage.md","raw":"---\ntitle: WelcomePage\ndate: 2019-04-08 19:40:12\ntags: Others\ntop: true\n---\n\n# Welcome to my new blog\n> Hope you can leave messages here !\n\n## Details\n+ manager:yangyuhao\n+ set_time:2019-04-07\n+ update_time:2019-04-08\n\n<!-- more -->\n## Contract\n\n+ QQ: 895258058\n+ E-mail: yangyh408@qq.com\n+ GitHub: yangyh408\n\n","slug":"WelcomePage","published":1,"updated":"2020-03-17T14:03:22.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7w04u3g0004pv6poldssdvj","content":"<h1 id=\"Welcome-to-my-new-blog\"><a href=\"#Welcome-to-my-new-blog\" class=\"headerlink\" title=\"Welcome to my new blog\"></a>Welcome to my new blog</h1><blockquote>\n<p>Hope you can leave messages here !</p>\n</blockquote>\n<h2 id=\"Details\"><a href=\"#Details\" class=\"headerlink\" title=\"Details\"></a>Details</h2><ul>\n<li>manager:yangyuhao</li>\n<li>set_time:2019-04-07</li>\n<li>update_time:2019-04-08</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Contract\"><a href=\"#Contract\" class=\"headerlink\" title=\"Contract\"></a>Contract</h2><ul>\n<li>QQ: 895258058</li>\n<li>E-mail: yangyh408@qq.com</li>\n<li>GitHub: yangyh408</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"Welcome-to-my-new-blog\"><a href=\"#Welcome-to-my-new-blog\" class=\"headerlink\" title=\"Welcome to my new blog\"></a>Welcome to my new blog</h1><blockquote>\n<p>Hope you can leave messages here !</p>\n</blockquote>\n<h2 id=\"Details\"><a href=\"#Details\" class=\"headerlink\" title=\"Details\"></a>Details</h2><ul>\n<li>manager:yangyuhao</li>\n<li>set_time:2019-04-07</li>\n<li>update_time:2019-04-08</li>\n</ul>","more":"<h2 id=\"Contract\"><a href=\"#Contract\" class=\"headerlink\" title=\"Contract\"></a>Contract</h2><ul>\n<li>QQ: 895258058</li>\n<li>E-mail: yangyh408@qq.com</li>\n<li>GitHub: yangyh408</li>\n</ul>"},{"title":"venv的安装和使用","date":"2019-04-08T12:30:57.000Z","_content":"# 安装venv\n\n```\npython3 install virtualenv\n```\n\n# venv的使用\n\n+ 在当前目录创建虚拟环境\n\n```\npython3 -m venv .\n```\n\n<!--more-->\n\n+ 在当前目录创建独立的python环境\n\n```\nvirtualenv --no-site-packages venv\n```\n\n+ 激活虚拟环境\n\n```\nsource venv/bin/activate\n```\n\n+ 停用虚拟环境\n\n```\ndeactivate\n```\n\n+ 删除虚拟环境\n\n```\nrm -rf venv\n```\n\n# 参考网站\n\n<https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000>\n\n<https://www.cnblogs.com/LittleMore/p/6693154.html>\n\n<https://www.cnblogs.com/technologylife/p/6635631.html>","source":"_posts/venv的安装和使用.md","raw":"---\ntitle: venv的安装和使用\ndate: 2019-04-08 20:30:57\ntags: Notes\n---\n# 安装venv\n\n```\npython3 install virtualenv\n```\n\n# venv的使用\n\n+ 在当前目录创建虚拟环境\n\n```\npython3 -m venv .\n```\n\n<!--more-->\n\n+ 在当前目录创建独立的python环境\n\n```\nvirtualenv --no-site-packages venv\n```\n\n+ 激活虚拟环境\n\n```\nsource venv/bin/activate\n```\n\n+ 停用虚拟环境\n\n```\ndeactivate\n```\n\n+ 删除虚拟环境\n\n```\nrm -rf venv\n```\n\n# 参考网站\n\n<https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000>\n\n<https://www.cnblogs.com/LittleMore/p/6693154.html>\n\n<https://www.cnblogs.com/technologylife/p/6635631.html>","slug":"venv的安装和使用","published":1,"updated":"2020-03-17T14:03:07.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7w04u3i0005pv6p87mygy19","content":"<h1 id=\"安装venv\"><a href=\"#安装venv\" class=\"headerlink\" title=\"安装venv\"></a>安装venv</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 install virtualenv</span><br></pre></td></tr></table></figure>\n<h1 id=\"venv的使用\"><a href=\"#venv的使用\" class=\"headerlink\" title=\"venv的使用\"></a>venv的使用</h1><ul>\n<li>在当前目录创建虚拟环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv .</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>在当前目录创建独立的python环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv --no-site-packages venv</span><br></pre></td></tr></table></figure>\n<ul>\n<li>激活虚拟环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source venv/bin/activate</span><br></pre></td></tr></table></figure>\n<ul>\n<li>停用虚拟环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除虚拟环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf venv</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考网站\"><a href=\"#参考网站\" class=\"headerlink\" title=\"参考网站\"></a>参考网站</h1><p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000</a></p>\n<p><a href=\"https://www.cnblogs.com/LittleMore/p/6693154.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/LittleMore/p/6693154.html</a></p>\n<p><a href=\"https://www.cnblogs.com/technologylife/p/6635631.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/technologylife/p/6635631.html</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"安装venv\"><a href=\"#安装venv\" class=\"headerlink\" title=\"安装venv\"></a>安装venv</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 install virtualenv</span><br></pre></td></tr></table></figure>\n<h1 id=\"venv的使用\"><a href=\"#venv的使用\" class=\"headerlink\" title=\"venv的使用\"></a>venv的使用</h1><ul>\n<li>在当前目录创建虚拟环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m venv .</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>在当前目录创建独立的python环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv --no-site-packages venv</span><br></pre></td></tr></table></figure>\n<ul>\n<li>激活虚拟环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source venv/bin/activate</span><br></pre></td></tr></table></figure>\n<ul>\n<li>停用虚拟环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除虚拟环境</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf venv</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考网站\"><a href=\"#参考网站\" class=\"headerlink\" title=\"参考网站\"></a>参考网站</h1><p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000</a></p>\n<p><a href=\"https://www.cnblogs.com/LittleMore/p/6693154.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/LittleMore/p/6693154.html</a></p>\n<p><a href=\"https://www.cnblogs.com/technologylife/p/6635631.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/technologylife/p/6635631.html</a></p>"},{"title":"快速线性筛法求素数","date":"2019-04-08T12:21:31.000Z","_content":"# 筛法求素数\n\n## 基本步骤\n\n说到求素数，其实在刚开始学C++的时候就已经见过诸如此类的问题，不过现在最常见的还是筛法求素数\n\n谈及筛法求素数，其大致思路可分为如下五步：\n\n1. 把2到n的自然数放入a\\[2\\]到a\\[n\\]中(所放入的数与下标号相同) ;\n2. 在数组元素中以下标为序，按顺序找到未曾找过的最小素数minp和它的位置p(即下标号);\n3. 从p+1开始，把凡是能被minp整除的各元素值从a数组中划去(筛掉)，也就是把该元素标记为0;\n<!--more-->\n4. 让p=p+1，重复执行第(2) (3)步骤，知道，minp>floor(sqrt(n))为止;\n5. 打印输出a数组中留下来的数，未被筛掉的各元素值;\n\n## 缺陷分析\n这种求素数的算法很容易被理解，其时间复杂度介于O(n)~O(n*logn)是一种比较流行的方法。但是同样的，这种算法也存在先天性的缺陷，我们简单分析：\n\n对于一个数30，可分解为30=2*15=3*10=5*6，显然，当循环,2,3,5,6,10,15时都会筛除一次30这个数，而当n很大时，就会出现许多的冗余操作，这个算法可以进一步进行优化来使算法的效率提高，因此，一种名为快速线性筛法的算法应运而生。这种算法的智慧之处在于——对于2~n的每一个数，它只筛去到目前为止它能筛到而之后的其他数筛不到的几个合数，而把它能筛到，另有别的数也能筛到的数留个接下来的数去筛，这样的话就能使得素数的筛选不重不漏——说起来容易做起来难，这样的算法应该如何实现呢？\n\n# 快速线性筛法求素数\n\n##基本步骤\n\n对于快速筛法求素数，其步骤也可分为如下几个阶段：\n1. 开一个n+1大小的数组num\\[n\\]来存放每一个元素的筛留情况(即对于num\\[n\\]的每个数与下标号相同，对于任意num\\[n\\]有num\\[n\\]=0,num\\[n\\]=1两种情况，如果num\\[n\\]=0则是素数，反之num\\[n\\]=1时是合数);\n\n2. 再开一个数组prime\\[n\\]来存放筛出的素数以便最后输出结果;\n\n3. 对于一个数k,总是进行从n\\*prime\\[0\\]~n\\*prime\\[j\\](由小到大来乘)，直到if(n%prime\\[j\\]==0)成立时break掉\n   \n   > 这是这个算法的精髓所在，所以弄清楚原因是十分必要的！！！\n   > 对于一个数c=a\\*b(b为c的最小质因数），当通过该算法的循环循环至c\\*b时，易得此时c%b==0,如果此时继续循环至b后面的一个素数d，则有：c\\*d=a\\*b\\*d=(a\\*d)\\*b，因为d>b,所以a\\*d>c。当循环从c继续查找到a\\*d时我们发现当a\\*d再次与素数b想乘时，就又对c*d进行了一次操作，出现了冗余，所以在if(n%prime\\[j\\]==0)成立时要将该层循环break掉；\n    > 举个例子，对于一个数9，9\\*2=18将18标记为合数，循环继续；9*\\3=27将27标记为合数，此时发现9%3=0，循环退出。如果将循环继续下去会出现筛除9\\*5=45的情况，而45=15\\*3，在15时会被在筛去一次，故不可行\n\n4. 完成了算法中最重要的一步，最后只要将存放筛出的prime\\[\\]数组中的素数即可！\n\n这种算法的写法也十分简单，这里只给出一种与普通筛法求素数比较程序：\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<ctime>\n#include<cmath>\n#define inf 20000005\nusing namespace std;\nint n;\nbool a[inf+1];\nlong num[inf+1]={1,1},prime[inf+1]={0},number=0;                                                      \n\nvoid putongshaifa()                          \n{\n\tclock_t begin,end;                                            \n\tbegin=clock();\n\tfor(int i=0;i<=n;++i)\n\t  a[i]=true;\n\ta[1]=false;\n\tfor(int i=2;i<sqrt(n);++i)\n\t  if(a[i])\n\t    for(int j=2;j<=n/i;++j)\n\t      a[i*j]=false;\n\tend=clock();\n\t/*for(int i=2,t=0;i<=n;++i)\n\t  if(a[i])\n\t  {\n\t  \tcout<<i<<\" \";\n\t  \t++t;\n\t  \tif(t%10==0) cout<<endl;\n\t  }\n\tcout<<endl;*/\n\tprintf(\"普通筛法-Time used:%d ms\\n\",end-begin); \n\treturn;\n}\n\n\nvoid kuaisushaifa()                 \n{\n\tclock_t begin,end;                                             \n\tbegin=clock();\n\tfor(int i=2;i<=n;++i) \n\t{\n\t\tif(!num[i])\n\t\t  prime[number++]=i;\n\t\tfor(int j=0;j<number && i*prime[j]<=n;j++)  \n        {  \n            num[i*prime[j]]=1;                 \n            if(!(i%prime[j]))             \n                break;  \n        }  \n    }\n\tend=clock();\n    /*for(int i=0;i<number;i++)\n    {  \n        if(i%10==0) printf(\"\\n\");  \n        printf(\"%3d\",prime[i]);  \n    }  */\n\tprintf(\"快速筛法-Time used:%d ms\\n\",end-begin); \n\treturn;\n}\n\nint main()\n{\n\t//freopen(\"prime.txt\",\"w\",stdout);\n\tscanf(\"%d\",&n);\n\tint _test=10;\n\twhile(_test--)\n\t{\n\t\tputongshaifa();\n\t\tkuaisushaifa();\n\t\tcout<<endl;\n\t}\n    return 0;   \n}\n```","source":"_posts/快速线性筛法求素数.md","raw":"---\ntitle: 快速线性筛法求素数\ndate: 2019-04-08 20:21:31\ntags: Math\n---\n# 筛法求素数\n\n## 基本步骤\n\n说到求素数，其实在刚开始学C++的时候就已经见过诸如此类的问题，不过现在最常见的还是筛法求素数\n\n谈及筛法求素数，其大致思路可分为如下五步：\n\n1. 把2到n的自然数放入a\\[2\\]到a\\[n\\]中(所放入的数与下标号相同) ;\n2. 在数组元素中以下标为序，按顺序找到未曾找过的最小素数minp和它的位置p(即下标号);\n3. 从p+1开始，把凡是能被minp整除的各元素值从a数组中划去(筛掉)，也就是把该元素标记为0;\n<!--more-->\n4. 让p=p+1，重复执行第(2) (3)步骤，知道，minp>floor(sqrt(n))为止;\n5. 打印输出a数组中留下来的数，未被筛掉的各元素值;\n\n## 缺陷分析\n这种求素数的算法很容易被理解，其时间复杂度介于O(n)~O(n*logn)是一种比较流行的方法。但是同样的，这种算法也存在先天性的缺陷，我们简单分析：\n\n对于一个数30，可分解为30=2*15=3*10=5*6，显然，当循环,2,3,5,6,10,15时都会筛除一次30这个数，而当n很大时，就会出现许多的冗余操作，这个算法可以进一步进行优化来使算法的效率提高，因此，一种名为快速线性筛法的算法应运而生。这种算法的智慧之处在于——对于2~n的每一个数，它只筛去到目前为止它能筛到而之后的其他数筛不到的几个合数，而把它能筛到，另有别的数也能筛到的数留个接下来的数去筛，这样的话就能使得素数的筛选不重不漏——说起来容易做起来难，这样的算法应该如何实现呢？\n\n# 快速线性筛法求素数\n\n##基本步骤\n\n对于快速筛法求素数，其步骤也可分为如下几个阶段：\n1. 开一个n+1大小的数组num\\[n\\]来存放每一个元素的筛留情况(即对于num\\[n\\]的每个数与下标号相同，对于任意num\\[n\\]有num\\[n\\]=0,num\\[n\\]=1两种情况，如果num\\[n\\]=0则是素数，反之num\\[n\\]=1时是合数);\n\n2. 再开一个数组prime\\[n\\]来存放筛出的素数以便最后输出结果;\n\n3. 对于一个数k,总是进行从n\\*prime\\[0\\]~n\\*prime\\[j\\](由小到大来乘)，直到if(n%prime\\[j\\]==0)成立时break掉\n   \n   > 这是这个算法的精髓所在，所以弄清楚原因是十分必要的！！！\n   > 对于一个数c=a\\*b(b为c的最小质因数），当通过该算法的循环循环至c\\*b时，易得此时c%b==0,如果此时继续循环至b后面的一个素数d，则有：c\\*d=a\\*b\\*d=(a\\*d)\\*b，因为d>b,所以a\\*d>c。当循环从c继续查找到a\\*d时我们发现当a\\*d再次与素数b想乘时，就又对c*d进行了一次操作，出现了冗余，所以在if(n%prime\\[j\\]==0)成立时要将该层循环break掉；\n    > 举个例子，对于一个数9，9\\*2=18将18标记为合数，循环继续；9*\\3=27将27标记为合数，此时发现9%3=0，循环退出。如果将循环继续下去会出现筛除9\\*5=45的情况，而45=15\\*3，在15时会被在筛去一次，故不可行\n\n4. 完成了算法中最重要的一步，最后只要将存放筛出的prime\\[\\]数组中的素数即可！\n\n这种算法的写法也十分简单，这里只给出一种与普通筛法求素数比较程序：\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<ctime>\n#include<cmath>\n#define inf 20000005\nusing namespace std;\nint n;\nbool a[inf+1];\nlong num[inf+1]={1,1},prime[inf+1]={0},number=0;                                                      \n\nvoid putongshaifa()                          \n{\n\tclock_t begin,end;                                            \n\tbegin=clock();\n\tfor(int i=0;i<=n;++i)\n\t  a[i]=true;\n\ta[1]=false;\n\tfor(int i=2;i<sqrt(n);++i)\n\t  if(a[i])\n\t    for(int j=2;j<=n/i;++j)\n\t      a[i*j]=false;\n\tend=clock();\n\t/*for(int i=2,t=0;i<=n;++i)\n\t  if(a[i])\n\t  {\n\t  \tcout<<i<<\" \";\n\t  \t++t;\n\t  \tif(t%10==0) cout<<endl;\n\t  }\n\tcout<<endl;*/\n\tprintf(\"普通筛法-Time used:%d ms\\n\",end-begin); \n\treturn;\n}\n\n\nvoid kuaisushaifa()                 \n{\n\tclock_t begin,end;                                             \n\tbegin=clock();\n\tfor(int i=2;i<=n;++i) \n\t{\n\t\tif(!num[i])\n\t\t  prime[number++]=i;\n\t\tfor(int j=0;j<number && i*prime[j]<=n;j++)  \n        {  \n            num[i*prime[j]]=1;                 \n            if(!(i%prime[j]))             \n                break;  \n        }  \n    }\n\tend=clock();\n    /*for(int i=0;i<number;i++)\n    {  \n        if(i%10==0) printf(\"\\n\");  \n        printf(\"%3d\",prime[i]);  \n    }  */\n\tprintf(\"快速筛法-Time used:%d ms\\n\",end-begin); \n\treturn;\n}\n\nint main()\n{\n\t//freopen(\"prime.txt\",\"w\",stdout);\n\tscanf(\"%d\",&n);\n\tint _test=10;\n\twhile(_test--)\n\t{\n\t\tputongshaifa();\n\t\tkuaisushaifa();\n\t\tcout<<endl;\n\t}\n    return 0;   \n}\n```","slug":"快速线性筛法求素数","published":1,"updated":"2019-04-08T12:28:46.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7w04u3j0006pv6p394pp6d0","content":"<h1 id=\"筛法求素数\"><a href=\"#筛法求素数\" class=\"headerlink\" title=\"筛法求素数\"></a>筛法求素数</h1><h2 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h2><p>说到求素数，其实在刚开始学C++的时候就已经见过诸如此类的问题，不过现在最常见的还是筛法求素数</p>\n<p>谈及筛法求素数，其大致思路可分为如下五步：</p>\n<ol>\n<li>把2到n的自然数放入a[2]到a[n]中(所放入的数与下标号相同) ;</li>\n<li>在数组元素中以下标为序，按顺序找到未曾找过的最小素数minp和它的位置p(即下标号);</li>\n<li>从p+1开始，把凡是能被minp整除的各元素值从a数组中划去(筛掉)，也就是把该元素标记为0;<a id=\"more\"></a></li>\n<li>让p=p+1，重复执行第(2) (3)步骤，知道，minp&gt;floor(sqrt(n))为止;</li>\n<li>打印输出a数组中留下来的数，未被筛掉的各元素值;</li>\n</ol>\n<h2 id=\"缺陷分析\"><a href=\"#缺陷分析\" class=\"headerlink\" title=\"缺陷分析\"></a>缺陷分析</h2><p>这种求素数的算法很容易被理解，其时间复杂度介于O(n)~O(n*logn)是一种比较流行的方法。但是同样的，这种算法也存在先天性的缺陷，我们简单分析：</p>\n<p>对于一个数30，可分解为30=2<em>15=3</em>10=5*6，显然，当循环,2,3,5,6,10,15时都会筛除一次30这个数，而当n很大时，就会出现许多的冗余操作，这个算法可以进一步进行优化来使算法的效率提高，因此，一种名为快速线性筛法的算法应运而生。这种算法的智慧之处在于——对于2~n的每一个数，它只筛去到目前为止它能筛到而之后的其他数筛不到的几个合数，而把它能筛到，另有别的数也能筛到的数留个接下来的数去筛，这样的话就能使得素数的筛选不重不漏——说起来容易做起来难，这样的算法应该如何实现呢？</p>\n<h1 id=\"快速线性筛法求素数\"><a href=\"#快速线性筛法求素数\" class=\"headerlink\" title=\"快速线性筛法求素数\"></a>快速线性筛法求素数</h1><h2 id=\"基本步骤-1\"><a href=\"#基本步骤-1\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h2><p>对于快速筛法求素数，其步骤也可分为如下几个阶段：</p>\n<ol>\n<li><p>开一个n+1大小的数组num[n]来存放每一个元素的筛留情况(即对于num[n]的每个数与下标号相同，对于任意num[n]有num[n]=0,num[n]=1两种情况，如果num[n]=0则是素数，反之num[n]=1时是合数);</p>\n</li>\n<li><p>再开一个数组prime[n]来存放筛出的素数以便最后输出结果;</p>\n</li>\n<li><p>对于一个数k,总是进行从n*prime[0]~n*prime[j](由小到大来乘)，直到if(n%prime[j]==0)成立时break掉</p>\n<blockquote>\n<p>这是这个算法的精髓所在，所以弄清楚原因是十分必要的！！！<br>对于一个数c=a*b(b为c的最小质因数），当通过该算法的循环循环至c*b时，易得此时c%b==0,如果此时继续循环至b后面的一个素数d，则有：c*d=a*b*d=(a*d)*b，因为d&gt;b,所以a*d&gt;c。当循环从c继续查找到a*d时我们发现当a*d再次与素数b想乘时，就又对c<em>d进行了一次操作，出现了冗余，所以在if(n%prime[j]==0)成立时要将该层循环break掉；<br>举个例子，对于一个数9，9\\</em>2=18将18标记为合数，循环继续；9<em>\\3=27将27标记为合数，此时发现9%3=0，循环退出。如果将循环继续下去会出现筛除9\\</em>5=45的情况，而45=15*3，在15时会被在筛去一次，故不可行</p>\n</blockquote>\n</li>\n<li><p>完成了算法中最重要的一步，最后只要将存放筛出的prime[]数组中的素数即可！</p>\n</li>\n</ol>\n<p>这种算法的写法也十分简单，这里只给出一种与普通筛法求素数比较程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> inf 20000005</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> a[inf+<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">long</span> num[inf+<span class=\"number\">1</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;,prime[inf+<span class=\"number\">1</span>]=&#123;<span class=\"number\">0</span>&#125;,number=<span class=\"number\">0</span>;                                                      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">putongshaifa</span><span class=\"params\">()</span>                          </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">clock_t</span> begin,end;                                            </span><br><span class=\"line\">\tbegin=clock();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;++i)</span><br><span class=\"line\">\t  a[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\ta[<span class=\"number\">1</span>]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;<span class=\"built_in\">sqrt</span>(n);++i)</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(a[i])</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">2</span>;j&lt;=n/i;++j)</span><br><span class=\"line\">\t      a[i*j]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">\tend=clock();</span><br><span class=\"line\">\t<span class=\"comment\">/*for(int i=2,t=0;i&lt;=n;++i)</span></span><br><span class=\"line\"><span class=\"comment\">\t  if(a[i])</span></span><br><span class=\"line\"><span class=\"comment\">\t  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t  \tcout&lt;&lt;i&lt;&lt;\" \";</span></span><br><span class=\"line\"><span class=\"comment\">\t  \t++t;</span></span><br><span class=\"line\"><span class=\"comment\">\t  \tif(t%10==0) cout&lt;&lt;endl;</span></span><br><span class=\"line\"><span class=\"comment\">\t  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">\tcout&lt;&lt;endl;*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"普通筛法-Time used:%d ms\\n\"</span>,end-begin); </span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">kuaisushaifa</span><span class=\"params\">()</span>                 </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">clock_t</span> begin,end;                                             </span><br><span class=\"line\">\tbegin=clock();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;++i) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!num[i])</span><br><span class=\"line\">\t\t  prime[number++]=i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;number &amp;&amp; i*prime[j]&lt;=n;j++)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            num[i*prime[j]]=<span class=\"number\">1</span>;                 </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!(i%prime[j]))             </span><br><span class=\"line\">                <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tend=clock();</span><br><span class=\"line\">    <span class=\"comment\">/*for(int i=0;i&lt;number;i++)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;  </span></span><br><span class=\"line\"><span class=\"comment\">        if(i%10==0) printf(\"\\n\");  </span></span><br><span class=\"line\"><span class=\"comment\">        printf(\"%3d\",prime[i]);  </span></span><br><span class=\"line\"><span class=\"comment\">    &#125;  */</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"快速筛法-Time used:%d ms\\n\"</span>,end-begin); </span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//freopen(\"prime.txt\",\"w\",stdout);</span></span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _test=<span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(_test--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tputongshaifa();</span><br><span class=\"line\">\t\tkuaisushaifa();</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"筛法求素数\"><a href=\"#筛法求素数\" class=\"headerlink\" title=\"筛法求素数\"></a>筛法求素数</h1><h2 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h2><p>说到求素数，其实在刚开始学C++的时候就已经见过诸如此类的问题，不过现在最常见的还是筛法求素数</p>\n<p>谈及筛法求素数，其大致思路可分为如下五步：</p>\n<ol>\n<li>把2到n的自然数放入a[2]到a[n]中(所放入的数与下标号相同) ;</li>\n<li>在数组元素中以下标为序，按顺序找到未曾找过的最小素数minp和它的位置p(即下标号);</li>\n<li>从p+1开始，把凡是能被minp整除的各元素值从a数组中划去(筛掉)，也就是把该元素标记为0;","more":"</li>\n<li>让p=p+1，重复执行第(2) (3)步骤，知道，minp&gt;floor(sqrt(n))为止;</li>\n<li>打印输出a数组中留下来的数，未被筛掉的各元素值;</li>\n</ol>\n<h2 id=\"缺陷分析\"><a href=\"#缺陷分析\" class=\"headerlink\" title=\"缺陷分析\"></a>缺陷分析</h2><p>这种求素数的算法很容易被理解，其时间复杂度介于O(n)~O(n*logn)是一种比较流行的方法。但是同样的，这种算法也存在先天性的缺陷，我们简单分析：</p>\n<p>对于一个数30，可分解为30=2<em>15=3</em>10=5*6，显然，当循环,2,3,5,6,10,15时都会筛除一次30这个数，而当n很大时，就会出现许多的冗余操作，这个算法可以进一步进行优化来使算法的效率提高，因此，一种名为快速线性筛法的算法应运而生。这种算法的智慧之处在于——对于2~n的每一个数，它只筛去到目前为止它能筛到而之后的其他数筛不到的几个合数，而把它能筛到，另有别的数也能筛到的数留个接下来的数去筛，这样的话就能使得素数的筛选不重不漏——说起来容易做起来难，这样的算法应该如何实现呢？</p>\n<h1 id=\"快速线性筛法求素数\"><a href=\"#快速线性筛法求素数\" class=\"headerlink\" title=\"快速线性筛法求素数\"></a>快速线性筛法求素数</h1><h2 id=\"基本步骤-1\"><a href=\"#基本步骤-1\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h2><p>对于快速筛法求素数，其步骤也可分为如下几个阶段：</p>\n<ol>\n<li><p>开一个n+1大小的数组num[n]来存放每一个元素的筛留情况(即对于num[n]的每个数与下标号相同，对于任意num[n]有num[n]=0,num[n]=1两种情况，如果num[n]=0则是素数，反之num[n]=1时是合数);</p>\n</li>\n<li><p>再开一个数组prime[n]来存放筛出的素数以便最后输出结果;</p>\n</li>\n<li><p>对于一个数k,总是进行从n*prime[0]~n*prime[j](由小到大来乘)，直到if(n%prime[j]==0)成立时break掉</p>\n<blockquote>\n<p>这是这个算法的精髓所在，所以弄清楚原因是十分必要的！！！<br>对于一个数c=a*b(b为c的最小质因数），当通过该算法的循环循环至c*b时，易得此时c%b==0,如果此时继续循环至b后面的一个素数d，则有：c*d=a*b*d=(a*d)*b，因为d&gt;b,所以a*d&gt;c。当循环从c继续查找到a*d时我们发现当a*d再次与素数b想乘时，就又对c<em>d进行了一次操作，出现了冗余，所以在if(n%prime[j]==0)成立时要将该层循环break掉；<br>举个例子，对于一个数9，9\\</em>2=18将18标记为合数，循环继续；9<em>\\3=27将27标记为合数，此时发现9%3=0，循环退出。如果将循环继续下去会出现筛除9\\</em>5=45的情况，而45=15*3，在15时会被在筛去一次，故不可行</p>\n</blockquote>\n</li>\n<li><p>完成了算法中最重要的一步，最后只要将存放筛出的prime[]数组中的素数即可！</p>\n</li>\n</ol>\n<p>这种算法的写法也十分简单，这里只给出一种与普通筛法求素数比较程序：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> inf 20000005</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> a[inf+<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">long</span> num[inf+<span class=\"number\">1</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;,prime[inf+<span class=\"number\">1</span>]=&#123;<span class=\"number\">0</span>&#125;,number=<span class=\"number\">0</span>;                                                      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">putongshaifa</span><span class=\"params\">()</span>                          </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">clock_t</span> begin,end;                                            </span><br><span class=\"line\">\tbegin=clock();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;++i)</span><br><span class=\"line\">\t  a[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">\ta[<span class=\"number\">1</span>]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;<span class=\"built_in\">sqrt</span>(n);++i)</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(a[i])</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">2</span>;j&lt;=n/i;++j)</span><br><span class=\"line\">\t      a[i*j]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">\tend=clock();</span><br><span class=\"line\">\t<span class=\"comment\">/*for(int i=2,t=0;i&lt;=n;++i)</span></span><br><span class=\"line\"><span class=\"comment\">\t  if(a[i])</span></span><br><span class=\"line\"><span class=\"comment\">\t  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t  \tcout&lt;&lt;i&lt;&lt;\" \";</span></span><br><span class=\"line\"><span class=\"comment\">\t  \t++t;</span></span><br><span class=\"line\"><span class=\"comment\">\t  \tif(t%10==0) cout&lt;&lt;endl;</span></span><br><span class=\"line\"><span class=\"comment\">\t  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">\tcout&lt;&lt;endl;*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"普通筛法-Time used:%d ms\\n\"</span>,end-begin); </span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">kuaisushaifa</span><span class=\"params\">()</span>                 </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">clock_t</span> begin,end;                                             </span><br><span class=\"line\">\tbegin=clock();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;++i) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!num[i])</span><br><span class=\"line\">\t\t  prime[number++]=i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;number &amp;&amp; i*prime[j]&lt;=n;j++)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            num[i*prime[j]]=<span class=\"number\">1</span>;                 </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!(i%prime[j]))             </span><br><span class=\"line\">                <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tend=clock();</span><br><span class=\"line\">    <span class=\"comment\">/*for(int i=0;i&lt;number;i++)</span></span><br><span class=\"line\"><span class=\"comment\">    &#123;  </span></span><br><span class=\"line\"><span class=\"comment\">        if(i%10==0) printf(\"\\n\");  </span></span><br><span class=\"line\"><span class=\"comment\">        printf(\"%3d\",prime[i]);  </span></span><br><span class=\"line\"><span class=\"comment\">    &#125;  */</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"快速筛法-Time used:%d ms\\n\"</span>,end-begin); </span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//freopen(\"prime.txt\",\"w\",stdout);</span></span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _test=<span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(_test--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tputongshaifa();</span><br><span class=\"line\">\t\tkuaisushaifa();</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"网络流--Dinic算法","date":"2019-04-08T13:20:19.000Z","_content":"\n#Dinic算法\n\n## **例题**:[CodeVS 1993 草地排水][1]\n\n[1]:http://codevs.cn/problem/1993/\n\n> ***题目描述 Description***\n> 在农夫约翰的农场上，每逢下雨，Bessie最喜欢的三叶草地就积聚了一潭水。这意味着草地被水淹没了，并且小草要继续生长还要花相当长一段时间。因此，农夫约翰修建了一套排水系统来使贝茜的草地免除被大水淹没的烦恼（不用担心，雨水会流向附近的一条小溪）。作为一名一流的技师，农夫约翰已经在每条排水沟的一端安上了控制器，这样他可以控制流入排水沟的水流量。\n\n>农夫约翰知道每一条排水沟每分钟可以流过的水量，和排水系统的准确布局（起点为水潭而终点为小溪的一张网）。需要注意的是，有些时候从一处到另一处不只有一条排水沟。\n\n>根据这些信息，计算从水潭排水到小溪的最大流量。对于给出的每条排水沟，雨水只能沿着一个方向流动，注意可能会出现雨水环形流动的情形。\n<!--more-->\n>***输入描述 Input Description***\n>第1行: 两个用空格分开的整数N (0 <= N <= 200) 和 M (2 <= M <= 200)。N是农夫John已经挖好的排水沟的数量，M是排水沟交叉点的数量。交点1是水潭，交点M是小溪。\n\n>第二行到第N+1行: 每行有三个整数，Si, Ei, 和 Ci。Si 和 Ei (1 <= Si, Ei <= M) 指明排水沟两端的交点，雨水从Si 流向Ei。Ci (0 <= Ci <= 10,000,000)是这条排水沟的最大容量。\n\n>***输出描述 Output Description***\n>输出一个整数，即排水的最大流量。\n\n>***样例输入 Sample Input***\n>5 4\n>1 2 40\n>1 4 20\n>2 4 20\n>2 3 30\n>3 4 10\n\n>***样例输出 Sample Output***\n>50\n\n## 问题分析\n\n很显然，这是一道网络流问题，源点为1号节点，汇点为第n号节点，中间的点之间由有向边连接，边权即为流量wi，这样就简单构造了一个网络流的问题，由于题目要求排水的最大流量，也就是求出此网络中的最大流。\n\n对于求最大流的问题，大家入门时一定接触的是EK算法，但是EK算法的效率实在感人，难以满足竞赛中的需要，而Dinic算法通过对EK算法简单的优化使其效率有了明显的提升，基本能够满足竞赛对求最大流的效率的要求。那么Dinic是怎样优化的呢？\n\n**Dinic算法有三个关键词：增广路，残量网络，层次**。\n\n首先，增广路就是每次从源点扩展一条可以到汇点的路径，然后更新一遍残留网络后继续寻找一条这样的路径的过程直至从源点到汇点没有一条路径可达时停止，这个过程就是求增广路的过程。（附上一组求增广路的流程图）\n\n![增广路](/images/post_images/网络流--Dinic算法-01.png)\n\n\n残量网络是Dinic算法（也是EK算法）的关键，残量网络实际上就是流网络上一条边在当前流量的基础上可以允许的额外流量，即 $C_f(u,v)=c(u,v) -f(u,v)$ 但需要特别注意的是，当 $C_f(u,v)$ 为0时该条边将不属于图 $ G_f $。残量网络的构建相当于给了你一个后悔的机会，将原来已经删去的路在可以得到更优解时换回来，即将反向弧再次反向，又回到原来的状态。\n\n之前两点并不是Dinic算法独有的，EK算法同样需要，然而Dinic更优秀的地方就在于第三点，它求增广路前先将图进行分层，逐层递进寻找增广路，这样每条路都是s-t最短路，根据最短增广路算法中的证明（不必深究），可以确定这样找增广路的效率得到大幅提高！\n\n## 代码\n\n了解了算法的关键，码出来也不会有太大障碍，每次增光前bfs分一次层即可，下面附上代码(邻接矩阵存储)：\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#define maxn 255\nusing namespace std;\nconst int INF=0x3f3f3f3f;\nint n,m;\nint edge[maxn][maxn];\nint now[maxn],dis[maxn];\n\nint bfs()\t\t\t\t\t\t\t\t\t\t//分层\n{\n\tmemset(dis,-1,sizeof(dis));\n\tqueue<int > q;\n\tq.push(1);\n\tdis[1]=0;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front() ;\n\t\tq.pop();\n\t\tfor(int i=1;i<=n;++i)\n\t\t{\n\t\t\tif(dis[i]==-1 && edge[u][i]>0)\n\t\t\t{\n\t\t\t\tdis[i]=dis[u]+1;\n\t\t\t\tq.push(i);\n\t\t\t}\n\t\t}\n\t} \n\treturn dis[n]==-1?0:dis[n];\n}\n\nint MaxFlow(int u,int flow)\n{\n\tif(u==n) return flow;\n\tint post_maxflow;\n\tfor(int i=now[u];i<n;++i)                    //当前弧优化\n\t{\n\t\tnow[u]=1;\n\t\tif(dis[i+1]==dis[u]+1 && edge[u][i+1]>0 && (post_maxflow=MaxFlow(i+1,min(flow,edge[u][i+1]))))\n\t\t{\n\t\t\tedge[u][i+1]-=post_maxflow; \n\t\t\tedge[i+1][u]+=post_maxflow;\n\t\t\treturn post_maxflow;\n\t\t}\n\t}\n\treturn 0;\n}\n\nint main()\n{\n\t//freopen(\"in.txt\",\"r\",stdin);\n\t//freopen(\"out.txt\",\"w\",stdout);\n\tint sumflow=0;\n\tmemset(edge,0,sizeof(edge));\n\tscanf(\"%d%d\",&m,&n);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tedge[u][v]+=w;\n\t}\n\twhile(bfs())\n\t{\n\t\tint flow;\n\t\tmemset(now,0,sizeof(now));\n\t\twhile(flow=MaxFlow(1,INF)) sumflow+=flow;\n\t}\n\tprintf(\"%d\",sumflow);\n\treturn 0;\n}\n```\n\n但是当图很大时，邻接矩阵显然无法满足我们的需求，如[POJ3469 Dual Core CPU][2] 中 n<=20000,这时再用邻接矩阵会ML，只要将图该用邻接表存储即可，附上代码：\n[2]:http://poj.org/problem?id=3469\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<queue>\n\n#define Repeat(s,t) for(int i=(s);i<(t);++i)\n#define INF 0x3f3f3f3f\n#define maxn 20000+50\n\n#define DEBUG\nusing namespace std;\n\nstruct edge\n{\n\tint from,to,cap,flow;\n\tedge(int from,int to,int cap,int flow):from(from),to(to),cap(cap),flow(flow) {}\n};\n\nstruct dinic\n{\n\tint n,m,s,t;\n\tvector<edge> edges;\n\tvector<int> G[maxn];\n\tint d[maxn];\n\tint cur[maxn];\n\tdinic() {}\n\t\n\tvoid init()\n\t{\n\t\tmemset(d,-1,sizeof(d));\n\t\tmemset(cur,0,sizeof(0));\n\t}\n\t\n\tvoid add_edge(int from,int to,int cap,int flag)\n\t{\n\t\tif(!flag)\n\t\t{\n\t\tedges.push_back(edge(from,to,cap,0));\n\t\tedges.push_back(edge(to,from,0,0));\n\t\t}\n\t\telse\n\t\t{\n\t\tedges.push_back(edge(from,to,cap,0));\n\t\tedges.push_back(edge(to,from,cap,0));  \n\t\t}\n\t\tm=edges.size();\n\t\tG[from].push_back(m-2);\n\t\tG[to].push_back(m-1);    \n\t}\n\t\n\tbool bfs()\n\t{\n\t\tmemset(d,-1,sizeof(d));\n\t\tqueue<int> q;\n\t\tq.push(s);\n\t\td[s]=0;\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint u=q.front() ;\n\t\t\tq.pop();\n\t\t\tfor(unsigned int i=0;i<G[u].size();++i)\n\t\t\t{\n\t\t\t\tedge& e=edges[G[u][i]];\n\t\t\t\tif(d[e.to]==-1 && e.cap>e.flow)\n\t\t\t\t{\n\t\t\t\t\td[e.to]=d[u]+1;\n\t\t\t\t\tq.push(e.to);\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\treturn d[t]==-1?0:1;\n\t}\n\t\n\tint dfs(int x,int a)\n\t{\t\n\t\tif(x==t || a==0) return a;\n\t\tint flow=0,f;\n\t\tfor(unsigned int i=cur[x];i<G[x].size();++i)\n\t\t{\n\t\t\tcur[x]=i;\n\t\t\tedge& e=edges[G[x][i]];\n\t\t\tif(d[x]+1==d[e.to] && (f=dfs(e.to,min(a,e.cap-e.flow)))>0)\n\t\t\t{\n\t\t\t\te.flow+=f;\n\t\t\t\tedges[G[x][i]^1].flow-=f;\n\t\t\t\tflow+=f;\n\t\t\t\ta-=f;\n\t\t\t\tif(a==0) break;\n\t\t\t}\n\t\t}\n\t\treturn flow;\n\t}\n\t\n\tint MaxFlow(int n,int s,int t)\n\t{\n\t\tthis->n=n;\n\t\tthis->s=s;\n\t\tthis->t=t;\n\t\tint flow=0;\n\t\twhile(bfs())\n\t\t{\n\t\t\tmemset(cur,0,sizeof(cur));\n\t\t\tflow+=dfs(s,INF);\n\t\t}\n\t\treturn flow;\n\t}\n};\n\ninline int read()\n{\n\t/*神tm一定要注意过滤掉数据前面的多余空格或者换行符!否则会导致不可名状的错误!po主付出过惨痛代价QAQ*/\n\tchar ch;\n\tdo\n\t\tch=getchar();\n\twhile((ch < '0' || ch > '9') && ch !='-');\n\tint read=0;\n\tbool sign=0;\n\tif(ch=='-')\n\t{\n\t\tsign=1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0' && ch<='9')\n\t{\n\t\tread=read*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn sign==0?read:-read;\n}\n\ninline void write(int out)\n{\n\tif(out<0)\n\t{\n\t\tputchar('-');\n\t\tout=-out;\n\t}\n\tif(out>9) write(out/10);\n\tputchar(out%10+'0');\n}\n\nint main()\n{\n\tint n,m;\n\tn=read();\n\tm=read();\n\tint s=0,t=n+1;\n\tdinic D;\n\tRepeat(1,n+1)\n\t{\n\t\tint a=read(),b=read();\n\t\tD.add_edge(s,i,a,0);\n\t\tD.add_edge(i,t,b,0); \n\t}\n\tRepeat(1,m+1)\n\t{\n\t\tint a=read(),b=read(),w=read();\n\t\tD.add_edge(a,b,w,1); \n\t}\n\twrite(D.MaxFlow(n,s,t));\n\treturn 0;\n}\n```\n\n\n\n","source":"_posts/网络流-Dinic算法.md","raw":"---\ntitle: 网络流--Dinic算法\ndate: 2019-04-08 21:20:19\ntags: [NOI, Math]\n---\n\n#Dinic算法\n\n## **例题**:[CodeVS 1993 草地排水][1]\n\n[1]:http://codevs.cn/problem/1993/\n\n> ***题目描述 Description***\n> 在农夫约翰的农场上，每逢下雨，Bessie最喜欢的三叶草地就积聚了一潭水。这意味着草地被水淹没了，并且小草要继续生长还要花相当长一段时间。因此，农夫约翰修建了一套排水系统来使贝茜的草地免除被大水淹没的烦恼（不用担心，雨水会流向附近的一条小溪）。作为一名一流的技师，农夫约翰已经在每条排水沟的一端安上了控制器，这样他可以控制流入排水沟的水流量。\n\n>农夫约翰知道每一条排水沟每分钟可以流过的水量，和排水系统的准确布局（起点为水潭而终点为小溪的一张网）。需要注意的是，有些时候从一处到另一处不只有一条排水沟。\n\n>根据这些信息，计算从水潭排水到小溪的最大流量。对于给出的每条排水沟，雨水只能沿着一个方向流动，注意可能会出现雨水环形流动的情形。\n<!--more-->\n>***输入描述 Input Description***\n>第1行: 两个用空格分开的整数N (0 <= N <= 200) 和 M (2 <= M <= 200)。N是农夫John已经挖好的排水沟的数量，M是排水沟交叉点的数量。交点1是水潭，交点M是小溪。\n\n>第二行到第N+1行: 每行有三个整数，Si, Ei, 和 Ci。Si 和 Ei (1 <= Si, Ei <= M) 指明排水沟两端的交点，雨水从Si 流向Ei。Ci (0 <= Ci <= 10,000,000)是这条排水沟的最大容量。\n\n>***输出描述 Output Description***\n>输出一个整数，即排水的最大流量。\n\n>***样例输入 Sample Input***\n>5 4\n>1 2 40\n>1 4 20\n>2 4 20\n>2 3 30\n>3 4 10\n\n>***样例输出 Sample Output***\n>50\n\n## 问题分析\n\n很显然，这是一道网络流问题，源点为1号节点，汇点为第n号节点，中间的点之间由有向边连接，边权即为流量wi，这样就简单构造了一个网络流的问题，由于题目要求排水的最大流量，也就是求出此网络中的最大流。\n\n对于求最大流的问题，大家入门时一定接触的是EK算法，但是EK算法的效率实在感人，难以满足竞赛中的需要，而Dinic算法通过对EK算法简单的优化使其效率有了明显的提升，基本能够满足竞赛对求最大流的效率的要求。那么Dinic是怎样优化的呢？\n\n**Dinic算法有三个关键词：增广路，残量网络，层次**。\n\n首先，增广路就是每次从源点扩展一条可以到汇点的路径，然后更新一遍残留网络后继续寻找一条这样的路径的过程直至从源点到汇点没有一条路径可达时停止，这个过程就是求增广路的过程。（附上一组求增广路的流程图）\n\n![增广路](/images/post_images/网络流--Dinic算法-01.png)\n\n\n残量网络是Dinic算法（也是EK算法）的关键，残量网络实际上就是流网络上一条边在当前流量的基础上可以允许的额外流量，即 $C_f(u,v)=c(u,v) -f(u,v)$ 但需要特别注意的是，当 $C_f(u,v)$ 为0时该条边将不属于图 $ G_f $。残量网络的构建相当于给了你一个后悔的机会，将原来已经删去的路在可以得到更优解时换回来，即将反向弧再次反向，又回到原来的状态。\n\n之前两点并不是Dinic算法独有的，EK算法同样需要，然而Dinic更优秀的地方就在于第三点，它求增广路前先将图进行分层，逐层递进寻找增广路，这样每条路都是s-t最短路，根据最短增广路算法中的证明（不必深究），可以确定这样找增广路的效率得到大幅提高！\n\n## 代码\n\n了解了算法的关键，码出来也不会有太大障碍，每次增光前bfs分一次层即可，下面附上代码(邻接矩阵存储)：\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\n#define maxn 255\nusing namespace std;\nconst int INF=0x3f3f3f3f;\nint n,m;\nint edge[maxn][maxn];\nint now[maxn],dis[maxn];\n\nint bfs()\t\t\t\t\t\t\t\t\t\t//分层\n{\n\tmemset(dis,-1,sizeof(dis));\n\tqueue<int > q;\n\tq.push(1);\n\tdis[1]=0;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front() ;\n\t\tq.pop();\n\t\tfor(int i=1;i<=n;++i)\n\t\t{\n\t\t\tif(dis[i]==-1 && edge[u][i]>0)\n\t\t\t{\n\t\t\t\tdis[i]=dis[u]+1;\n\t\t\t\tq.push(i);\n\t\t\t}\n\t\t}\n\t} \n\treturn dis[n]==-1?0:dis[n];\n}\n\nint MaxFlow(int u,int flow)\n{\n\tif(u==n) return flow;\n\tint post_maxflow;\n\tfor(int i=now[u];i<n;++i)                    //当前弧优化\n\t{\n\t\tnow[u]=1;\n\t\tif(dis[i+1]==dis[u]+1 && edge[u][i+1]>0 && (post_maxflow=MaxFlow(i+1,min(flow,edge[u][i+1]))))\n\t\t{\n\t\t\tedge[u][i+1]-=post_maxflow; \n\t\t\tedge[i+1][u]+=post_maxflow;\n\t\t\treturn post_maxflow;\n\t\t}\n\t}\n\treturn 0;\n}\n\nint main()\n{\n\t//freopen(\"in.txt\",\"r\",stdin);\n\t//freopen(\"out.txt\",\"w\",stdout);\n\tint sumflow=0;\n\tmemset(edge,0,sizeof(edge));\n\tscanf(\"%d%d\",&m,&n);\n\tfor(int i=1;i<=m;++i)\n\t{\n\t\tint u,v,w;\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tedge[u][v]+=w;\n\t}\n\twhile(bfs())\n\t{\n\t\tint flow;\n\t\tmemset(now,0,sizeof(now));\n\t\twhile(flow=MaxFlow(1,INF)) sumflow+=flow;\n\t}\n\tprintf(\"%d\",sumflow);\n\treturn 0;\n}\n```\n\n但是当图很大时，邻接矩阵显然无法满足我们的需求，如[POJ3469 Dual Core CPU][2] 中 n<=20000,这时再用邻接矩阵会ML，只要将图该用邻接表存储即可，附上代码：\n[2]:http://poj.org/problem?id=3469\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<queue>\n\n#define Repeat(s,t) for(int i=(s);i<(t);++i)\n#define INF 0x3f3f3f3f\n#define maxn 20000+50\n\n#define DEBUG\nusing namespace std;\n\nstruct edge\n{\n\tint from,to,cap,flow;\n\tedge(int from,int to,int cap,int flow):from(from),to(to),cap(cap),flow(flow) {}\n};\n\nstruct dinic\n{\n\tint n,m,s,t;\n\tvector<edge> edges;\n\tvector<int> G[maxn];\n\tint d[maxn];\n\tint cur[maxn];\n\tdinic() {}\n\t\n\tvoid init()\n\t{\n\t\tmemset(d,-1,sizeof(d));\n\t\tmemset(cur,0,sizeof(0));\n\t}\n\t\n\tvoid add_edge(int from,int to,int cap,int flag)\n\t{\n\t\tif(!flag)\n\t\t{\n\t\tedges.push_back(edge(from,to,cap,0));\n\t\tedges.push_back(edge(to,from,0,0));\n\t\t}\n\t\telse\n\t\t{\n\t\tedges.push_back(edge(from,to,cap,0));\n\t\tedges.push_back(edge(to,from,cap,0));  \n\t\t}\n\t\tm=edges.size();\n\t\tG[from].push_back(m-2);\n\t\tG[to].push_back(m-1);    \n\t}\n\t\n\tbool bfs()\n\t{\n\t\tmemset(d,-1,sizeof(d));\n\t\tqueue<int> q;\n\t\tq.push(s);\n\t\td[s]=0;\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint u=q.front() ;\n\t\t\tq.pop();\n\t\t\tfor(unsigned int i=0;i<G[u].size();++i)\n\t\t\t{\n\t\t\t\tedge& e=edges[G[u][i]];\n\t\t\t\tif(d[e.to]==-1 && e.cap>e.flow)\n\t\t\t\t{\n\t\t\t\t\td[e.to]=d[u]+1;\n\t\t\t\t\tq.push(e.to);\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\treturn d[t]==-1?0:1;\n\t}\n\t\n\tint dfs(int x,int a)\n\t{\t\n\t\tif(x==t || a==0) return a;\n\t\tint flow=0,f;\n\t\tfor(unsigned int i=cur[x];i<G[x].size();++i)\n\t\t{\n\t\t\tcur[x]=i;\n\t\t\tedge& e=edges[G[x][i]];\n\t\t\tif(d[x]+1==d[e.to] && (f=dfs(e.to,min(a,e.cap-e.flow)))>0)\n\t\t\t{\n\t\t\t\te.flow+=f;\n\t\t\t\tedges[G[x][i]^1].flow-=f;\n\t\t\t\tflow+=f;\n\t\t\t\ta-=f;\n\t\t\t\tif(a==0) break;\n\t\t\t}\n\t\t}\n\t\treturn flow;\n\t}\n\t\n\tint MaxFlow(int n,int s,int t)\n\t{\n\t\tthis->n=n;\n\t\tthis->s=s;\n\t\tthis->t=t;\n\t\tint flow=0;\n\t\twhile(bfs())\n\t\t{\n\t\t\tmemset(cur,0,sizeof(cur));\n\t\t\tflow+=dfs(s,INF);\n\t\t}\n\t\treturn flow;\n\t}\n};\n\ninline int read()\n{\n\t/*神tm一定要注意过滤掉数据前面的多余空格或者换行符!否则会导致不可名状的错误!po主付出过惨痛代价QAQ*/\n\tchar ch;\n\tdo\n\t\tch=getchar();\n\twhile((ch < '0' || ch > '9') && ch !='-');\n\tint read=0;\n\tbool sign=0;\n\tif(ch=='-')\n\t{\n\t\tsign=1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0' && ch<='9')\n\t{\n\t\tread=read*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn sign==0?read:-read;\n}\n\ninline void write(int out)\n{\n\tif(out<0)\n\t{\n\t\tputchar('-');\n\t\tout=-out;\n\t}\n\tif(out>9) write(out/10);\n\tputchar(out%10+'0');\n}\n\nint main()\n{\n\tint n,m;\n\tn=read();\n\tm=read();\n\tint s=0,t=n+1;\n\tdinic D;\n\tRepeat(1,n+1)\n\t{\n\t\tint a=read(),b=read();\n\t\tD.add_edge(s,i,a,0);\n\t\tD.add_edge(i,t,b,0); \n\t}\n\tRepeat(1,m+1)\n\t{\n\t\tint a=read(),b=read(),w=read();\n\t\tD.add_edge(a,b,w,1); \n\t}\n\twrite(D.MaxFlow(n,s,t));\n\treturn 0;\n}\n```\n\n\n\n","slug":"网络流-Dinic算法","published":1,"updated":"2020-03-17T14:02:56.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7w04u3m0009pv6poaunfizq","content":"<h1 id=\"Dinic算法\"><a href=\"#Dinic算法\" class=\"headerlink\" title=\"Dinic算法\"></a>Dinic算法</h1><h2 id=\"例题-CodeVS-1993-草地排水\"><a href=\"#例题-CodeVS-1993-草地排水\" class=\"headerlink\" title=\"例题:CodeVS 1993 草地排水\"></a><strong>例题</strong>:<a href=\"http://codevs.cn/problem/1993/\" target=\"_blank\" rel=\"noopener\">CodeVS 1993 草地排水</a></h2><blockquote>\n<p><strong><em>题目描述 Description</em></strong><br>在农夫约翰的农场上，每逢下雨，Bessie最喜欢的三叶草地就积聚了一潭水。这意味着草地被水淹没了，并且小草要继续生长还要花相当长一段时间。因此，农夫约翰修建了一套排水系统来使贝茜的草地免除被大水淹没的烦恼（不用担心，雨水会流向附近的一条小溪）。作为一名一流的技师，农夫约翰已经在每条排水沟的一端安上了控制器，这样他可以控制流入排水沟的水流量。</p>\n<p>农夫约翰知道每一条排水沟每分钟可以流过的水量，和排水系统的准确布局（起点为水潭而终点为小溪的一张网）。需要注意的是，有些时候从一处到另一处不只有一条排水沟。</p>\n<p>根据这些信息，计算从水潭排水到小溪的最大流量。对于给出的每条排水沟，雨水只能沿着一个方向流动，注意可能会出现雨水环形流动的情形。<br><a id=\"more\"></a><br><strong><em>输入描述 Input Description</em></strong><br>第1行: 两个用空格分开的整数N (0 &lt;= N &lt;= 200) 和 M (2 &lt;= M &lt;= 200)。N是农夫John已经挖好的排水沟的数量，M是排水沟交叉点的数量。交点1是水潭，交点M是小溪。</p>\n<p>第二行到第N+1行: 每行有三个整数，Si, Ei, 和 Ci。Si 和 Ei (1 &lt;= Si, Ei &lt;= M) 指明排水沟两端的交点，雨水从Si 流向Ei。Ci (0 &lt;= Ci &lt;= 10,000,000)是这条排水沟的最大容量。</p>\n<p><strong><em>输出描述 Output Description</em></strong><br>输出一个整数，即排水的最大流量。</p>\n<p><strong><em>样例输入 Sample Input</em></strong><br>5 4<br>1 2 40<br>1 4 20<br>2 4 20<br>2 3 30<br>3 4 10</p>\n<p><strong><em>样例输出 Sample Output</em></strong><br>50</p>\n</blockquote>\n<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>很显然，这是一道网络流问题，源点为1号节点，汇点为第n号节点，中间的点之间由有向边连接，边权即为流量wi，这样就简单构造了一个网络流的问题，由于题目要求排水的最大流量，也就是求出此网络中的最大流。</p>\n<p>对于求最大流的问题，大家入门时一定接触的是EK算法，但是EK算法的效率实在感人，难以满足竞赛中的需要，而Dinic算法通过对EK算法简单的优化使其效率有了明显的提升，基本能够满足竞赛对求最大流的效率的要求。那么Dinic是怎样优化的呢？</p>\n<p><strong>Dinic算法有三个关键词：增广路，残量网络，层次</strong>。</p>\n<p>首先，增广路就是每次从源点扩展一条可以到汇点的路径，然后更新一遍残留网络后继续寻找一条这样的路径的过程直至从源点到汇点没有一条路径可达时停止，这个过程就是求增广路的过程。（附上一组求增广路的流程图）</p>\n<p><img src=\"/images/post_images/网络流--Dinic算法-01.png\" alt=\"增广路\"></p>\n<p>残量网络是Dinic算法（也是EK算法）的关键，残量网络实际上就是流网络上一条边在当前流量的基础上可以允许的额外流量，即 $C_f(u,v)=c(u,v) -f(u,v)$ 但需要特别注意的是，当 $C_f(u,v)$ 为0时该条边将不属于图 $ G_f $。残量网络的构建相当于给了你一个后悔的机会，将原来已经删去的路在可以得到更优解时换回来，即将反向弧再次反向，又回到原来的状态。</p>\n<p>之前两点并不是Dinic算法独有的，EK算法同样需要，然而Dinic更优秀的地方就在于第三点，它求增广路前先将图进行分层，逐层递进寻找增广路，这样每条路都是s-t最短路，根据最短增广路算法中的证明（不必深究），可以确定这样找增广路的效率得到大幅提高！</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>了解了算法的关键，码出来也不会有太大障碍，每次增光前bfs分一次层即可，下面附上代码(邻接矩阵存储)：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 255</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> edge[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> now[maxn],dis[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span>\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//分层</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dis,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span>(dis));</span><br><span class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span> &gt; q;</span><br><span class=\"line\">\tq.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tdis[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!q.empty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> u=q.front() ;</span><br><span class=\"line\">\t\tq.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dis[i]==<span class=\"number\">-1</span> &amp;&amp; edge[u][i]&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tdis[i]=dis[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tq.push(i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dis[n]==<span class=\"number\">-1</span>?<span class=\"number\">0</span>:dis[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MaxFlow</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> flow)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(u==n) <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> post_maxflow;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=now[u];i&lt;n;++i)                    <span class=\"comment\">//当前弧优化</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnow[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(dis[i+<span class=\"number\">1</span>]==dis[u]+<span class=\"number\">1</span> &amp;&amp; edge[u][i+<span class=\"number\">1</span>]&gt;<span class=\"number\">0</span> &amp;&amp; (post_maxflow=MaxFlow(i+<span class=\"number\">1</span>,min(flow,edge[u][i+<span class=\"number\">1</span>]))))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tedge[u][i+<span class=\"number\">1</span>]-=post_maxflow; </span><br><span class=\"line\">\t\t\tedge[i+<span class=\"number\">1</span>][u]+=post_maxflow;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> post_maxflow;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//freopen(\"in.txt\",\"r\",stdin);</span></span><br><span class=\"line\">\t<span class=\"comment\">//freopen(\"out.txt\",\"w\",stdout);</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sumflow=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(edge,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(edge));</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;m,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> u,v,w;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class=\"line\">\t\tedge[u][v]+=w;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(bfs())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> flow;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(now,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(now));</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(flow=MaxFlow(<span class=\"number\">1</span>,INF)) sumflow+=flow;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,sumflow);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是当图很大时，邻接矩阵显然无法满足我们的需求，如<a href=\"http://poj.org/problem?id=3469\" target=\"_blank\" rel=\"noopener\">POJ3469 Dual Core CPU</a> 中 n&lt;=20000,这时再用邻接矩阵会ML，只要将图该用邻接表存储即可，附上代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Repeat(s,t) for(int i=(s);i&lt;(t);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 20000+50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEBUG</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> from,to,cap,flow;</span><br><span class=\"line\">\tedge(<span class=\"keyword\">int</span> from,<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> cap,<span class=\"keyword\">int</span> flow):from(from),to(to),cap(cap),flow(flow) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dinic</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m,s,t;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;edge&gt; edges;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; G[maxn];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cur[maxn];</span><br><span class=\"line\">\tdinic() &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(d,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(cur,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> from,<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> cap,<span class=\"keyword\">int</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!flag)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\tedges.push_back(edge(from,to,cap,<span class=\"number\">0</span>));</span><br><span class=\"line\">\t\tedges.push_back(edge(to,from,<span class=\"number\">0</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\tedges.push_back(edge(from,to,cap,<span class=\"number\">0</span>));</span><br><span class=\"line\">\t\tedges.push_back(edge(to,from,cap,<span class=\"number\">0</span>));  </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tm=edges.size();</span><br><span class=\"line\">\t\tG[from].push_back(m<span class=\"number\">-2</span>);</span><br><span class=\"line\">\t\tG[to].push_back(m<span class=\"number\">-1</span>);    </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(d,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">\t\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">\t\tq.push(s);</span><br><span class=\"line\">\t\td[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!q.empty())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> u=q.front() ;</span><br><span class=\"line\">\t\t\tq.pop();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;G[u].size();++i)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tedge&amp; e=edges[G[u][i]];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(d[e.to]==<span class=\"number\">-1</span> &amp;&amp; e.cap&gt;e.flow)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\td[e.to]=d[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\tq.push(e.to);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> d[t]==<span class=\"number\">-1</span>?<span class=\"number\">0</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x==t || a==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> flow=<span class=\"number\">0</span>,f;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i=cur[x];i&lt;G[x].size();++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcur[x]=i;</span><br><span class=\"line\">\t\t\tedge&amp; e=edges[G[x][i]];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(d[x]+<span class=\"number\">1</span>==d[e.to] &amp;&amp; (f=dfs(e.to,min(a,e.cap-e.flow)))&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\te.flow+=f;</span><br><span class=\"line\">\t\t\t\tedges[G[x][i]^<span class=\"number\">1</span>].flow-=f;</span><br><span class=\"line\">\t\t\t\tflow+=f;</span><br><span class=\"line\">\t\t\t\ta-=f;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MaxFlow</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;n=n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;s=s;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;t=t;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> flow=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(bfs())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memset</span>(cur,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(cur));</span><br><span class=\"line\">\t\t\tflow+=dfs(s,INF);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*神tm一定要注意过滤掉数据前面的多余空格或者换行符!否则会导致不可名状的错误!po主付出过惨痛代价QAQ*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tch=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((ch &lt; <span class=\"string\">'0'</span> || ch &gt; <span class=\"string\">'9'</span>) &amp;&amp; ch !=<span class=\"string\">'-'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> read=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> sign=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ch==<span class=\"string\">'-'</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tsign=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tch=getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">'0'</span> &amp;&amp; ch&lt;=<span class=\"string\">'9'</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tread=read*<span class=\"number\">10</span>+ch-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\tch=getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sign==<span class=\"number\">0</span>?read:-read;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> out)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(out&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>);</span><br><span class=\"line\">\t\tout=-out;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(out&gt;<span class=\"number\">9</span>) write(out/<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(out%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">\tn=read();</span><br><span class=\"line\">\tm=read();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> s=<span class=\"number\">0</span>,t=n+<span class=\"number\">1</span>;</span><br><span class=\"line\">\tdinic D;</span><br><span class=\"line\">\tRepeat(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a=read(),b=read();</span><br><span class=\"line\">\t\tD.add_edge(s,i,a,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tD.add_edge(i,t,b,<span class=\"number\">0</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tRepeat(<span class=\"number\">1</span>,m+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a=read(),b=read(),w=read();</span><br><span class=\"line\">\t\tD.add_edge(a,b,w,<span class=\"number\">1</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twrite(D.MaxFlow(n,s,t));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"Dinic算法\"><a href=\"#Dinic算法\" class=\"headerlink\" title=\"Dinic算法\"></a>Dinic算法</h1><h2 id=\"例题-CodeVS-1993-草地排水\"><a href=\"#例题-CodeVS-1993-草地排水\" class=\"headerlink\" title=\"例题:CodeVS 1993 草地排水\"></a><strong>例题</strong>:<a href=\"http://codevs.cn/problem/1993/\" target=\"_blank\" rel=\"noopener\">CodeVS 1993 草地排水</a></h2><blockquote>\n<p><strong><em>题目描述 Description</em></strong><br>在农夫约翰的农场上，每逢下雨，Bessie最喜欢的三叶草地就积聚了一潭水。这意味着草地被水淹没了，并且小草要继续生长还要花相当长一段时间。因此，农夫约翰修建了一套排水系统来使贝茜的草地免除被大水淹没的烦恼（不用担心，雨水会流向附近的一条小溪）。作为一名一流的技师，农夫约翰已经在每条排水沟的一端安上了控制器，这样他可以控制流入排水沟的水流量。</p>\n<p>农夫约翰知道每一条排水沟每分钟可以流过的水量，和排水系统的准确布局（起点为水潭而终点为小溪的一张网）。需要注意的是，有些时候从一处到另一处不只有一条排水沟。</p>\n<p>根据这些信息，计算从水潭排水到小溪的最大流量。对于给出的每条排水沟，雨水只能沿着一个方向流动，注意可能会出现雨水环形流动的情形。<br>","more":"<br><strong><em>输入描述 Input Description</em></strong><br>第1行: 两个用空格分开的整数N (0 &lt;= N &lt;= 200) 和 M (2 &lt;= M &lt;= 200)。N是农夫John已经挖好的排水沟的数量，M是排水沟交叉点的数量。交点1是水潭，交点M是小溪。</p>\n<p>第二行到第N+1行: 每行有三个整数，Si, Ei, 和 Ci。Si 和 Ei (1 &lt;= Si, Ei &lt;= M) 指明排水沟两端的交点，雨水从Si 流向Ei。Ci (0 &lt;= Ci &lt;= 10,000,000)是这条排水沟的最大容量。</p>\n<p><strong><em>输出描述 Output Description</em></strong><br>输出一个整数，即排水的最大流量。</p>\n<p><strong><em>样例输入 Sample Input</em></strong><br>5 4<br>1 2 40<br>1 4 20<br>2 4 20<br>2 3 30<br>3 4 10</p>\n<p><strong><em>样例输出 Sample Output</em></strong><br>50</p>\n</blockquote>\n<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>很显然，这是一道网络流问题，源点为1号节点，汇点为第n号节点，中间的点之间由有向边连接，边权即为流量wi，这样就简单构造了一个网络流的问题，由于题目要求排水的最大流量，也就是求出此网络中的最大流。</p>\n<p>对于求最大流的问题，大家入门时一定接触的是EK算法，但是EK算法的效率实在感人，难以满足竞赛中的需要，而Dinic算法通过对EK算法简单的优化使其效率有了明显的提升，基本能够满足竞赛对求最大流的效率的要求。那么Dinic是怎样优化的呢？</p>\n<p><strong>Dinic算法有三个关键词：增广路，残量网络，层次</strong>。</p>\n<p>首先，增广路就是每次从源点扩展一条可以到汇点的路径，然后更新一遍残留网络后继续寻找一条这样的路径的过程直至从源点到汇点没有一条路径可达时停止，这个过程就是求增广路的过程。（附上一组求增广路的流程图）</p>\n<p><img src=\"/images/post_images/网络流--Dinic算法-01.png\" alt=\"增广路\"></p>\n<p>残量网络是Dinic算法（也是EK算法）的关键，残量网络实际上就是流网络上一条边在当前流量的基础上可以允许的额外流量，即 $C_f(u,v)=c(u,v) -f(u,v)$ 但需要特别注意的是，当 $C_f(u,v)$ 为0时该条边将不属于图 $ G_f $。残量网络的构建相当于给了你一个后悔的机会，将原来已经删去的路在可以得到更优解时换回来，即将反向弧再次反向，又回到原来的状态。</p>\n<p>之前两点并不是Dinic算法独有的，EK算法同样需要，然而Dinic更优秀的地方就在于第三点，它求增广路前先将图进行分层，逐层递进寻找增广路，这样每条路都是s-t最短路，根据最短增广路算法中的证明（不必深究），可以确定这样找增广路的效率得到大幅提高！</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>了解了算法的关键，码出来也不会有太大障碍，每次增光前bfs分一次层即可，下面附上代码(邻接矩阵存储)：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 255</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> edge[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> now[maxn],dis[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span>\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//分层</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dis,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span>(dis));</span><br><span class=\"line\">\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span> &gt; q;</span><br><span class=\"line\">\tq.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">\tdis[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!q.empty())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> u=q.front() ;</span><br><span class=\"line\">\t\tq.pop();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dis[i]==<span class=\"number\">-1</span> &amp;&amp; edge[u][i]&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tdis[i]=dis[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tq.push(i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dis[n]==<span class=\"number\">-1</span>?<span class=\"number\">0</span>:dis[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MaxFlow</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> flow)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(u==n) <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> post_maxflow;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=now[u];i&lt;n;++i)                    <span class=\"comment\">//当前弧优化</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnow[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(dis[i+<span class=\"number\">1</span>]==dis[u]+<span class=\"number\">1</span> &amp;&amp; edge[u][i+<span class=\"number\">1</span>]&gt;<span class=\"number\">0</span> &amp;&amp; (post_maxflow=MaxFlow(i+<span class=\"number\">1</span>,min(flow,edge[u][i+<span class=\"number\">1</span>]))))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tedge[u][i+<span class=\"number\">1</span>]-=post_maxflow; </span><br><span class=\"line\">\t\t\tedge[i+<span class=\"number\">1</span>][u]+=post_maxflow;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> post_maxflow;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//freopen(\"in.txt\",\"r\",stdin);</span></span><br><span class=\"line\">\t<span class=\"comment\">//freopen(\"out.txt\",\"w\",stdout);</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sumflow=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(edge,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(edge));</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;m,&amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> u,v,w;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class=\"line\">\t\tedge[u][v]+=w;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(bfs())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> flow;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(now,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(now));</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(flow=MaxFlow(<span class=\"number\">1</span>,INF)) sumflow+=flow;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,sumflow);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是当图很大时，邻接矩阵显然无法满足我们的需求，如<a href=\"http://poj.org/problem?id=3469\" target=\"_blank\" rel=\"noopener\">POJ3469 Dual Core CPU</a> 中 n&lt;=20000,这时再用邻接矩阵会ML，只要将图该用邻接表存储即可，附上代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Repeat(s,t) for(int i=(s);i&lt;(t);++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 20000+50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEBUG</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> from,to,cap,flow;</span><br><span class=\"line\">\tedge(<span class=\"keyword\">int</span> from,<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> cap,<span class=\"keyword\">int</span> flow):from(from),to(to),cap(cap),flow(flow) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dinic</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m,s,t;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;edge&gt; edges;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; G[maxn];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cur[maxn];</span><br><span class=\"line\">\tdinic() &#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(d,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(cur,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> from,<span class=\"keyword\">int</span> to,<span class=\"keyword\">int</span> cap,<span class=\"keyword\">int</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!flag)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\tedges.push_back(edge(from,to,cap,<span class=\"number\">0</span>));</span><br><span class=\"line\">\t\tedges.push_back(edge(to,from,<span class=\"number\">0</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\tedges.push_back(edge(from,to,cap,<span class=\"number\">0</span>));</span><br><span class=\"line\">\t\tedges.push_back(edge(to,from,cap,<span class=\"number\">0</span>));  </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tm=edges.size();</span><br><span class=\"line\">\t\tG[from].push_back(m<span class=\"number\">-2</span>);</span><br><span class=\"line\">\t\tG[to].push_back(m<span class=\"number\">-1</span>);    </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(d,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">\t\t<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">\t\tq.push(s);</span><br><span class=\"line\">\t\td[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!q.empty())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> u=q.front() ;</span><br><span class=\"line\">\t\t\tq.pop();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;G[u].size();++i)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tedge&amp; e=edges[G[u][i]];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(d[e.to]==<span class=\"number\">-1</span> &amp;&amp; e.cap&gt;e.flow)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\td[e.to]=d[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\tq.push(e.to);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> d[t]==<span class=\"number\">-1</span>?<span class=\"number\">0</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x==t || a==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> flow=<span class=\"number\">0</span>,f;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i=cur[x];i&lt;G[x].size();++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcur[x]=i;</span><br><span class=\"line\">\t\t\tedge&amp; e=edges[G[x][i]];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(d[x]+<span class=\"number\">1</span>==d[e.to] &amp;&amp; (f=dfs(e.to,min(a,e.cap-e.flow)))&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\te.flow+=f;</span><br><span class=\"line\">\t\t\t\tedges[G[x][i]^<span class=\"number\">1</span>].flow-=f;</span><br><span class=\"line\">\t\t\t\tflow+=f;</span><br><span class=\"line\">\t\t\t\ta-=f;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(a==<span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MaxFlow</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;n=n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;s=s;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;t=t;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> flow=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(bfs())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memset</span>(cur,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(cur));</span><br><span class=\"line\">\t\t\tflow+=dfs(s,INF);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*神tm一定要注意过滤掉数据前面的多余空格或者换行符!否则会导致不可名状的错误!po主付出过惨痛代价QAQ*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tch=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((ch &lt; <span class=\"string\">'0'</span> || ch &gt; <span class=\"string\">'9'</span>) &amp;&amp; ch !=<span class=\"string\">'-'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> read=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> sign=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ch==<span class=\"string\">'-'</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tsign=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tch=getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">'0'</span> &amp;&amp; ch&lt;=<span class=\"string\">'9'</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tread=read*<span class=\"number\">10</span>+ch-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\tch=getchar();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sign==<span class=\"number\">0</span>?read:-read;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> out)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(out&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>);</span><br><span class=\"line\">\t\tout=-out;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(out&gt;<span class=\"number\">9</span>) write(out/<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">putchar</span>(out%<span class=\"number\">10</span>+<span class=\"string\">'0'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">\tn=read();</span><br><span class=\"line\">\tm=read();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> s=<span class=\"number\">0</span>,t=n+<span class=\"number\">1</span>;</span><br><span class=\"line\">\tdinic D;</span><br><span class=\"line\">\tRepeat(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a=read(),b=read();</span><br><span class=\"line\">\t\tD.add_edge(s,i,a,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tD.add_edge(i,t,b,<span class=\"number\">0</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tRepeat(<span class=\"number\">1</span>,m+<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a=read(),b=read(),w=read();</span><br><span class=\"line\">\t\tD.add_edge(a,b,w,<span class=\"number\">1</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twrite(D.MaxFlow(n,s,t));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"错排公式的推导与应用","date":"2019-04-08T11:52:28.000Z","_content":"# 问题简介\n错排问题，又称更列问题，是组合数学中的问题之一。对于它的研究最早可以追溯到十八世纪，当时他被数学家尼古拉·伯努利和欧拉研究，因此在历史上也被称为伯努利--欧拉的错装信封问题。这个问题有许多具体的版本，比如在写信时讲n封信装到n个不同的信封里，有多少种全部装错信封的情况？再比如n个人各写一张贺卡相互赠送，有多少种赠送方法？这些经典的题目都是典型的错排问题。\n<!-- more -->\n# 问题分析\n相信看过上面对于错排问题的简单的介绍，大家也都对它有了一些初步的了解，归结起来，就是考虑一个有n个元素的排列，若一个排列中所有的元素都不在自己原来的位置上，那么这样的排列就称为原排列的一个错排，n个元素的错排数记为D(n)。那么对于这样的排列D(n)有多少种呢？\n\n我们一步一步进行分析：\n首先，对于D(n)，有1~n这样n个元素错排，所以对于第一个元素①，它现在可能的位置有(n-1)个，倘若它在第k个元素的位置上，对于第k个元素而言，它所在的位置就有两种可能—第一种，它处在非第一个元素①位置上，所以对于接下来的排列就相当于是n-1个元素的错排，即D(n-1);第二种，它处在第一个元素①的位置上，所以在排列D(n)中有两个元素找到了位置，那么接下来的队列就相当于是n-2个元素的错排。\n因此，对于D(n)都有 \n$$ D_n=(n-1)*(D_{n-1}+D_{n-2}) (n>2)$$\n\n得到这个递推式之后，我们进一步进行推导：\n\n为了运算的方便，我们设 $D_n=n!*N_n$,\n\n则有: $n!*N_n=(n-1)*(n-2)!*N_{n-2}+(n-1)*(n-1)!*N_{n-1}$\n\n两边同时除以(n-1)! ,可得： \n\n$$n*N_n=N_{n-2}+(n-1)*N_{n-1}$$\n\n移项： \n\n$$N_n-N_{n-1}=(N_{n-2}-N_{n-1})/n = -(1/n)(N_{n-1}-N_{n-2})$$\n\n错项相消得： \n\n$$N_n-N_1=1/2!-1/3!+1/4!- ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!$$\n\n由于N(1)=0，N(2)=1, 所以 $N_n=1/2!-1/3!+1/4!- ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!$\n\n于是可以得到错排公式为:\n\n$$D_n=n!*(1/2!-1/3!+1/4!- 1/5!+ ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!) $$\n\n这样，我们就通过简单的推导得到了两个关于错排问题的公式！\n\n# 例题分析\n现在，我们来具体问题具体分析，了解错排公式如何转化为代码来解决考试中实际遇到的问题，我们这里以HDU Online Judge上的一道题考新郎为例，题目是这样的：\n\n阅读题目后我们不难发现，这道题的本质就是求解排列组合C(n,m)与错排m个元素D(m)的乘积，因此这道题的代码也十分简单，以下提供两种AC程序：\n方法1-递推公式:\n$$ D_n=(n-1)*(D_{n-1}+D_{n-2}) (D_1=0，D_2=1) $$\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nlong long _cuopai[50];\nlong long jiecheng[22]={1,1,2,6,24,120,720,5040,40320,\n                        362880,3628800,39916800,479001600,\n\t\t\t\t\t\t6227020800,87178291200,1307674368000,\n\t\t\t\t\t\t20922789888000,355687428096000,6402373705728000,\n\t\t\t\t\t\t121645100408832000,2432902008176640000};\n\nlong long cuopai(int x)\n{\n\tif(_cuopai[x]) return _cuopai[x];\n\tif(x==1) return 0;\n\tif(x==2) return 1; \n    return _cuopai[x]=(x-1)*(cuopai(x-1)+cuopai(x-2));\n}\n \nlong long c(int y,int z)\n{\n\treturn jiecheng[y]/(jiecheng[z]*jiecheng[y-z]);\n}\n \nint main()\n{\n\tmemset(_cuopai,0,sizeof(_cuopai));\n\tint a;\n\tcin>>a;\n\tfor(int i=1;i<=a;++i)\n\t{\n\t\tint m,n;\n\t    cin>>m>>n;\n\t    cout<<c(m,n)*cuopai(n)<<endl;\n\t}\n\treturn 0;\n}\n```\n\n方法2-通项公式:\n\n$$ D_n=n!*(1/2!-1/3!+1/4!- 1/5!+ ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!) $$\n\n这里可以根据题目做一下变形: \n\n$$F(n,m)=C(n,m)*D(m)=n!*(1/2!-1/3!+1/4!- 1/5!+ ··· ··· +(-1)^{m-1}/(m-1)!+(-1)^m/m!)/(n-m)!$$\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint m,n;\nlong long jiecheng[22]={1,1,2,6,24,120,720,5040,40320,\n                        362880,3628800,39916800,479001600,\n\t\t\t\t\t\t6227020800,87178291200,1307674368000,\n\t\t\t\t\t\t20922789888000,355687428096000,6402373705728000,\n\t\t\t\t\t\t121645100408832000,2432902008176640000};\n \nlong long cuopai_()\n{\n\tlong long sum=0,a=jiecheng[n],b=jiecheng[n-m];\n\tfor(int i=2;i<=m;++i)\n\t{\n\t\ta/=i;\n\t\tif(i%2==0)\n\t\t  sum+=a;\n\t\telse \n\t\t  sum-=a;\n\t\t//cout<<\"sum[\"<<i<<\"]\"<<sum<<endl; \n\t}\n\treturn sum/b;\n}\n \nint main()\n{\n\tint x;\n\tcin>>x;\n\tfor(int i=1;i<=x;++i)\n\t{\n\t\tcin>>n>>m;\n\t\tcout<<cuopai_()<<endl;\n\t}\n\treturn 0;\n}\n```","source":"_posts/错排公式的推导与应用.md","raw":"---\ntitle: 错排公式的推导与应用\ndate: 2019-04-08 19:52:28\ntags: Math\n---\n# 问题简介\n错排问题，又称更列问题，是组合数学中的问题之一。对于它的研究最早可以追溯到十八世纪，当时他被数学家尼古拉·伯努利和欧拉研究，因此在历史上也被称为伯努利--欧拉的错装信封问题。这个问题有许多具体的版本，比如在写信时讲n封信装到n个不同的信封里，有多少种全部装错信封的情况？再比如n个人各写一张贺卡相互赠送，有多少种赠送方法？这些经典的题目都是典型的错排问题。\n<!-- more -->\n# 问题分析\n相信看过上面对于错排问题的简单的介绍，大家也都对它有了一些初步的了解，归结起来，就是考虑一个有n个元素的排列，若一个排列中所有的元素都不在自己原来的位置上，那么这样的排列就称为原排列的一个错排，n个元素的错排数记为D(n)。那么对于这样的排列D(n)有多少种呢？\n\n我们一步一步进行分析：\n首先，对于D(n)，有1~n这样n个元素错排，所以对于第一个元素①，它现在可能的位置有(n-1)个，倘若它在第k个元素的位置上，对于第k个元素而言，它所在的位置就有两种可能—第一种，它处在非第一个元素①位置上，所以对于接下来的排列就相当于是n-1个元素的错排，即D(n-1);第二种，它处在第一个元素①的位置上，所以在排列D(n)中有两个元素找到了位置，那么接下来的队列就相当于是n-2个元素的错排。\n因此，对于D(n)都有 \n$$ D_n=(n-1)*(D_{n-1}+D_{n-2}) (n>2)$$\n\n得到这个递推式之后，我们进一步进行推导：\n\n为了运算的方便，我们设 $D_n=n!*N_n$,\n\n则有: $n!*N_n=(n-1)*(n-2)!*N_{n-2}+(n-1)*(n-1)!*N_{n-1}$\n\n两边同时除以(n-1)! ,可得： \n\n$$n*N_n=N_{n-2}+(n-1)*N_{n-1}$$\n\n移项： \n\n$$N_n-N_{n-1}=(N_{n-2}-N_{n-1})/n = -(1/n)(N_{n-1}-N_{n-2})$$\n\n错项相消得： \n\n$$N_n-N_1=1/2!-1/3!+1/4!- ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!$$\n\n由于N(1)=0，N(2)=1, 所以 $N_n=1/2!-1/3!+1/4!- ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!$\n\n于是可以得到错排公式为:\n\n$$D_n=n!*(1/2!-1/3!+1/4!- 1/5!+ ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!) $$\n\n这样，我们就通过简单的推导得到了两个关于错排问题的公式！\n\n# 例题分析\n现在，我们来具体问题具体分析，了解错排公式如何转化为代码来解决考试中实际遇到的问题，我们这里以HDU Online Judge上的一道题考新郎为例，题目是这样的：\n\n阅读题目后我们不难发现，这道题的本质就是求解排列组合C(n,m)与错排m个元素D(m)的乘积，因此这道题的代码也十分简单，以下提供两种AC程序：\n方法1-递推公式:\n$$ D_n=(n-1)*(D_{n-1}+D_{n-2}) (D_1=0，D_2=1) $$\n```cpp\n#include<iostream>\n#include<cstring>\n#include<cstdio>\nusing namespace std;\nlong long _cuopai[50];\nlong long jiecheng[22]={1,1,2,6,24,120,720,5040,40320,\n                        362880,3628800,39916800,479001600,\n\t\t\t\t\t\t6227020800,87178291200,1307674368000,\n\t\t\t\t\t\t20922789888000,355687428096000,6402373705728000,\n\t\t\t\t\t\t121645100408832000,2432902008176640000};\n\nlong long cuopai(int x)\n{\n\tif(_cuopai[x]) return _cuopai[x];\n\tif(x==1) return 0;\n\tif(x==2) return 1; \n    return _cuopai[x]=(x-1)*(cuopai(x-1)+cuopai(x-2));\n}\n \nlong long c(int y,int z)\n{\n\treturn jiecheng[y]/(jiecheng[z]*jiecheng[y-z]);\n}\n \nint main()\n{\n\tmemset(_cuopai,0,sizeof(_cuopai));\n\tint a;\n\tcin>>a;\n\tfor(int i=1;i<=a;++i)\n\t{\n\t\tint m,n;\n\t    cin>>m>>n;\n\t    cout<<c(m,n)*cuopai(n)<<endl;\n\t}\n\treturn 0;\n}\n```\n\n方法2-通项公式:\n\n$$ D_n=n!*(1/2!-1/3!+1/4!- 1/5!+ ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!) $$\n\n这里可以根据题目做一下变形: \n\n$$F(n,m)=C(n,m)*D(m)=n!*(1/2!-1/3!+1/4!- 1/5!+ ··· ··· +(-1)^{m-1}/(m-1)!+(-1)^m/m!)/(n-m)!$$\n\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nint m,n;\nlong long jiecheng[22]={1,1,2,6,24,120,720,5040,40320,\n                        362880,3628800,39916800,479001600,\n\t\t\t\t\t\t6227020800,87178291200,1307674368000,\n\t\t\t\t\t\t20922789888000,355687428096000,6402373705728000,\n\t\t\t\t\t\t121645100408832000,2432902008176640000};\n \nlong long cuopai_()\n{\n\tlong long sum=0,a=jiecheng[n],b=jiecheng[n-m];\n\tfor(int i=2;i<=m;++i)\n\t{\n\t\ta/=i;\n\t\tif(i%2==0)\n\t\t  sum+=a;\n\t\telse \n\t\t  sum-=a;\n\t\t//cout<<\"sum[\"<<i<<\"]\"<<sum<<endl; \n\t}\n\treturn sum/b;\n}\n \nint main()\n{\n\tint x;\n\tcin>>x;\n\tfor(int i=1;i<=x;++i)\n\t{\n\t\tcin>>n>>m;\n\t\tcout<<cuopai_()<<endl;\n\t}\n\treturn 0;\n}\n```","slug":"错排公式的推导与应用","published":1,"updated":"2019-04-08T12:20:12.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7w04u3n000bpv6pwetboeqz","content":"<h1 id=\"问题简介\"><a href=\"#问题简介\" class=\"headerlink\" title=\"问题简介\"></a>问题简介</h1><p>错排问题，又称更列问题，是组合数学中的问题之一。对于它的研究最早可以追溯到十八世纪，当时他被数学家尼古拉·伯努利和欧拉研究，因此在历史上也被称为伯努利—欧拉的错装信封问题。这个问题有许多具体的版本，比如在写信时讲n封信装到n个不同的信封里，有多少种全部装错信封的情况？再比如n个人各写一张贺卡相互赠送，有多少种赠送方法？这些经典的题目都是典型的错排问题。<br><a id=\"more\"></a></p>\n<h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>相信看过上面对于错排问题的简单的介绍，大家也都对它有了一些初步的了解，归结起来，就是考虑一个有n个元素的排列，若一个排列中所有的元素都不在自己原来的位置上，那么这样的排列就称为原排列的一个错排，n个元素的错排数记为D(n)。那么对于这样的排列D(n)有多少种呢？</p>\n<p>我们一步一步进行分析：<br>首先，对于D(n)，有1~n这样n个元素错排，所以对于第一个元素①，它现在可能的位置有(n-1)个，倘若它在第k个元素的位置上，对于第k个元素而言，它所在的位置就有两种可能—第一种，它处在非第一个元素①位置上，所以对于接下来的排列就相当于是n-1个元素的错排，即D(n-1);第二种，它处在第一个元素①的位置上，所以在排列D(n)中有两个元素找到了位置，那么接下来的队列就相当于是n-2个元素的错排。<br>因此，对于D(n)都有 </p>\n<script type=\"math/tex; mode=display\">D_n=(n-1)*(D_{n-1}+D_{n-2}) (n>2)</script><p>得到这个递推式之后，我们进一步进行推导：</p>\n<p>为了运算的方便，我们设 $D_n=n!*N_n$,</p>\n<p>则有: $n!<em>N_n=(n-1)</em>(n-2)!<em>N_{n-2}+(n-1)</em>(n-1)!*N_{n-1}$</p>\n<p>两边同时除以(n-1)! ,可得： </p>\n<script type=\"math/tex; mode=display\">n*N_n=N_{n-2}+(n-1)*N_{n-1}</script><p>移项： </p>\n<script type=\"math/tex; mode=display\">N_n-N_{n-1}=(N_{n-2}-N_{n-1})/n = -(1/n)(N_{n-1}-N_{n-2})</script><p>错项相消得： </p>\n<script type=\"math/tex; mode=display\">N_n-N_1=1/2!-1/3!+1/4!- ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!</script><p>由于N(1)=0，N(2)=1, 所以 $N_n=1/2!-1/3!+1/4!- ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!$</p>\n<p>于是可以得到错排公式为:</p>\n<script type=\"math/tex; mode=display\">D_n=n!*(1/2!-1/3!+1/4!- 1/5!+ ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!)</script><p>这样，我们就通过简单的推导得到了两个关于错排问题的公式！</p>\n<h1 id=\"例题分析\"><a href=\"#例题分析\" class=\"headerlink\" title=\"例题分析\"></a>例题分析</h1><p>现在，我们来具体问题具体分析，了解错排公式如何转化为代码来解决考试中实际遇到的问题，我们这里以HDU Online Judge上的一道题考新郎为例，题目是这样的：</p>\n<p>阅读题目后我们不难发现，这道题的本质就是求解排列组合C(n,m)与错排m个元素D(m)的乘积，因此这道题的代码也十分简单，以下提供两种AC程序：<br>方法1-递推公式:</p>\n<script type=\"math/tex; mode=display\">D_n=(n-1)*(D_{n-1}+D_{n-2}) (D_1=0，D_2=1)</script><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> _cuopai[<span class=\"number\">50</span>];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> jiecheng[<span class=\"number\">22</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">24</span>,<span class=\"number\">120</span>,<span class=\"number\">720</span>,<span class=\"number\">5040</span>,<span class=\"number\">40320</span>,</span><br><span class=\"line\">                        <span class=\"number\">362880</span>,<span class=\"number\">3628800</span>,<span class=\"number\">39916800</span>,<span class=\"number\">479001600</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"number\">6227020800</span>,<span class=\"number\">87178291200</span>,<span class=\"number\">1307674368000</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"number\">20922789888000</span>,<span class=\"number\">355687428096000</span>,<span class=\"number\">6402373705728000</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"number\">121645100408832000</span>,<span class=\"number\">2432902008176640000</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">cuopai</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(_cuopai[x]) <span class=\"keyword\">return</span> _cuopai[x];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x==<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> _cuopai[x]=(x<span class=\"number\">-1</span>)*(cuopai(x<span class=\"number\">-1</span>)+cuopai(x<span class=\"number\">-2</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">c</span><span class=\"params\">(<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> z)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> jiecheng[y]/(jiecheng[z]*jiecheng[y-z]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(_cuopai,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(_cuopai));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;a;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=a;++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> m,n;</span><br><span class=\"line\">\t    <span class=\"built_in\">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class=\"line\">\t    <span class=\"built_in\">cout</span>&lt;&lt;c(m,n)*cuopai(n)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法2-通项公式:</p>\n<script type=\"math/tex; mode=display\">D_n=n!*(1/2!-1/3!+1/4!- 1/5!+ ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!)</script><p>这里可以根据题目做一下变形: </p>\n<script type=\"math/tex; mode=display\">F(n,m)=C(n,m)*D(m)=n!*(1/2!-1/3!+1/4!- 1/5!+ ··· ··· +(-1)^{m-1}/(m-1)!+(-1)^m/m!)/(n-m)!</script><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> m,n;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> jiecheng[<span class=\"number\">22</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">24</span>,<span class=\"number\">120</span>,<span class=\"number\">720</span>,<span class=\"number\">5040</span>,<span class=\"number\">40320</span>,</span><br><span class=\"line\">                        <span class=\"number\">362880</span>,<span class=\"number\">3628800</span>,<span class=\"number\">39916800</span>,<span class=\"number\">479001600</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"number\">6227020800</span>,<span class=\"number\">87178291200</span>,<span class=\"number\">1307674368000</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"number\">20922789888000</span>,<span class=\"number\">355687428096000</span>,<span class=\"number\">6402373705728000</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"number\">121645100408832000</span>,<span class=\"number\">2432902008176640000</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">cuopai_</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum=<span class=\"number\">0</span>,a=jiecheng[n],b=jiecheng[n-m];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=m;++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta/=i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i%<span class=\"number\">2</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t  sum+=a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t  sum-=a;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cout&lt;&lt;\"sum[\"&lt;&lt;i&lt;&lt;\"]\"&lt;&lt;sum&lt;&lt;endl; </span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum/b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=x;++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;cuopai_()&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"问题简介\"><a href=\"#问题简介\" class=\"headerlink\" title=\"问题简介\"></a>问题简介</h1><p>错排问题，又称更列问题，是组合数学中的问题之一。对于它的研究最早可以追溯到十八世纪，当时他被数学家尼古拉·伯努利和欧拉研究，因此在历史上也被称为伯努利—欧拉的错装信封问题。这个问题有许多具体的版本，比如在写信时讲n封信装到n个不同的信封里，有多少种全部装错信封的情况？再比如n个人各写一张贺卡相互赠送，有多少种赠送方法？这些经典的题目都是典型的错排问题。<br>","more":"</p>\n<h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>相信看过上面对于错排问题的简单的介绍，大家也都对它有了一些初步的了解，归结起来，就是考虑一个有n个元素的排列，若一个排列中所有的元素都不在自己原来的位置上，那么这样的排列就称为原排列的一个错排，n个元素的错排数记为D(n)。那么对于这样的排列D(n)有多少种呢？</p>\n<p>我们一步一步进行分析：<br>首先，对于D(n)，有1~n这样n个元素错排，所以对于第一个元素①，它现在可能的位置有(n-1)个，倘若它在第k个元素的位置上，对于第k个元素而言，它所在的位置就有两种可能—第一种，它处在非第一个元素①位置上，所以对于接下来的排列就相当于是n-1个元素的错排，即D(n-1);第二种，它处在第一个元素①的位置上，所以在排列D(n)中有两个元素找到了位置，那么接下来的队列就相当于是n-2个元素的错排。<br>因此，对于D(n)都有 </p>\n<script type=\"math/tex; mode=display\">D_n=(n-1)*(D_{n-1}+D_{n-2}) (n>2)</script><p>得到这个递推式之后，我们进一步进行推导：</p>\n<p>为了运算的方便，我们设 $D_n=n!*N_n$,</p>\n<p>则有: $n!<em>N_n=(n-1)</em>(n-2)!<em>N_{n-2}+(n-1)</em>(n-1)!*N_{n-1}$</p>\n<p>两边同时除以(n-1)! ,可得： </p>\n<script type=\"math/tex; mode=display\">n*N_n=N_{n-2}+(n-1)*N_{n-1}</script><p>移项： </p>\n<script type=\"math/tex; mode=display\">N_n-N_{n-1}=(N_{n-2}-N_{n-1})/n = -(1/n)(N_{n-1}-N_{n-2})</script><p>错项相消得： </p>\n<script type=\"math/tex; mode=display\">N_n-N_1=1/2!-1/3!+1/4!- ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!</script><p>由于N(1)=0，N(2)=1, 所以 $N_n=1/2!-1/3!+1/4!- ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!$</p>\n<p>于是可以得到错排公式为:</p>\n<script type=\"math/tex; mode=display\">D_n=n!*(1/2!-1/3!+1/4!- 1/5!+ ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!)</script><p>这样，我们就通过简单的推导得到了两个关于错排问题的公式！</p>\n<h1 id=\"例题分析\"><a href=\"#例题分析\" class=\"headerlink\" title=\"例题分析\"></a>例题分析</h1><p>现在，我们来具体问题具体分析，了解错排公式如何转化为代码来解决考试中实际遇到的问题，我们这里以HDU Online Judge上的一道题考新郎为例，题目是这样的：</p>\n<p>阅读题目后我们不难发现，这道题的本质就是求解排列组合C(n,m)与错排m个元素D(m)的乘积，因此这道题的代码也十分简单，以下提供两种AC程序：<br>方法1-递推公式:</p>\n<script type=\"math/tex; mode=display\">D_n=(n-1)*(D_{n-1}+D_{n-2}) (D_1=0，D_2=1)</script><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> _cuopai[<span class=\"number\">50</span>];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> jiecheng[<span class=\"number\">22</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">24</span>,<span class=\"number\">120</span>,<span class=\"number\">720</span>,<span class=\"number\">5040</span>,<span class=\"number\">40320</span>,</span><br><span class=\"line\">                        <span class=\"number\">362880</span>,<span class=\"number\">3628800</span>,<span class=\"number\">39916800</span>,<span class=\"number\">479001600</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"number\">6227020800</span>,<span class=\"number\">87178291200</span>,<span class=\"number\">1307674368000</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"number\">20922789888000</span>,<span class=\"number\">355687428096000</span>,<span class=\"number\">6402373705728000</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"number\">121645100408832000</span>,<span class=\"number\">2432902008176640000</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">cuopai</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(_cuopai[x]) <span class=\"keyword\">return</span> _cuopai[x];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x==<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> _cuopai[x]=(x<span class=\"number\">-1</span>)*(cuopai(x<span class=\"number\">-1</span>)+cuopai(x<span class=\"number\">-2</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">c</span><span class=\"params\">(<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> z)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> jiecheng[y]/(jiecheng[z]*jiecheng[y-z]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(_cuopai,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(_cuopai));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;a;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=a;++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> m,n;</span><br><span class=\"line\">\t    <span class=\"built_in\">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class=\"line\">\t    <span class=\"built_in\">cout</span>&lt;&lt;c(m,n)*cuopai(n)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法2-通项公式:</p>\n<script type=\"math/tex; mode=display\">D_n=n!*(1/2!-1/3!+1/4!- 1/5!+ ··· ··· +(-1)^{n-1}/(n-1)!+(-1)^n/n!)</script><p>这里可以根据题目做一下变形: </p>\n<script type=\"math/tex; mode=display\">F(n,m)=C(n,m)*D(m)=n!*(1/2!-1/3!+1/4!- 1/5!+ ··· ··· +(-1)^{m-1}/(m-1)!+(-1)^m/m!)/(n-m)!</script><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> m,n;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> jiecheng[<span class=\"number\">22</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">24</span>,<span class=\"number\">120</span>,<span class=\"number\">720</span>,<span class=\"number\">5040</span>,<span class=\"number\">40320</span>,</span><br><span class=\"line\">                        <span class=\"number\">362880</span>,<span class=\"number\">3628800</span>,<span class=\"number\">39916800</span>,<span class=\"number\">479001600</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"number\">6227020800</span>,<span class=\"number\">87178291200</span>,<span class=\"number\">1307674368000</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"number\">20922789888000</span>,<span class=\"number\">355687428096000</span>,<span class=\"number\">6402373705728000</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"number\">121645100408832000</span>,<span class=\"number\">2432902008176640000</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">cuopai_</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum=<span class=\"number\">0</span>,a=jiecheng[n],b=jiecheng[n-m];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=m;++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ta/=i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i%<span class=\"number\">2</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t  sum+=a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t  sum-=a;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cout&lt;&lt;\"sum[\"&lt;&lt;i&lt;&lt;\"]\"&lt;&lt;sum&lt;&lt;endl; </span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum/b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=x;++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;cuopai_()&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"阶梯博弈","date":"2019-04-08T13:15:09.000Z","_content":"\n# 阶梯博弈\n\n## 阐述\n\n阶梯博弈也是博弈论中重要的一个分支，所谓阶梯博弈，其实指代的是一类只能从后向前逐层传递石子的游戏的模型，同样的，这类问题也可以转化成NIM取石子问题求解\n\n## 题型\n\n前五堆石子分别有2,1,3,1,4个石子，每个人只能把后面的任意多个石子向前移，不能移动者为负，现在问先手必胜还是必败？\n\n<!--more-->\n\n## 分析\n   \n这个很简单，分别把五堆石子编号0~4，很显然当把所有石子移到0堆的一方获胜，即对应先手必胜态。不考虑编号后的奇数堆（可以假设奇数堆上没有石子可以移动），对于所有偶数堆，率先移动的一方肯定会失败，这是显然的，因为目标堆是第0堆，而移动2k堆只能到2k-1堆，即奇数堆，另一方再次移动又会回到偶数堆的情况，如此往复，最终一定是面对均为偶数堆的一方失败，这样看来，**偶数堆对胜负的影响可以转化为哪一方先将所有奇数堆移动完即可取得胜利**。有了这样的转化，问题就迎刃而解了，因为每次可以移动任意多个，所以从奇数堆移到偶数堆就可以等效成取走奇数堆中的石子，这个问题很熟悉，不就是NIM取石子问题么！***只要对奇数堆的石子做NIM取石子问题便可求解原问题***。如果对手不对奇数堆移动，而选择移动偶数（2k）堆到第2k-1堆，方法同样很简单，你只需要以其人之道还治其人之身，把他移动的相等数量的石子再从2k-1堆移动到2k-2堆，这样等效于又回到了原来的局面。\n\n## [P3480 [POI2009]KAM-Pebbles][1]\n\n### 题目描述：\n  有N堆石子，除了第一堆外，每堆石子个数都不少于前一堆的石子个数。两人轮流操作每次操作可以从一堆石子中移走任意多石子，但是要保证操作后仍然满足初始时的条件谁没有石子可移时输掉游戏。问先手是否必胜。\n\n### 解决方案：\n\t对于任意一个堆进行符合要求的取石子操作后，易知：**它与后一个堆的石子差增加，而与前一个堆的石子差减小（一定注意前后的增减情况，这会影响阶梯博弈的方向！）**，而增减的幅度相同，这就等效于把前面的石子向相邻右侧移动了一位，即可以转化为将原数组的差分数组进行一次阶梯博弈，原问题即可求解！\n\t\n### 代码：\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=1010;\nint cnt;\nint a[maxn],M[maxn];\n\nint main()\n{\n\tscanf(\"%d\",&cnt);\n\twhile(cnt--)\n\t{\n\t\tint n,xorsum;\n\t\tscanf(\"%d\",&n);\n\t\ta[0]=0;\n\t\txorsum=0;\n\t\tfor(int i=1;i<=n;++i)\n\t\t  scanf(\"%d\",&a[i]);\n\t\tfor(int i=1;i<=n;++i)\n\t\t  M[i]=a[n-i+1]-a[n-i];\n\t\tfor(int i=1;i<=n;i+=2)\n\t\t  xorsum^=M[i];\n\t\tif(xorsum) printf(\"TAK\\n\");\n\t\telse printf(\"NIE\\n\");\n\t}\n\treturn 0;\n}\n```\n\n[1]:https://www.luogu.org/problem/show?pid=3480","source":"_posts/阶梯博弈.md","raw":"---\ntitle: 阶梯博弈\ndate: 2019-04-08 21:15:09\ntags: [Math, NOI]\n---\n\n# 阶梯博弈\n\n## 阐述\n\n阶梯博弈也是博弈论中重要的一个分支，所谓阶梯博弈，其实指代的是一类只能从后向前逐层传递石子的游戏的模型，同样的，这类问题也可以转化成NIM取石子问题求解\n\n## 题型\n\n前五堆石子分别有2,1,3,1,4个石子，每个人只能把后面的任意多个石子向前移，不能移动者为负，现在问先手必胜还是必败？\n\n<!--more-->\n\n## 分析\n   \n这个很简单，分别把五堆石子编号0~4，很显然当把所有石子移到0堆的一方获胜，即对应先手必胜态。不考虑编号后的奇数堆（可以假设奇数堆上没有石子可以移动），对于所有偶数堆，率先移动的一方肯定会失败，这是显然的，因为目标堆是第0堆，而移动2k堆只能到2k-1堆，即奇数堆，另一方再次移动又会回到偶数堆的情况，如此往复，最终一定是面对均为偶数堆的一方失败，这样看来，**偶数堆对胜负的影响可以转化为哪一方先将所有奇数堆移动完即可取得胜利**。有了这样的转化，问题就迎刃而解了，因为每次可以移动任意多个，所以从奇数堆移到偶数堆就可以等效成取走奇数堆中的石子，这个问题很熟悉，不就是NIM取石子问题么！***只要对奇数堆的石子做NIM取石子问题便可求解原问题***。如果对手不对奇数堆移动，而选择移动偶数（2k）堆到第2k-1堆，方法同样很简单，你只需要以其人之道还治其人之身，把他移动的相等数量的石子再从2k-1堆移动到2k-2堆，这样等效于又回到了原来的局面。\n\n## [P3480 [POI2009]KAM-Pebbles][1]\n\n### 题目描述：\n  有N堆石子，除了第一堆外，每堆石子个数都不少于前一堆的石子个数。两人轮流操作每次操作可以从一堆石子中移走任意多石子，但是要保证操作后仍然满足初始时的条件谁没有石子可移时输掉游戏。问先手是否必胜。\n\n### 解决方案：\n\t对于任意一个堆进行符合要求的取石子操作后，易知：**它与后一个堆的石子差增加，而与前一个堆的石子差减小（一定注意前后的增减情况，这会影响阶梯博弈的方向！）**，而增减的幅度相同，这就等效于把前面的石子向相邻右侧移动了一位，即可以转化为将原数组的差分数组进行一次阶梯博弈，原问题即可求解！\n\t\n### 代码：\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int maxn=1010;\nint cnt;\nint a[maxn],M[maxn];\n\nint main()\n{\n\tscanf(\"%d\",&cnt);\n\twhile(cnt--)\n\t{\n\t\tint n,xorsum;\n\t\tscanf(\"%d\",&n);\n\t\ta[0]=0;\n\t\txorsum=0;\n\t\tfor(int i=1;i<=n;++i)\n\t\t  scanf(\"%d\",&a[i]);\n\t\tfor(int i=1;i<=n;++i)\n\t\t  M[i]=a[n-i+1]-a[n-i];\n\t\tfor(int i=1;i<=n;i+=2)\n\t\t  xorsum^=M[i];\n\t\tif(xorsum) printf(\"TAK\\n\");\n\t\telse printf(\"NIE\\n\");\n\t}\n\treturn 0;\n}\n```\n\n[1]:https://www.luogu.org/problem/show?pid=3480","slug":"阶梯博弈","published":1,"updated":"2020-03-17T14:01:50.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7w04u3o000epv6p9t3yeml8","content":"<h1 id=\"阶梯博弈\"><a href=\"#阶梯博弈\" class=\"headerlink\" title=\"阶梯博弈\"></a>阶梯博弈</h1><h2 id=\"阐述\"><a href=\"#阐述\" class=\"headerlink\" title=\"阐述\"></a>阐述</h2><p>阶梯博弈也是博弈论中重要的一个分支，所谓阶梯博弈，其实指代的是一类只能从后向前逐层传递石子的游戏的模型，同样的，这类问题也可以转化成NIM取石子问题求解</p>\n<h2 id=\"题型\"><a href=\"#题型\" class=\"headerlink\" title=\"题型\"></a>题型</h2><p>前五堆石子分别有2,1,3,1,4个石子，每个人只能把后面的任意多个石子向前移，不能移动者为负，现在问先手必胜还是必败？</p>\n<a id=\"more\"></a>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这个很简单，分别把五堆石子编号0~4，很显然当把所有石子移到0堆的一方获胜，即对应先手必胜态。不考虑编号后的奇数堆（可以假设奇数堆上没有石子可以移动），对于所有偶数堆，率先移动的一方肯定会失败，这是显然的，因为目标堆是第0堆，而移动2k堆只能到2k-1堆，即奇数堆，另一方再次移动又会回到偶数堆的情况，如此往复，最终一定是面对均为偶数堆的一方失败，这样看来，<strong>偶数堆对胜负的影响可以转化为哪一方先将所有奇数堆移动完即可取得胜利</strong>。有了这样的转化，问题就迎刃而解了，因为每次可以移动任意多个，所以从奇数堆移到偶数堆就可以等效成取走奇数堆中的石子，这个问题很熟悉，不就是NIM取石子问题么！<strong><em>只要对奇数堆的石子做NIM取石子问题便可求解原问题</em></strong>。如果对手不对奇数堆移动，而选择移动偶数（2k）堆到第2k-1堆，方法同样很简单，你只需要以其人之道还治其人之身，把他移动的相等数量的石子再从2k-1堆移动到2k-2堆，这样等效于又回到了原来的局面。</p>\n<h2 id=\"P3480-POI2009-KAM-Pebbles\"><a href=\"#P3480-POI2009-KAM-Pebbles\" class=\"headerlink\" title=\"P3480 [POI2009]KAM-Pebbles\"></a><a href=\"https://www.luogu.org/problem/show?pid=3480\" target=\"_blank\" rel=\"noopener\">P3480 [POI2009]KAM-Pebbles</a></h2><h3 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><p>  有N堆石子，除了第一堆外，每堆石子个数都不少于前一堆的石子个数。两人轮流操作每次操作可以从一堆石子中移走任意多石子，但是要保证操作后仍然满足初始时的条件谁没有石子可移时输掉游戏。问先手是否必胜。</p>\n<h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h3><pre><code>对于任意一个堆进行符合要求的取石子操作后，易知：**它与后一个堆的石子差增加，而与前一个堆的石子差减小（一定注意前后的增减情况，这会影响阶梯博弈的方向！）**，而增减的幅度相同，这就等效于把前面的石子向相邻右侧移动了一位，即可以转化为将原数组的差分数组进行一次阶梯博弈，原问题即可求解！\n</code></pre><h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn],M[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;cnt);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cnt--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n,xorsum;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">\t\ta[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\txorsum=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">\t\t  <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">\t\t  M[i]=a[n-i+<span class=\"number\">1</span>]-a[n-i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i+=<span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t  xorsum^=M[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(xorsum) <span class=\"built_in\">printf</span>(<span class=\"string\">\"TAK\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"NIE\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"阶梯博弈\"><a href=\"#阶梯博弈\" class=\"headerlink\" title=\"阶梯博弈\"></a>阶梯博弈</h1><h2 id=\"阐述\"><a href=\"#阐述\" class=\"headerlink\" title=\"阐述\"></a>阐述</h2><p>阶梯博弈也是博弈论中重要的一个分支，所谓阶梯博弈，其实指代的是一类只能从后向前逐层传递石子的游戏的模型，同样的，这类问题也可以转化成NIM取石子问题求解</p>\n<h2 id=\"题型\"><a href=\"#题型\" class=\"headerlink\" title=\"题型\"></a>题型</h2><p>前五堆石子分别有2,1,3,1,4个石子，每个人只能把后面的任意多个石子向前移，不能移动者为负，现在问先手必胜还是必败？</p>","more":"<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>这个很简单，分别把五堆石子编号0~4，很显然当把所有石子移到0堆的一方获胜，即对应先手必胜态。不考虑编号后的奇数堆（可以假设奇数堆上没有石子可以移动），对于所有偶数堆，率先移动的一方肯定会失败，这是显然的，因为目标堆是第0堆，而移动2k堆只能到2k-1堆，即奇数堆，另一方再次移动又会回到偶数堆的情况，如此往复，最终一定是面对均为偶数堆的一方失败，这样看来，<strong>偶数堆对胜负的影响可以转化为哪一方先将所有奇数堆移动完即可取得胜利</strong>。有了这样的转化，问题就迎刃而解了，因为每次可以移动任意多个，所以从奇数堆移到偶数堆就可以等效成取走奇数堆中的石子，这个问题很熟悉，不就是NIM取石子问题么！<strong><em>只要对奇数堆的石子做NIM取石子问题便可求解原问题</em></strong>。如果对手不对奇数堆移动，而选择移动偶数（2k）堆到第2k-1堆，方法同样很简单，你只需要以其人之道还治其人之身，把他移动的相等数量的石子再从2k-1堆移动到2k-2堆，这样等效于又回到了原来的局面。</p>\n<h2 id=\"P3480-POI2009-KAM-Pebbles\"><a href=\"#P3480-POI2009-KAM-Pebbles\" class=\"headerlink\" title=\"P3480 [POI2009]KAM-Pebbles\"></a><a href=\"https://www.luogu.org/problem/show?pid=3480\" target=\"_blank\" rel=\"noopener\">P3480 [POI2009]KAM-Pebbles</a></h2><h3 id=\"题目描述：\"><a href=\"#题目描述：\" class=\"headerlink\" title=\"题目描述：\"></a>题目描述：</h3><p>  有N堆石子，除了第一堆外，每堆石子个数都不少于前一堆的石子个数。两人轮流操作每次操作可以从一堆石子中移走任意多石子，但是要保证操作后仍然满足初始时的条件谁没有石子可移时输掉游戏。问先手是否必胜。</p>\n<h3 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h3><pre><code>对于任意一个堆进行符合要求的取石子操作后，易知：**它与后一个堆的石子差增加，而与前一个堆的石子差减小（一定注意前后的增减情况，这会影响阶梯博弈的方向！）**，而增减的幅度相同，这就等效于把前面的石子向相邻右侧移动了一位，即可以转化为将原数组的差分数组进行一次阶梯博弈，原问题即可求解！\n</code></pre><h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn],M[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;cnt);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cnt--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n,xorsum;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">\t\ta[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\txorsum=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">\t\t  <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">\t\t  M[i]=a[n-i+<span class=\"number\">1</span>]-a[n-i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i+=<span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t  xorsum^=M[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(xorsum) <span class=\"built_in\">printf</span>(<span class=\"string\">\"TAK\\n\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"NIE\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"快速傅立叶变换(FFT)","date":"2019-04-08T13:27:50.000Z","_content":"\n# 例题[UOJ#34. 多项式乘法][1]\n\n## 题面\n\n> **题目描述**\n> 给你两个多项式，请输出乘起来后的多项式。\n> **输入格式**\n> 第一行两个整数 n 和 m，分别表示两个多项式的次数。\n> 第二行 n+1 个整数，分别表示第一个多项式的 0 到 n 次项前的系数。\n> 第三行 m+1 个整数，分别表示第一个多项式的 0 到 m 次项前的系数。\n> **输出格式**\n>一行 n+m+1 个整数，分别表示乘起来后的多项式的 0 到 n+m 次项前的系数。\n<!--more-->\n> **样例**\n> input:\n>1 2\n>1 2\n>1 2 1\n>output:\n>1 4 5 2\n>explanation:\n>$(1+2x)⋅(1+2x+x^2)=1+4x+5x^2+2x^3$\n>**限制与约定**\n>0≤n , m≤$10^5$\n\n## 简要解析\n  首先这道涉及多项式乘法,求相乘后新多项式的系数,可简记为:\n  $$C(x)=A(x)*B(x)=\\sum_{j=0}^{2*n-2} (\\sum_{k=0}^ja_k*b_{k-j})x^j$$\n  正常算法的时间复杂度很容易得到,即O($n^2$),显然无法再规定时间内得到正确解,怎么办呢?这里我们介绍一种可在O($nlgn$)复杂度下快速求出该答案的方法,即FFT.希望读者在阅读此文后可自行编写!\n  \n# 多项式\n\n## 多项式的表示\n\n*  **系数表达**\n    系数表达是我们平时最常见的表示多项式的方法,对任意一个多项式$A(x)=\\sum_{i=0}^{n-1}a_ix^i$,其系数表示为$$A(x)=(a_0,a_1,\\dots,a_{n-1})$$\n    系数表达的优势是它很容易求出该多项式在点$x_0$处的值$A(x_0)$,即利用[霍纳法则][2](也称秦九韶算法):$$ A(x_0)=a_0+x_0(a_1+x_0(a_2+\\dots+x_0(a_{n-2}+x_0a_{n-1})\\dots)) $$\n\n* **点值表达**\n    所谓点值表达就是将一个次数界为n的多项式用 ***n个点值对*** 的集合来表示,即:\n    $$ A(x)=\\{ (x_0,y_0),(x_1,y_1),(x_2,y_2)\\dots(x_{n-1},y_{n-1}) \\} $$\n    需要注意的是,一定需要n个点值对来表示,因为只有点值对数等于多项式的次数界时,其插值(由点值表达确定该多项式的系数表达,后边会讲到)才明确,这个结论可以由**插值多项式的唯一性**证明:\n$$\\begin{vmatrix}\\\\\n1 & x_0 & x_0^2 & \\cdots & x_0^{n-1}\\\\\n1 & x_1 & x_1^2 & \\cdots & x_1^{n-1}\\\\\n\\vdots &  \\vdots & \\vdots & &\\vdots\\\\\n1 & x_{n-1} & x_{n-1}^2 & \\cdots & x_{n-1}^{n-1}\\\\\n\\end{vmatrix}\n\\begin{vmatrix}\\\\\na_0\\\\\na_1\\\\\na_2\\\\\n\\vdots\\\\\na_{n-1}\\\\\n\\end{vmatrix}=\n\\begin{vmatrix}\\\\\ny_0\\\\\ny_1\\\\\ny_2\\\\\n\\vdots\\\\\ny_{n-1}\\\\\n\\end{vmatrix}$$\n先将多项式转化为矩阵乘法的形式,其中第一项为范德蒙德行列式,记为$V(x_0,x_1,x_2,\\dots,x_{n-1})$,其值为 $\\prod_{0\\le j<k\\le n-1}(x_k-x_j)$ ,显然当任意两个x值不同时该值不为0,故该矩阵可逆,进而可以求得$a=V(x_0,x_1,x_2,\\dots,x_{n-1})^{-1}y$ , 故其唯一性得证!\n\n    点值表示有什么优势呢?我们可以在O(n)的时间内求出两多项式的乘积!如果我们有一种很快的算法可以将系数表达式转化为点值表达式,那么我们就可以快速计算出两多项式的乘积.为了快速实现两种表达方式的快速转化,我们引入一个概念,*** 单 位 复 数 根 ***!\n\n# 单位复数根\n## 定义\n满足$w^n=1$的复数$w$,其单位复数根恰好有n个,分别为$e^{2\\pi ik/n},k=\\{0,1,2,\\dots,n-1\\}$,由复数的指数形式定义$e^{iu}=cos(u)+isin(u)$可将其转化为 $y_k=cos(2 \\pi k/n)+isin(2\\pi k/n)$\n## 基本性质\n- **消去引理**\n    $$ W_{dn}^{dk}=(e^{2\\pi i/{dn}})^{kn}=(e^{2\\pi i/{d}})^{k}=W_n^k(n\\ge 0 , k\\ge 0 , d>0) $$\n- **折半引理**\n    若n>0且为偶数,那么n个n次单位复数根的平方的集合就是$n/2$个$n/2$次单位复数根的集合(每个元素出现两次)$$ (W_n^{k+n/2})^2=W_n^{2k+n}=W_n^{2k}\\cdot W_n^n=(W_n^k)^2=W_{n/2}^k$$\n- **求和引理**\n    $$ \\sum_{j=0}^{n-1}(W_n^k)^j=\\frac{(W_n^k)^n-1}{W_n^k-1}=\\frac{(W_n^n)^k-1}{W_n^k-1}=0 $$\n\n# DFT离散傅里叶变换\n这个算法的核心是利用了卷积定理$$ a\\times b=DFT^{-1}_{2n}(DFT_{2n}(a)\\cdot DFT_{2n}(b))  $$\n\n本文最开始的例题UOJ#34,目标多项式的系数$c_k=\\sum_{k=0}^ja_k*b_{k-j}$,熟悉的人可能都知道这实际上就是a,b的[卷积][4],能用傅里叶变换求解的题目一般都可以被转化成类似这样的卷积的形式,大家一定要对这个式子足够熟悉!!!\n\n$$ y_k=A(W_n^k)=\\sum_{j=0}^{n-1}a_j\\cdot W_n^{kj}=\\sum_{j=0}^{n-1}a_j\\cdot e^{\\frac{2\\pi i}{n}jk} $$\n该算法的复杂度是O($n^2$)的,有没有适当变换使其结合一些复数根的性质加速此过程?答案是肯定的!\n\n# FFT快速傅里叶变换\n## 递归\n利用分治的思想将$A(x)=a_0+a_1x+a_2x^2+\\dots+a_{n-1}x^{n-1}$分为下标为奇数和偶数的两部分:\n$$ A^{[0]}(x)=a_0+a_2x+a_4x^2+\\dots+a_{n-2}x^{\\frac{n}{2}-1} $$ \n$$ A^{[1]}(x)=a_1+a_3x+a_5x^2+\\dots+a_{n-1}x^{\\frac{n}{2}-1} $$\n$$ A(x)=A^{[0]}(x^2)+x*A^{[1]}(x^2) $$ \n这样的话问题就可以转化求在$(W_n^0)^2,(W_n^1)^2,\\dots,(W_n^{n-1})^2$上A(x)值,又根据折半引理,只需计算次数界为n/2的值即可,这样一直递归下去,即可在O($nlgn$)复杂度内计算出结果,附上伪代码:\n```\nFFT(a):  \n    n=a.length()  \n    if n==1:  \n        return a  \n    w_n=e^(pi*i/n)=complex(cos(2*pi/n),sin(2*pi/n))  \n    w=1  \n    a(0)=[a0,a2,...a_n-2]  \n    a(1)=[a1,a3,...a_n-1]  \n    y(0)=FFT(a(0))  \n    y(1)=FFT(a(1))  \n    for k in range(0,n/2):  \n        y_k=y_k(0)+w*y_k(1)                     //w*y_k(1)为公用子表达式 \n        y_k+n/2=y_k(0)-w*y_k(1)  \n        w=w*w_n                                 //w为旋转因子\n    return y  \n```\n但递归的常数是很大的,我们是否可以进一步优化常数呢?只要将递归过程改为迭代的过程就好了!\n## 迭代\n- **位逆序置换**\n    ![位逆序置换实例][3]\n    观察其下标序列为$$0,4,2,6,1,5,3,7$$\n    对应的二进制数为$$000,100,010,110,001,101,011,111$$\n    若将每个数的二进制位反转,即得到$$ 000,001,010,011,100,101,110,111 $$\n    显然为0~7这8个数的升序排列,这样我们就找到了运算顺序与下标间的对应关系,这个过程就叫做位逆序置换,这样我们只要在计算之前将下标通过位逆序置换的方式更新即可按序自底向上求解,代码很简单:\n```cpp\ninline int rev(int x,int n)                 //x为当前处理的待改变的数,n为二进制位的总长度(按上例则n=3)\n{\n\tint x0=0;\n\twhile(n--) x0=(x0+(x&1))<<1,x>>=1;\n\treturn x0>>1;\n}\n```\n\n- **蝴蝶操作**\n$$ y_k=A(W_n^k)=y^{[0]}_k+W_n^k\\cdot y_k^{[1]} $$\n$$ y_{k+\\frac{n}{2}}=A(W_n^{k+\\frac{n}{2}})=A^{[0]}(W_n^{2k+n})+W_n^{k+\\frac{n}{2}}\\cdot A^{[1]}(W_n^{2k+n})=A^{[0]}(W_n^{2k})+W_n^{k+\\frac{n}{2}}\\cdot A^{[1]}(W_n^{2k})=y^{[0]}_k-W_n^k\\cdot y_k^{[1]} $$\n\n因此只要知道出$y^{[0]}_k$与$W_n^k\\cdot y_k^{[1]}$的值就可直接算出$y_k$与$y_{k+\\frac{n}{2}}$的值,只要将上一步中分成的树状结构从下向上计算一遍就能求出答案了,这一操作也被称为***蝴 蝶 操 作***,伪代码如下:\n\n```\nfor k in range(0,n/2):  \n    t=w*y_k(1)  \n    y_k=y_k(0)+t  \n    y_k+n/2=y_k(0)-t  \n    w=w*w_n \n```\n\n## 傅里叶逆变换公式\n以上我们了解到如何将系数表示转换为点值表示,通过点值表示在O(n)复杂度下求出多项式的乘积之后只要再将点值表示转换为系数表示(求插值)即可.前面讲多项式的点值表达时我们提到了一种求插值的过程,$a=V(x_0,x_1,x_2,\\dots,x_{n-1})^{-1}\\cdot y$ , 即只要得到范德蒙德行列式的逆矩阵就能求出对应的a.\n\n由于一个矩阵的逆矩阵$A^{-1}=\\frac{1}{|A|}A^*$,易推得傅里叶逆变换公式:\n$$ a_k=\\frac{1}{n}\\sum_{j=0}^{n-1}y^j\\cdot e^{-\\frac{2\\pi i}{n}jk} $$\n除了这种求逆矩阵的方法,我们还可以用拉格朗日公式求插值,但复杂度为O($n^2$),公式如下:\n$$ A(x)=\\sum_{k=0}^{n-1}y_k\\frac{ \\prod_{j\\neq k}(x-x_j) }{ \\prod_{j\\neq k}(x_j-x_k) } $$\n\n# 代码\n\n## UOJ#34代码\n```cpp\n#include<bits/stdc++.h>\n#define pi acos(-1.0)\n#define maxn 300010\n//#define DEBUG                                     //DEBUG无视就好\nusing namespace std;\nint n,m;\ncomplex<double> a[maxn],b[maxn];\n\ninline int read()                                   //读入优化\n{\n\tchar ch;\n\tint read=0;\n\tint sign=1;\n\tdo\n\t\tch=getchar();\n\twhile((ch<'0'||ch>'9')&&ch!='-');\n\tif(ch=='-') sign=-1,ch=getchar();\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tread=read*10+ch-'0';\n\t\tch=getchar(); \n\t} \n\treturn read*sign;\n}\n\nint Power2(int x)                                                //把x转化为2的整数次幂\n{\n\tint x0;\n\tfor(x0=1;x0<=x;x0<<=1) ;\n\treturn x0;\n}\n\ninline int lg(int n)                                             //计算二进制位数\n{\n\tint l=0;\n\tif(n==0) return l;\n\tfor(int x=1;x<=n;x<<=1) l++;\n\treturn l;\n}\n\ninline int rev(int x,int n)                                       //位逆序置换\n{\n\tint x0=0;\n\twhile(n--) x0=(x0+(x&1))<<1,x>>=1;\n\treturn x0>>1;\n}\n\nvoid FFT(complex<double> a[],int n,int flag)    //主体\n{\n\tcomplex<double> A[n+1];\n\tfor(int i=0,l=lg(n-1);i<n;++i) A[rev(i,l)]=a[i];\n\t#ifdef DEBUG\n\tint l=lg(n-1);                                               //切记是lg(n-1)\n\tcerr<<\"l=\"<<l<<endl;\n\tfor(int i=0;i<n;++i) cerr<<rev(i,l)<<\" \";\n\tcerr<<endl;\n\t#endif \n\tfor(int i=2;i<=n;i<<=1)                                     //枚举合并后序列长度\n\t{\n\t\tcomplex<double> dw(cos(2*pi/i),sin(flag*2*pi/i));\n\t\tfor(int j=0;j<n;j+=i)                                   //该长度下每部分进行求解\n\t\t{\n\t\t\tcomplex<double> w(1.0,0);\n\t\t\tfor(int k=0;k<(i>>1);k++,w=w*dw)                    //蝴蝶变换,只需求i>>1次即可\n\t\t\t{\n\t\t\t\tcomplex<double> u=A[j+k];\n\t\t\t\tcomplex<double> t=w*A[j+k+(i>>1)];\n\t\t\t\tA[j+k]=u+t;\n\t\t\t\tA[j+k+(i>>1)]=u-t;\n\t\t\t}\n\t\t}\n\t\tif(flag==-1)\n\t\t\tfor(int i=0;i<n;++i) a[i]=int(A[i].real()/n+0.5);\n\t\telse\n\t\t \tfor(int i=0;i<n;++i) a[i]=A[i];\n\t}\n}\n\nint main()\n{\n\t#ifdef DEBUG\n\tfreopen(\"in.txt\",\"r\",stdin);\n\t#endif\n\tn=read();\n\tm=read();\n\tfor(int i=0;i<=n;++i) a[i]=read();\n\tfor(int i=0;i<=m;++i) b[i]=read();\n\tint length=Power2(n+m);\n\t#ifdef DEBUG\n\tcerr<<\"length=\"<<length<<endl;\n\t#endif\n\tFFT(a,length,1);\n\tFFT(b,length,1);\n\tfor(int i=0;i<=length;++i) a[i]*=b[i];\n\tFFT(a,length,-1);\n\tfor(int i=0;i<=n+m;++i) printf(\"%d \",int(a[i].real()));\n\treturn 0;\n}\n```\n\n## FFT高精度代码\n\n```cpp\n/*FFT高精度*/\n\ninclude<bits/stdc++.h>\n#define PI acos(-1.0)\n#define eps 1e-1\n#define maxn 200005\n#define DEBUG\nusing namespace std;\nint n,m,l=0;\nint rev[maxn],ans[maxn];\nchar x[maxn],y[maxn];\n\nstruct Complex\n{\n  double real,imag;\n  Complex(double real=0,double imag=0):real(real),imag(imag) {}\n  Complex operator + (const Complex rhs)\n  {\n    return Complex(real+rhs.real,imag+rhs.imag);\n  }\n  Complex operator - (const Complex rhs)\n  {\n    return Complex(real-rhs.real,imag-rhs.imag);\n  }\n  Complex operator * (const Complex rhs)\n  {\n     return Complex((real*rhs.real-imag*rhs.imag),(real*rhs.imag+imag*rhs.real));\n  }\n};\nComplex a[maxn],b[maxn];\n\ninline int read()\n{\n  char ch;\n  int read=0,sign=1;\n  do\n    ch=getchar();\n  while((ch<'0'||ch>'9')&&ch!='-');\n  if(ch=='-') sign=-1,ch=getchar();\n  while(ch>='0'&&ch<='9')\n  {\n    read=read*10+ch-'0';\n    ch=getchar();\n  }\n  return sign*read;\n}\n\nvoid pre_work()\n{\n  int length1,length2;\n  scanf(\"%s\",x);length1=strlen(x);\n  scanf(\"%s\",y);length2=strlen(y);\n  n=max(length1,length2);\n  for(int i=0;i<length1;++i) a[i].real=x[length1-i-1]-'0';\n  for(int i=0;i<length2;++i) b[i].real=y[length2-i-1]-'0';\n#ifdef DEBUG\n  for(int i=0;i<n;++i) cerr<<a[i].real<<\" \";\n  cerr<<endl;\n  for(int i=0;i<n;++i) cout<<b[i].real<<\" \";\n  cerr<<endl;\n#endif\n  m=2*n;\n  for(n=1;n<m;n<<=1) l++;\n  for(int i=0;i<n;++i) rev[i]=rev[i>>1]>>1|(i&1)<<(l-1);\n#ifdef DEBUG\n  for(int i=0;i<n;++i) cerr<<i<<\"-->\"<<rev[i]<<endl;\n#endif\n}\n\nvoid FFT(Complex a[],int n,int sign)\n{\n  for(int i=0;i<n;++i)\n    if(rev[i]<i) swap(a[i],a[rev[i]]);\n  for(int i=2;i<=n;i<<=1)\n  {\n    Complex dw(cos(2*PI/i),sin(2*PI*sign/i));\n    for(int j=0;j<n;j+=i)\n    {\n      Complex w(1,0);\n      for(int k=0;k<(i>>1);k++,w=dw*w)\n      {\n        Complex u=a[j+k];\n        Complex t=a[j+k+(i>>1)]*w;\n        a[j+k]=u+t;\n        a[j+k+(i>>1)]=u-t;\n      }\n    }\n  }\n  if(sign==-1)\n    for(int i=0;i<n;++i) ans[i]=int(a[i].real/n+eps);\n}\n\nvoid push_ans()\n{\n  for(int i=0;i<n;++i)\n    if(ans[i]>=10) ans[i+1]+=ans[i]/10,ans[i]%=10;\n  int first=n-1;\n  while(ans[first]==0) first--;\n  for(int i=first;i>-1;i--) printf(\"%d\",ans[i]);\n}\n\nint main()\n{\n  pre_work();\n  FFT(a,n,1);\n  FFT(b,n,1);\n  for(int i=0;i<n;++i) a[i]=a[i]*b[i];\n  FFT(a,n,-1);\n#ifdef DEBUG\n  for(int i=0;i<n;++i) cerr<<ans[i]<<\" \";\n  cerr<<endl;\n#endif\n  push_ans();\n  return 0;\n}\n```\n\n\n## 参考资料\n> http://blog.csdn.net/oiljt12138/article/details/54810204\n> http://blog.csdn.net/iamzky/article/details/22712347\n> 算法导论第三十章\n\n  [1]:http://uoj.ac/problem/34\n  [2]:http://baike.baidu.com/item/%E9%9C%8D%E7%BA%B3%E6%B3%95%E5%88%99?sefr=cr\n  [3]: /images/post_images/快速傅立叶变换(FFT)-01.png\n  [4]:https://www.zhihu.com/question/22298352","source":"_posts/快速傅立叶变换-FFT.md","raw":"---\ntitle: 快速傅立叶变换(FFT)\ndate: 2019-04-08 21:27:50\ntags: [Math, NOI]\n---\n\n# 例题[UOJ#34. 多项式乘法][1]\n\n## 题面\n\n> **题目描述**\n> 给你两个多项式，请输出乘起来后的多项式。\n> **输入格式**\n> 第一行两个整数 n 和 m，分别表示两个多项式的次数。\n> 第二行 n+1 个整数，分别表示第一个多项式的 0 到 n 次项前的系数。\n> 第三行 m+1 个整数，分别表示第一个多项式的 0 到 m 次项前的系数。\n> **输出格式**\n>一行 n+m+1 个整数，分别表示乘起来后的多项式的 0 到 n+m 次项前的系数。\n<!--more-->\n> **样例**\n> input:\n>1 2\n>1 2\n>1 2 1\n>output:\n>1 4 5 2\n>explanation:\n>$(1+2x)⋅(1+2x+x^2)=1+4x+5x^2+2x^3$\n>**限制与约定**\n>0≤n , m≤$10^5$\n\n## 简要解析\n  首先这道涉及多项式乘法,求相乘后新多项式的系数,可简记为:\n  $$C(x)=A(x)*B(x)=\\sum_{j=0}^{2*n-2} (\\sum_{k=0}^ja_k*b_{k-j})x^j$$\n  正常算法的时间复杂度很容易得到,即O($n^2$),显然无法再规定时间内得到正确解,怎么办呢?这里我们介绍一种可在O($nlgn$)复杂度下快速求出该答案的方法,即FFT.希望读者在阅读此文后可自行编写!\n  \n# 多项式\n\n## 多项式的表示\n\n*  **系数表达**\n    系数表达是我们平时最常见的表示多项式的方法,对任意一个多项式$A(x)=\\sum_{i=0}^{n-1}a_ix^i$,其系数表示为$$A(x)=(a_0,a_1,\\dots,a_{n-1})$$\n    系数表达的优势是它很容易求出该多项式在点$x_0$处的值$A(x_0)$,即利用[霍纳法则][2](也称秦九韶算法):$$ A(x_0)=a_0+x_0(a_1+x_0(a_2+\\dots+x_0(a_{n-2}+x_0a_{n-1})\\dots)) $$\n\n* **点值表达**\n    所谓点值表达就是将一个次数界为n的多项式用 ***n个点值对*** 的集合来表示,即:\n    $$ A(x)=\\{ (x_0,y_0),(x_1,y_1),(x_2,y_2)\\dots(x_{n-1},y_{n-1}) \\} $$\n    需要注意的是,一定需要n个点值对来表示,因为只有点值对数等于多项式的次数界时,其插值(由点值表达确定该多项式的系数表达,后边会讲到)才明确,这个结论可以由**插值多项式的唯一性**证明:\n$$\\begin{vmatrix}\\\\\n1 & x_0 & x_0^2 & \\cdots & x_0^{n-1}\\\\\n1 & x_1 & x_1^2 & \\cdots & x_1^{n-1}\\\\\n\\vdots &  \\vdots & \\vdots & &\\vdots\\\\\n1 & x_{n-1} & x_{n-1}^2 & \\cdots & x_{n-1}^{n-1}\\\\\n\\end{vmatrix}\n\\begin{vmatrix}\\\\\na_0\\\\\na_1\\\\\na_2\\\\\n\\vdots\\\\\na_{n-1}\\\\\n\\end{vmatrix}=\n\\begin{vmatrix}\\\\\ny_0\\\\\ny_1\\\\\ny_2\\\\\n\\vdots\\\\\ny_{n-1}\\\\\n\\end{vmatrix}$$\n先将多项式转化为矩阵乘法的形式,其中第一项为范德蒙德行列式,记为$V(x_0,x_1,x_2,\\dots,x_{n-1})$,其值为 $\\prod_{0\\le j<k\\le n-1}(x_k-x_j)$ ,显然当任意两个x值不同时该值不为0,故该矩阵可逆,进而可以求得$a=V(x_0,x_1,x_2,\\dots,x_{n-1})^{-1}y$ , 故其唯一性得证!\n\n    点值表示有什么优势呢?我们可以在O(n)的时间内求出两多项式的乘积!如果我们有一种很快的算法可以将系数表达式转化为点值表达式,那么我们就可以快速计算出两多项式的乘积.为了快速实现两种表达方式的快速转化,我们引入一个概念,*** 单 位 复 数 根 ***!\n\n# 单位复数根\n## 定义\n满足$w^n=1$的复数$w$,其单位复数根恰好有n个,分别为$e^{2\\pi ik/n},k=\\{0,1,2,\\dots,n-1\\}$,由复数的指数形式定义$e^{iu}=cos(u)+isin(u)$可将其转化为 $y_k=cos(2 \\pi k/n)+isin(2\\pi k/n)$\n## 基本性质\n- **消去引理**\n    $$ W_{dn}^{dk}=(e^{2\\pi i/{dn}})^{kn}=(e^{2\\pi i/{d}})^{k}=W_n^k(n\\ge 0 , k\\ge 0 , d>0) $$\n- **折半引理**\n    若n>0且为偶数,那么n个n次单位复数根的平方的集合就是$n/2$个$n/2$次单位复数根的集合(每个元素出现两次)$$ (W_n^{k+n/2})^2=W_n^{2k+n}=W_n^{2k}\\cdot W_n^n=(W_n^k)^2=W_{n/2}^k$$\n- **求和引理**\n    $$ \\sum_{j=0}^{n-1}(W_n^k)^j=\\frac{(W_n^k)^n-1}{W_n^k-1}=\\frac{(W_n^n)^k-1}{W_n^k-1}=0 $$\n\n# DFT离散傅里叶变换\n这个算法的核心是利用了卷积定理$$ a\\times b=DFT^{-1}_{2n}(DFT_{2n}(a)\\cdot DFT_{2n}(b))  $$\n\n本文最开始的例题UOJ#34,目标多项式的系数$c_k=\\sum_{k=0}^ja_k*b_{k-j}$,熟悉的人可能都知道这实际上就是a,b的[卷积][4],能用傅里叶变换求解的题目一般都可以被转化成类似这样的卷积的形式,大家一定要对这个式子足够熟悉!!!\n\n$$ y_k=A(W_n^k)=\\sum_{j=0}^{n-1}a_j\\cdot W_n^{kj}=\\sum_{j=0}^{n-1}a_j\\cdot e^{\\frac{2\\pi i}{n}jk} $$\n该算法的复杂度是O($n^2$)的,有没有适当变换使其结合一些复数根的性质加速此过程?答案是肯定的!\n\n# FFT快速傅里叶变换\n## 递归\n利用分治的思想将$A(x)=a_0+a_1x+a_2x^2+\\dots+a_{n-1}x^{n-1}$分为下标为奇数和偶数的两部分:\n$$ A^{[0]}(x)=a_0+a_2x+a_4x^2+\\dots+a_{n-2}x^{\\frac{n}{2}-1} $$ \n$$ A^{[1]}(x)=a_1+a_3x+a_5x^2+\\dots+a_{n-1}x^{\\frac{n}{2}-1} $$\n$$ A(x)=A^{[0]}(x^2)+x*A^{[1]}(x^2) $$ \n这样的话问题就可以转化求在$(W_n^0)^2,(W_n^1)^2,\\dots,(W_n^{n-1})^2$上A(x)值,又根据折半引理,只需计算次数界为n/2的值即可,这样一直递归下去,即可在O($nlgn$)复杂度内计算出结果,附上伪代码:\n```\nFFT(a):  \n    n=a.length()  \n    if n==1:  \n        return a  \n    w_n=e^(pi*i/n)=complex(cos(2*pi/n),sin(2*pi/n))  \n    w=1  \n    a(0)=[a0,a2,...a_n-2]  \n    a(1)=[a1,a3,...a_n-1]  \n    y(0)=FFT(a(0))  \n    y(1)=FFT(a(1))  \n    for k in range(0,n/2):  \n        y_k=y_k(0)+w*y_k(1)                     //w*y_k(1)为公用子表达式 \n        y_k+n/2=y_k(0)-w*y_k(1)  \n        w=w*w_n                                 //w为旋转因子\n    return y  \n```\n但递归的常数是很大的,我们是否可以进一步优化常数呢?只要将递归过程改为迭代的过程就好了!\n## 迭代\n- **位逆序置换**\n    ![位逆序置换实例][3]\n    观察其下标序列为$$0,4,2,6,1,5,3,7$$\n    对应的二进制数为$$000,100,010,110,001,101,011,111$$\n    若将每个数的二进制位反转,即得到$$ 000,001,010,011,100,101,110,111 $$\n    显然为0~7这8个数的升序排列,这样我们就找到了运算顺序与下标间的对应关系,这个过程就叫做位逆序置换,这样我们只要在计算之前将下标通过位逆序置换的方式更新即可按序自底向上求解,代码很简单:\n```cpp\ninline int rev(int x,int n)                 //x为当前处理的待改变的数,n为二进制位的总长度(按上例则n=3)\n{\n\tint x0=0;\n\twhile(n--) x0=(x0+(x&1))<<1,x>>=1;\n\treturn x0>>1;\n}\n```\n\n- **蝴蝶操作**\n$$ y_k=A(W_n^k)=y^{[0]}_k+W_n^k\\cdot y_k^{[1]} $$\n$$ y_{k+\\frac{n}{2}}=A(W_n^{k+\\frac{n}{2}})=A^{[0]}(W_n^{2k+n})+W_n^{k+\\frac{n}{2}}\\cdot A^{[1]}(W_n^{2k+n})=A^{[0]}(W_n^{2k})+W_n^{k+\\frac{n}{2}}\\cdot A^{[1]}(W_n^{2k})=y^{[0]}_k-W_n^k\\cdot y_k^{[1]} $$\n\n因此只要知道出$y^{[0]}_k$与$W_n^k\\cdot y_k^{[1]}$的值就可直接算出$y_k$与$y_{k+\\frac{n}{2}}$的值,只要将上一步中分成的树状结构从下向上计算一遍就能求出答案了,这一操作也被称为***蝴 蝶 操 作***,伪代码如下:\n\n```\nfor k in range(0,n/2):  \n    t=w*y_k(1)  \n    y_k=y_k(0)+t  \n    y_k+n/2=y_k(0)-t  \n    w=w*w_n \n```\n\n## 傅里叶逆变换公式\n以上我们了解到如何将系数表示转换为点值表示,通过点值表示在O(n)复杂度下求出多项式的乘积之后只要再将点值表示转换为系数表示(求插值)即可.前面讲多项式的点值表达时我们提到了一种求插值的过程,$a=V(x_0,x_1,x_2,\\dots,x_{n-1})^{-1}\\cdot y$ , 即只要得到范德蒙德行列式的逆矩阵就能求出对应的a.\n\n由于一个矩阵的逆矩阵$A^{-1}=\\frac{1}{|A|}A^*$,易推得傅里叶逆变换公式:\n$$ a_k=\\frac{1}{n}\\sum_{j=0}^{n-1}y^j\\cdot e^{-\\frac{2\\pi i}{n}jk} $$\n除了这种求逆矩阵的方法,我们还可以用拉格朗日公式求插值,但复杂度为O($n^2$),公式如下:\n$$ A(x)=\\sum_{k=0}^{n-1}y_k\\frac{ \\prod_{j\\neq k}(x-x_j) }{ \\prod_{j\\neq k}(x_j-x_k) } $$\n\n# 代码\n\n## UOJ#34代码\n```cpp\n#include<bits/stdc++.h>\n#define pi acos(-1.0)\n#define maxn 300010\n//#define DEBUG                                     //DEBUG无视就好\nusing namespace std;\nint n,m;\ncomplex<double> a[maxn],b[maxn];\n\ninline int read()                                   //读入优化\n{\n\tchar ch;\n\tint read=0;\n\tint sign=1;\n\tdo\n\t\tch=getchar();\n\twhile((ch<'0'||ch>'9')&&ch!='-');\n\tif(ch=='-') sign=-1,ch=getchar();\n\twhile(ch>='0'&&ch<='9')\n\t{\n\t\tread=read*10+ch-'0';\n\t\tch=getchar(); \n\t} \n\treturn read*sign;\n}\n\nint Power2(int x)                                                //把x转化为2的整数次幂\n{\n\tint x0;\n\tfor(x0=1;x0<=x;x0<<=1) ;\n\treturn x0;\n}\n\ninline int lg(int n)                                             //计算二进制位数\n{\n\tint l=0;\n\tif(n==0) return l;\n\tfor(int x=1;x<=n;x<<=1) l++;\n\treturn l;\n}\n\ninline int rev(int x,int n)                                       //位逆序置换\n{\n\tint x0=0;\n\twhile(n--) x0=(x0+(x&1))<<1,x>>=1;\n\treturn x0>>1;\n}\n\nvoid FFT(complex<double> a[],int n,int flag)    //主体\n{\n\tcomplex<double> A[n+1];\n\tfor(int i=0,l=lg(n-1);i<n;++i) A[rev(i,l)]=a[i];\n\t#ifdef DEBUG\n\tint l=lg(n-1);                                               //切记是lg(n-1)\n\tcerr<<\"l=\"<<l<<endl;\n\tfor(int i=0;i<n;++i) cerr<<rev(i,l)<<\" \";\n\tcerr<<endl;\n\t#endif \n\tfor(int i=2;i<=n;i<<=1)                                     //枚举合并后序列长度\n\t{\n\t\tcomplex<double> dw(cos(2*pi/i),sin(flag*2*pi/i));\n\t\tfor(int j=0;j<n;j+=i)                                   //该长度下每部分进行求解\n\t\t{\n\t\t\tcomplex<double> w(1.0,0);\n\t\t\tfor(int k=0;k<(i>>1);k++,w=w*dw)                    //蝴蝶变换,只需求i>>1次即可\n\t\t\t{\n\t\t\t\tcomplex<double> u=A[j+k];\n\t\t\t\tcomplex<double> t=w*A[j+k+(i>>1)];\n\t\t\t\tA[j+k]=u+t;\n\t\t\t\tA[j+k+(i>>1)]=u-t;\n\t\t\t}\n\t\t}\n\t\tif(flag==-1)\n\t\t\tfor(int i=0;i<n;++i) a[i]=int(A[i].real()/n+0.5);\n\t\telse\n\t\t \tfor(int i=0;i<n;++i) a[i]=A[i];\n\t}\n}\n\nint main()\n{\n\t#ifdef DEBUG\n\tfreopen(\"in.txt\",\"r\",stdin);\n\t#endif\n\tn=read();\n\tm=read();\n\tfor(int i=0;i<=n;++i) a[i]=read();\n\tfor(int i=0;i<=m;++i) b[i]=read();\n\tint length=Power2(n+m);\n\t#ifdef DEBUG\n\tcerr<<\"length=\"<<length<<endl;\n\t#endif\n\tFFT(a,length,1);\n\tFFT(b,length,1);\n\tfor(int i=0;i<=length;++i) a[i]*=b[i];\n\tFFT(a,length,-1);\n\tfor(int i=0;i<=n+m;++i) printf(\"%d \",int(a[i].real()));\n\treturn 0;\n}\n```\n\n## FFT高精度代码\n\n```cpp\n/*FFT高精度*/\n\ninclude<bits/stdc++.h>\n#define PI acos(-1.0)\n#define eps 1e-1\n#define maxn 200005\n#define DEBUG\nusing namespace std;\nint n,m,l=0;\nint rev[maxn],ans[maxn];\nchar x[maxn],y[maxn];\n\nstruct Complex\n{\n  double real,imag;\n  Complex(double real=0,double imag=0):real(real),imag(imag) {}\n  Complex operator + (const Complex rhs)\n  {\n    return Complex(real+rhs.real,imag+rhs.imag);\n  }\n  Complex operator - (const Complex rhs)\n  {\n    return Complex(real-rhs.real,imag-rhs.imag);\n  }\n  Complex operator * (const Complex rhs)\n  {\n     return Complex((real*rhs.real-imag*rhs.imag),(real*rhs.imag+imag*rhs.real));\n  }\n};\nComplex a[maxn],b[maxn];\n\ninline int read()\n{\n  char ch;\n  int read=0,sign=1;\n  do\n    ch=getchar();\n  while((ch<'0'||ch>'9')&&ch!='-');\n  if(ch=='-') sign=-1,ch=getchar();\n  while(ch>='0'&&ch<='9')\n  {\n    read=read*10+ch-'0';\n    ch=getchar();\n  }\n  return sign*read;\n}\n\nvoid pre_work()\n{\n  int length1,length2;\n  scanf(\"%s\",x);length1=strlen(x);\n  scanf(\"%s\",y);length2=strlen(y);\n  n=max(length1,length2);\n  for(int i=0;i<length1;++i) a[i].real=x[length1-i-1]-'0';\n  for(int i=0;i<length2;++i) b[i].real=y[length2-i-1]-'0';\n#ifdef DEBUG\n  for(int i=0;i<n;++i) cerr<<a[i].real<<\" \";\n  cerr<<endl;\n  for(int i=0;i<n;++i) cout<<b[i].real<<\" \";\n  cerr<<endl;\n#endif\n  m=2*n;\n  for(n=1;n<m;n<<=1) l++;\n  for(int i=0;i<n;++i) rev[i]=rev[i>>1]>>1|(i&1)<<(l-1);\n#ifdef DEBUG\n  for(int i=0;i<n;++i) cerr<<i<<\"-->\"<<rev[i]<<endl;\n#endif\n}\n\nvoid FFT(Complex a[],int n,int sign)\n{\n  for(int i=0;i<n;++i)\n    if(rev[i]<i) swap(a[i],a[rev[i]]);\n  for(int i=2;i<=n;i<<=1)\n  {\n    Complex dw(cos(2*PI/i),sin(2*PI*sign/i));\n    for(int j=0;j<n;j+=i)\n    {\n      Complex w(1,0);\n      for(int k=0;k<(i>>1);k++,w=dw*w)\n      {\n        Complex u=a[j+k];\n        Complex t=a[j+k+(i>>1)]*w;\n        a[j+k]=u+t;\n        a[j+k+(i>>1)]=u-t;\n      }\n    }\n  }\n  if(sign==-1)\n    for(int i=0;i<n;++i) ans[i]=int(a[i].real/n+eps);\n}\n\nvoid push_ans()\n{\n  for(int i=0;i<n;++i)\n    if(ans[i]>=10) ans[i+1]+=ans[i]/10,ans[i]%=10;\n  int first=n-1;\n  while(ans[first]==0) first--;\n  for(int i=first;i>-1;i--) printf(\"%d\",ans[i]);\n}\n\nint main()\n{\n  pre_work();\n  FFT(a,n,1);\n  FFT(b,n,1);\n  for(int i=0;i<n;++i) a[i]=a[i]*b[i];\n  FFT(a,n,-1);\n#ifdef DEBUG\n  for(int i=0;i<n;++i) cerr<<ans[i]<<\" \";\n  cerr<<endl;\n#endif\n  push_ans();\n  return 0;\n}\n```\n\n\n## 参考资料\n> http://blog.csdn.net/oiljt12138/article/details/54810204\n> http://blog.csdn.net/iamzky/article/details/22712347\n> 算法导论第三十章\n\n  [1]:http://uoj.ac/problem/34\n  [2]:http://baike.baidu.com/item/%E9%9C%8D%E7%BA%B3%E6%B3%95%E5%88%99?sefr=cr\n  [3]: /images/post_images/快速傅立叶变换(FFT)-01.png\n  [4]:https://www.zhihu.com/question/22298352","slug":"快速傅立叶变换-FFT","published":1,"updated":"2020-03-17T14:01:51.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7w04u4m000spv6pg0i9ij6v","content":"<h1 id=\"例题UOJ-34-多项式乘法\"><a href=\"#例题UOJ-34-多项式乘法\" class=\"headerlink\" title=\"例题UOJ#34. 多项式乘法\"></a>例题<a href=\"http://uoj.ac/problem/34\" target=\"_blank\" rel=\"noopener\">UOJ#34. 多项式乘法</a></h1><h2 id=\"题面\"><a href=\"#题面\" class=\"headerlink\" title=\"题面\"></a>题面</h2><blockquote>\n<p><strong>题目描述</strong><br>给你两个多项式，请输出乘起来后的多项式。<br><strong>输入格式</strong><br>第一行两个整数 n 和 m，分别表示两个多项式的次数。<br>第二行 n+1 个整数，分别表示第一个多项式的 0 到 n 次项前的系数。<br>第三行 m+1 个整数，分别表示第一个多项式的 0 到 m 次项前的系数。<br><strong>输出格式</strong><br>一行 n+m+1 个整数，分别表示乘起来后的多项式的 0 到 n+m 次项前的系数。<br><a id=\"more\"></a><br><strong>样例</strong><br>input:<br>1 2<br>1 2<br>1 2 1<br>output:<br>1 4 5 2<br>explanation:<br>$(1+2x)⋅(1+2x+x^2)=1+4x+5x^2+2x^3$<br><strong>限制与约定</strong><br>0≤n , m≤$10^5$</p>\n</blockquote>\n<h2 id=\"简要解析\"><a href=\"#简要解析\" class=\"headerlink\" title=\"简要解析\"></a>简要解析</h2><p>  首先这道涉及多项式乘法,求相乘后新多项式的系数,可简记为:</p>\n<script type=\"math/tex; mode=display\">C(x)=A(x)*B(x)=\\sum_{j=0}^{2*n-2} (\\sum_{k=0}^ja_k*b_{k-j})x^j</script><p>  正常算法的时间复杂度很容易得到,即O($n^2$),显然无法再规定时间内得到正确解,怎么办呢?这里我们介绍一种可在O($nlgn$)复杂度下快速求出该答案的方法,即FFT.希望读者在阅读此文后可自行编写!</p>\n<h1 id=\"多项式\"><a href=\"#多项式\" class=\"headerlink\" title=\"多项式\"></a>多项式</h1><h2 id=\"多项式的表示\"><a href=\"#多项式的表示\" class=\"headerlink\" title=\"多项式的表示\"></a>多项式的表示</h2><ul>\n<li><p><strong>系数表达</strong><br> 系数表达是我们平时最常见的表示多项式的方法,对任意一个多项式$A(x)=\\sum<em>{i=0}^{n-1}a_ix^i$,其系数表示为$$A(x)=(a_0,a_1,\\dots,a</em>{n-1})<script type=\"math/tex\">系数表达的优势是它很容易求出该多项式在点$x_0$处的值$A(x_0)$,即利用[霍纳法则][2](也称秦九韶算法):</script> A(x<em>0)=a_0+x_0(a_1+x_0(a_2+\\dots+x_0(a</em>{n-2}+x<em>0a</em>{n-1})\\dots)) $$</p>\n</li>\n<li><p><strong>点值表达</strong><br>  所谓点值表达就是将一个次数界为n的多项式用 <strong><em>n个点值对</em></strong> 的集合来表示,即:</p>\n<script type=\"math/tex; mode=display\">A(x)=\\{ (x_0,y_0),(x_1,y_1),(x_2,y_2)\\dots(x_{n-1},y_{n-1}) \\}</script><p>  需要注意的是,一定需要n个点值对来表示,因为只有点值对数等于多项式的次数界时,其插值(由点值表达确定该多项式的系数表达,后边会讲到)才明确,这个结论可以由<strong>插值多项式的唯一性</strong>证明:</p>\n<script type=\"math/tex; mode=display\">\\begin{vmatrix}\\\\\n1 & x_0 & x_0^2 & \\cdots & x_0^{n-1}\\\\\n1 & x_1 & x_1^2 & \\cdots & x_1^{n-1}\\\\\n\\vdots &  \\vdots & \\vdots & &\\vdots\\\\\n1 & x_{n-1} & x_{n-1}^2 & \\cdots & x_{n-1}^{n-1}\\\\\n\\end{vmatrix}\n\\begin{vmatrix}\\\\\na_0\\\\\na_1\\\\\na_2\\\\\n\\vdots\\\\\na_{n-1}\\\\\n\\end{vmatrix}=\n\\begin{vmatrix}\\\\\ny_0\\\\\ny_1\\\\\ny_2\\\\\n\\vdots\\\\\ny_{n-1}\\\\\n\\end{vmatrix}</script><p>先将多项式转化为矩阵乘法的形式,其中第一项为范德蒙德行列式,记为$V(x<em>0,x_1,x_2,\\dots,x</em>{n-1})$,其值为 $\\prod<em>{0\\le j&lt;k\\le n-1}(x_k-x_j)$ ,显然当任意两个x值不同时该值不为0,故该矩阵可逆,进而可以求得$a=V(x_0,x_1,x_2,\\dots,x</em>{n-1})^{-1}y$ , 故其唯一性得证!</p>\n<p>  点值表示有什么优势呢?我们可以在O(n)的时间内求出两多项式的乘积!如果我们有一种很快的算法可以将系数表达式转化为点值表达式,那么我们就可以快速计算出两多项式的乘积.为了快速实现两种表达方式的快速转化,我们引入一个概念,<strong><em> 单 位 复 数 根 </em></strong>!</p>\n</li>\n</ul>\n<h1 id=\"单位复数根\"><a href=\"#单位复数根\" class=\"headerlink\" title=\"单位复数根\"></a>单位复数根</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>满足$w^n=1$的复数$w$,其单位复数根恰好有n个,分别为$e^{2\\pi ik/n},k={0,1,2,\\dots,n-1}$,由复数的指数形式定义$e^{iu}=cos(u)+isin(u)$可将其转化为 $y_k=cos(2 \\pi k/n)+isin(2\\pi k/n)$</p>\n<h2 id=\"基本性质\"><a href=\"#基本性质\" class=\"headerlink\" title=\"基本性质\"></a>基本性质</h2><ul>\n<li><strong>消去引理</strong><script type=\"math/tex; mode=display\">W_{dn}^{dk}=(e^{2\\pi i/{dn}})^{kn}=(e^{2\\pi i/{d}})^{k}=W_n^k(n\\ge 0 , k\\ge 0 , d>0)</script></li>\n<li><strong>折半引理</strong><br>  若n&gt;0且为偶数,那么n个n次单位复数根的平方的集合就是$n/2$个$n/2$次单位复数根的集合(每个元素出现两次)<script type=\"math/tex\">(W_n^{k+n/2})^2=W_n^{2k+n}=W_n^{2k}\\cdot W_n^n=(W_n^k)^2=W_{n/2}^k</script></li>\n<li><strong>求和引理</strong><script type=\"math/tex; mode=display\">\\sum_{j=0}^{n-1}(W_n^k)^j=\\frac{(W_n^k)^n-1}{W_n^k-1}=\\frac{(W_n^n)^k-1}{W_n^k-1}=0</script></li>\n</ul>\n<h1 id=\"DFT离散傅里叶变换\"><a href=\"#DFT离散傅里叶变换\" class=\"headerlink\" title=\"DFT离散傅里叶变换\"></a>DFT离散傅里叶变换</h1><p>这个算法的核心是利用了卷积定理<script type=\"math/tex\">a\\times b=DFT^{-1}_{2n}(DFT_{2n}(a)\\cdot DFT_{2n}(b))</script></p>\n<p>本文最开始的例题UOJ#34,目标多项式的系数$c<em>k=\\sum</em>{k=0}^ja<em>k*b</em>{k-j}$,熟悉的人可能都知道这实际上就是a,b的<a href=\"https://www.zhihu.com/question/22298352\" target=\"_blank\" rel=\"noopener\">卷积</a>,能用傅里叶变换求解的题目一般都可以被转化成类似这样的卷积的形式,大家一定要对这个式子足够熟悉!!!</p>\n<script type=\"math/tex; mode=display\">y_k=A(W_n^k)=\\sum_{j=0}^{n-1}a_j\\cdot W_n^{kj}=\\sum_{j=0}^{n-1}a_j\\cdot e^{\\frac{2\\pi i}{n}jk}</script><p>该算法的复杂度是O($n^2$)的,有没有适当变换使其结合一些复数根的性质加速此过程?答案是肯定的!</p>\n<h1 id=\"FFT快速傅里叶变换\"><a href=\"#FFT快速傅里叶变换\" class=\"headerlink\" title=\"FFT快速傅里叶变换\"></a>FFT快速傅里叶变换</h1><h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>利用分治的思想将$A(x)=a<em>0+a_1x+a_2x^2+\\dots+a</em>{n-1}x^{n-1}$分为下标为奇数和偶数的两部分:</p>\n<script type=\"math/tex; mode=display\">A^{[0]}(x)=a_0+a_2x+a_4x^2+\\dots+a_{n-2}x^{\\frac{n}{2}-1}</script><script type=\"math/tex; mode=display\">A^{[1]}(x)=a_1+a_3x+a_5x^2+\\dots+a_{n-1}x^{\\frac{n}{2}-1}</script><script type=\"math/tex; mode=display\">A(x)=A^{[0]}(x^2)+x*A^{[1]}(x^2)</script><p>这样的话问题就可以转化求在$(W_n^0)^2,(W_n^1)^2,\\dots,(W_n^{n-1})^2$上A(x)值,又根据折半引理,只需计算次数界为n/2的值即可,这样一直递归下去,即可在O($nlgn$)复杂度内计算出结果,附上伪代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FFT(a):  </span><br><span class=\"line\">    n=a.length()  </span><br><span class=\"line\">    if n==1:  </span><br><span class=\"line\">        return a  </span><br><span class=\"line\">    w_n=e^(pi*i/n)=complex(cos(2*pi/n),sin(2*pi/n))  </span><br><span class=\"line\">    w=1  </span><br><span class=\"line\">    a(0)=[a0,a2,...a_n-2]  </span><br><span class=\"line\">    a(1)=[a1,a3,...a_n-1]  </span><br><span class=\"line\">    y(0)=FFT(a(0))  </span><br><span class=\"line\">    y(1)=FFT(a(1))  </span><br><span class=\"line\">    for k in range(0,n/2):  </span><br><span class=\"line\">        y_k=y_k(0)+w*y_k(1)                     //w*y_k(1)为公用子表达式 </span><br><span class=\"line\">        y_k+n/2=y_k(0)-w*y_k(1)  </span><br><span class=\"line\">        w=w*w_n                                 //w为旋转因子</span><br><span class=\"line\">    return y</span><br></pre></td></tr></table></figure></p>\n<p>但递归的常数是很大的,我们是否可以进一步优化常数呢?只要将递归过程改为迭代的过程就好了!</p>\n<h2 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h2><ul>\n<li><p><strong>位逆序置换</strong><br>  <img src=\"/images/post_images/快速傅立叶变换(FFT)-01.png\" alt=\"位逆序置换实例\"><br>  观察其下标序列为<script type=\"math/tex\">0,4,2,6,1,5,3,7</script><br>  对应的二进制数为<script type=\"math/tex\">000,100,010,110,001,101,011,111</script><br>  若将每个数的二进制位反转,即得到<script type=\"math/tex\">000,001,010,011,100,101,110,111</script><br>  显然为0~7这8个数的升序排列,这样我们就找到了运算顺序与下标间的对应关系,这个过程就叫做位逆序置换,这样我们只要在计算之前将下标通过位逆序置换的方式更新即可按序自底向上求解,代码很简单:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rev</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> n)</span>                 <span class=\"comment\">//x为当前处理的待改变的数,n为二进制位的总长度(按上例则n=3)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x0=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) x0=(x0+(x&amp;<span class=\"number\">1</span>))&lt;&lt;<span class=\"number\">1</span>,x&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x0&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>蝴蝶操作</strong></p>\n<script type=\"math/tex; mode=display\">y_k=A(W_n^k)=y^{[0]}_k+W_n^k\\cdot y_k^{[1]}</script><script type=\"math/tex; mode=display\">y_{k+\\frac{n}{2}}=A(W_n^{k+\\frac{n}{2}})=A^{[0]}(W_n^{2k+n})+W_n^{k+\\frac{n}{2}}\\cdot A^{[1]}(W_n^{2k+n})=A^{[0]}(W_n^{2k})+W_n^{k+\\frac{n}{2}}\\cdot A^{[1]}(W_n^{2k})=y^{[0]}_k-W_n^k\\cdot y_k^{[1]}</script></li>\n</ul>\n<p>因此只要知道出$y^{[0]}<em>k$与$W_n^k\\cdot y_k^{<a href=\"http://uoj.ac/problem/34\" target=\"_blank\" rel=\"noopener\">1</a>}$的值就可直接算出$y_k$与$y</em>{k+\\frac{n}{2}}$的值,只要将上一步中分成的树状结构从下向上计算一遍就能求出答案了,这一操作也被称为<strong><em>蝴 蝶 操 作</em></strong>,伪代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for k in range(0,n/2):  </span><br><span class=\"line\">    t=w*y_k(1)  </span><br><span class=\"line\">    y_k=y_k(0)+t  </span><br><span class=\"line\">    y_k+n/2=y_k(0)-t  </span><br><span class=\"line\">    w=w*w_n</span><br></pre></td></tr></table></figure>\n<h2 id=\"傅里叶逆变换公式\"><a href=\"#傅里叶逆变换公式\" class=\"headerlink\" title=\"傅里叶逆变换公式\"></a>傅里叶逆变换公式</h2><p>以上我们了解到如何将系数表示转换为点值表示,通过点值表示在O(n)复杂度下求出多项式的乘积之后只要再将点值表示转换为系数表示(求插值)即可.前面讲多项式的点值表达时我们提到了一种求插值的过程,$a=V(x<em>0,x_1,x_2,\\dots,x</em>{n-1})^{-1}\\cdot y$ , 即只要得到范德蒙德行列式的逆矩阵就能求出对应的a.</p>\n<p>由于一个矩阵的逆矩阵$A^{-1}=\\frac{1}{|A|}A^*$,易推得傅里叶逆变换公式:</p>\n<script type=\"math/tex; mode=display\">a_k=\\frac{1}{n}\\sum_{j=0}^{n-1}y^j\\cdot e^{-\\frac{2\\pi i}{n}jk}</script><p>除了这种求逆矩阵的方法,我们还可以用拉格朗日公式求插值,但复杂度为O($n^2$),公式如下:</p>\n<script type=\"math/tex; mode=display\">A(x)=\\sum_{k=0}^{n-1}y_k\\frac{ \\prod_{j\\neq k}(x-x_j) }{ \\prod_{j\\neq k}(x_j-x_k) }</script><h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><h2 id=\"UOJ-34代码\"><a href=\"#UOJ-34代码\" class=\"headerlink\" title=\"UOJ#34代码\"></a>UOJ#34代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pi acos(-1.0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 300010</span></span><br><span class=\"line\"><span class=\"comment\">//#define DEBUG                                     //DEBUG无视就好</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"><span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; a[maxn],b[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span>                                   <span class=\"comment\">//读入优化</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> read=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sign=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tch=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((ch&lt;<span class=\"string\">'0'</span>||ch&gt;<span class=\"string\">'9'</span>)&amp;&amp;ch!=<span class=\"string\">'-'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ch==<span class=\"string\">'-'</span>) sign=<span class=\"number\">-1</span>,ch=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">'0'</span>&amp;&amp;ch&lt;=<span class=\"string\">'9'</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tread=read*<span class=\"number\">10</span>+ch-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\tch=getchar(); </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> read*sign;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Power2</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>                                                <span class=\"comment\">//把x转化为2的整数次幂</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x0;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(x0=<span class=\"number\">1</span>;x0&lt;=x;x0&lt;&lt;=<span class=\"number\">1</span>) ;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lg</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span>                                             <span class=\"comment\">//计算二进制位数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">1</span>;x&lt;=n;x&lt;&lt;=<span class=\"number\">1</span>) l++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rev</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> n)</span>                                       <span class=\"comment\">//位逆序置换</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x0=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) x0=(x0+(x&amp;<span class=\"number\">1</span>))&lt;&lt;<span class=\"number\">1</span>,x&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x0&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; a[],<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> flag)</span>    <span class=\"comment\">//主体</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; A[n+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,l=lg(n<span class=\"number\">-1</span>);i&lt;n;++i) A[rev(i,l)]=a[i];</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l=lg(n<span class=\"number\">-1</span>);                                               <span class=\"comment\">//切记是lg(n-1)</span></span><br><span class=\"line\">\t<span class=\"built_in\">cerr</span>&lt;&lt;<span class=\"string\">\"l=\"</span>&lt;&lt;l&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) <span class=\"built_in\">cerr</span>&lt;&lt;rev(i,l)&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cerr</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i&lt;&lt;=<span class=\"number\">1</span>)                                     <span class=\"comment\">//枚举合并后序列长度</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; dw(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/i),<span class=\"built_in\">sin</span>(flag*<span class=\"number\">2</span>*pi/i));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j+=i)                                   <span class=\"comment\">//该长度下每部分进行求解</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; w(<span class=\"number\">1.0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;(i&gt;&gt;<span class=\"number\">1</span>);k++,w=w*dw)                    <span class=\"comment\">//蝴蝶变换,只需求i&gt;&gt;1次即可</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; u=A[j+k];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; t=w*A[j+k+(i&gt;&gt;<span class=\"number\">1</span>)];</span><br><span class=\"line\">\t\t\t\tA[j+k]=u+t;</span><br><span class=\"line\">\t\t\t\tA[j+k+(i&gt;&gt;<span class=\"number\">1</span>)]=u-t;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) a[i]=<span class=\"keyword\">int</span>(A[i].real()/n+<span class=\"number\">0.5</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t \t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) a[i]=A[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"in.txt\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\tn=read();</span><br><span class=\"line\">\tm=read();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;++i) a[i]=read();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=m;++i) b[i]=read();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> length=Power2(n+m);</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">\t<span class=\"built_in\">cerr</span>&lt;&lt;<span class=\"string\">\"length=\"</span>&lt;&lt;length&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\tFFT(a,length,<span class=\"number\">1</span>);</span><br><span class=\"line\">\tFFT(b,length,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=length;++i) a[i]*=b[i];</span><br><span class=\"line\">\tFFT(a,length,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n+m;++i) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,<span class=\"keyword\">int</span>(a[i].real()));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"FFT高精度代码\"><a href=\"#FFT高精度代码\" class=\"headerlink\" title=\"FFT高精度代码\"></a>FFT高精度代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*FFT高精度*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI acos(-1.0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 200005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEBUG</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,l=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> rev[maxn],ans[maxn];</span><br><span class=\"line\"><span class=\"keyword\">char</span> x[maxn],y[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">double</span> real,imag;</span><br><span class=\"line\">  Complex(<span class=\"keyword\">double</span> real=<span class=\"number\">0</span>,<span class=\"keyword\">double</span> imag=<span class=\"number\">0</span>):real(real),imag(imag) &#123;&#125;</span><br><span class=\"line\">  Complex <span class=\"keyword\">operator</span> + (<span class=\"keyword\">const</span> Complex rhs)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Complex(real+rhs.real,imag+rhs.imag);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Complex <span class=\"keyword\">operator</span> - (<span class=\"keyword\">const</span> Complex rhs)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Complex(real-rhs.real,imag-rhs.imag);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Complex <span class=\"keyword\">operator</span> * (<span class=\"keyword\">const</span> Complex rhs)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> Complex((real*rhs.real-imag*rhs.imag),(real*rhs.imag+imag*rhs.real));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Complex a[maxn],b[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> read=<span class=\"number\">0</span>,sign=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    ch=getchar();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>((ch&lt;<span class=\"string\">'0'</span>||ch&gt;<span class=\"string\">'9'</span>)&amp;&amp;ch!=<span class=\"string\">'-'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ch==<span class=\"string\">'-'</span>) sign=<span class=\"number\">-1</span>,ch=getchar();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">'0'</span>&amp;&amp;ch&lt;=<span class=\"string\">'9'</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    read=read*<span class=\"number\">10</span>+ch-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">    ch=getchar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sign*read;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pre_work</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> length1,length2;</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,x);length1=<span class=\"built_in\">strlen</span>(x);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,y);length2=<span class=\"built_in\">strlen</span>(y);</span><br><span class=\"line\">  n=max(length1,length2);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;length1;++i) a[i].real=x[length1-i<span class=\"number\">-1</span>]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;length2;++i) b[i].real=y[length2-i<span class=\"number\">-1</span>]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) <span class=\"built_in\">cerr</span>&lt;&lt;a[i].real&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cerr</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) <span class=\"built_in\">cout</span>&lt;&lt;b[i].real&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cerr</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">  m=<span class=\"number\">2</span>*n;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(n=<span class=\"number\">1</span>;n&lt;m;n&lt;&lt;=<span class=\"number\">1</span>) l++;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) rev[i]=rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>|(i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) <span class=\"built_in\">cerr</span>&lt;&lt;i&lt;&lt;<span class=\"string\">\"--&gt;\"</span>&lt;&lt;rev[i]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(Complex a[],<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> sign)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rev[i]&lt;i) swap(a[i],a[rev[i]]);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">Complex <span class=\"title\">dw</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*PI/i),<span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*PI*sign/i))</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j+=i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;(i&gt;&gt;<span class=\"number\">1</span>);k++,w=dw*w)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        Complex u=a[j+k];</span><br><span class=\"line\">        Complex t=a[j+k+(i&gt;&gt;<span class=\"number\">1</span>)]*w;</span><br><span class=\"line\">        a[j+k]=u+t;</span><br><span class=\"line\">        a[j+k+(i&gt;&gt;<span class=\"number\">1</span>)]=u-t;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(sign==<span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) ans[i]=<span class=\"keyword\">int</span>(a[i].real/n+eps);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_ans</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans[i]&gt;=<span class=\"number\">10</span>) ans[i+<span class=\"number\">1</span>]+=ans[i]/<span class=\"number\">10</span>,ans[i]%=<span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> first=n<span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ans[first]==<span class=\"number\">0</span>) first--;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=first;i&gt;<span class=\"number\">-1</span>;i--) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,ans[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  pre_work();</span><br><span class=\"line\">  FFT(a,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">  FFT(b,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) a[i]=a[i]*b[i];</span><br><span class=\"line\">  FFT(a,n,<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) <span class=\"built_in\">cerr</span>&lt;&lt;ans[i]&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cerr</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">  push_ans();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"http://blog.csdn.net/oiljt12138/article/details/54810204\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/oiljt12138/article/details/54810204</a><br><a href=\"http://blog.csdn.net/iamzky/article/details/22712347\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/iamzky/article/details/22712347</a><br>算法导论第三十章</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"例题UOJ-34-多项式乘法\"><a href=\"#例题UOJ-34-多项式乘法\" class=\"headerlink\" title=\"例题UOJ#34. 多项式乘法\"></a>例题<a href=\"http://uoj.ac/problem/34\" target=\"_blank\" rel=\"noopener\">UOJ#34. 多项式乘法</a></h1><h2 id=\"题面\"><a href=\"#题面\" class=\"headerlink\" title=\"题面\"></a>题面</h2><blockquote>\n<p><strong>题目描述</strong><br>给你两个多项式，请输出乘起来后的多项式。<br><strong>输入格式</strong><br>第一行两个整数 n 和 m，分别表示两个多项式的次数。<br>第二行 n+1 个整数，分别表示第一个多项式的 0 到 n 次项前的系数。<br>第三行 m+1 个整数，分别表示第一个多项式的 0 到 m 次项前的系数。<br><strong>输出格式</strong><br>一行 n+m+1 个整数，分别表示乘起来后的多项式的 0 到 n+m 次项前的系数。<br>","more":"<br><strong>样例</strong><br>input:<br>1 2<br>1 2<br>1 2 1<br>output:<br>1 4 5 2<br>explanation:<br>$(1+2x)⋅(1+2x+x^2)=1+4x+5x^2+2x^3$<br><strong>限制与约定</strong><br>0≤n , m≤$10^5$</p>\n</blockquote>\n<h2 id=\"简要解析\"><a href=\"#简要解析\" class=\"headerlink\" title=\"简要解析\"></a>简要解析</h2><p>  首先这道涉及多项式乘法,求相乘后新多项式的系数,可简记为:</p>\n<script type=\"math/tex; mode=display\">C(x)=A(x)*B(x)=\\sum_{j=0}^{2*n-2} (\\sum_{k=0}^ja_k*b_{k-j})x^j</script><p>  正常算法的时间复杂度很容易得到,即O($n^2$),显然无法再规定时间内得到正确解,怎么办呢?这里我们介绍一种可在O($nlgn$)复杂度下快速求出该答案的方法,即FFT.希望读者在阅读此文后可自行编写!</p>\n<h1 id=\"多项式\"><a href=\"#多项式\" class=\"headerlink\" title=\"多项式\"></a>多项式</h1><h2 id=\"多项式的表示\"><a href=\"#多项式的表示\" class=\"headerlink\" title=\"多项式的表示\"></a>多项式的表示</h2><ul>\n<li><p><strong>系数表达</strong><br> 系数表达是我们平时最常见的表示多项式的方法,对任意一个多项式$A(x)=\\sum<em>{i=0}^{n-1}a_ix^i$,其系数表示为$$A(x)=(a_0,a_1,\\dots,a</em>{n-1})<script type=\"math/tex\">系数表达的优势是它很容易求出该多项式在点$x_0$处的值$A(x_0)$,即利用[霍纳法则][2](也称秦九韶算法):</script> A(x<em>0)=a_0+x_0(a_1+x_0(a_2+\\dots+x_0(a</em>{n-2}+x<em>0a</em>{n-1})\\dots)) $$</p>\n</li>\n<li><p><strong>点值表达</strong><br>  所谓点值表达就是将一个次数界为n的多项式用 <strong><em>n个点值对</em></strong> 的集合来表示,即:</p>\n<script type=\"math/tex; mode=display\">A(x)=\\{ (x_0,y_0),(x_1,y_1),(x_2,y_2)\\dots(x_{n-1},y_{n-1}) \\}</script><p>  需要注意的是,一定需要n个点值对来表示,因为只有点值对数等于多项式的次数界时,其插值(由点值表达确定该多项式的系数表达,后边会讲到)才明确,这个结论可以由<strong>插值多项式的唯一性</strong>证明:</p>\n<script type=\"math/tex; mode=display\">\\begin{vmatrix}\\\\\n1 & x_0 & x_0^2 & \\cdots & x_0^{n-1}\\\\\n1 & x_1 & x_1^2 & \\cdots & x_1^{n-1}\\\\\n\\vdots &  \\vdots & \\vdots & &\\vdots\\\\\n1 & x_{n-1} & x_{n-1}^2 & \\cdots & x_{n-1}^{n-1}\\\\\n\\end{vmatrix}\n\\begin{vmatrix}\\\\\na_0\\\\\na_1\\\\\na_2\\\\\n\\vdots\\\\\na_{n-1}\\\\\n\\end{vmatrix}=\n\\begin{vmatrix}\\\\\ny_0\\\\\ny_1\\\\\ny_2\\\\\n\\vdots\\\\\ny_{n-1}\\\\\n\\end{vmatrix}</script><p>先将多项式转化为矩阵乘法的形式,其中第一项为范德蒙德行列式,记为$V(x<em>0,x_1,x_2,\\dots,x</em>{n-1})$,其值为 $\\prod<em>{0\\le j&lt;k\\le n-1}(x_k-x_j)$ ,显然当任意两个x值不同时该值不为0,故该矩阵可逆,进而可以求得$a=V(x_0,x_1,x_2,\\dots,x</em>{n-1})^{-1}y$ , 故其唯一性得证!</p>\n<p>  点值表示有什么优势呢?我们可以在O(n)的时间内求出两多项式的乘积!如果我们有一种很快的算法可以将系数表达式转化为点值表达式,那么我们就可以快速计算出两多项式的乘积.为了快速实现两种表达方式的快速转化,我们引入一个概念,<strong><em> 单 位 复 数 根 </em></strong>!</p>\n</li>\n</ul>\n<h1 id=\"单位复数根\"><a href=\"#单位复数根\" class=\"headerlink\" title=\"单位复数根\"></a>单位复数根</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>满足$w^n=1$的复数$w$,其单位复数根恰好有n个,分别为$e^{2\\pi ik/n},k={0,1,2,\\dots,n-1}$,由复数的指数形式定义$e^{iu}=cos(u)+isin(u)$可将其转化为 $y_k=cos(2 \\pi k/n)+isin(2\\pi k/n)$</p>\n<h2 id=\"基本性质\"><a href=\"#基本性质\" class=\"headerlink\" title=\"基本性质\"></a>基本性质</h2><ul>\n<li><strong>消去引理</strong><script type=\"math/tex; mode=display\">W_{dn}^{dk}=(e^{2\\pi i/{dn}})^{kn}=(e^{2\\pi i/{d}})^{k}=W_n^k(n\\ge 0 , k\\ge 0 , d>0)</script></li>\n<li><strong>折半引理</strong><br>  若n&gt;0且为偶数,那么n个n次单位复数根的平方的集合就是$n/2$个$n/2$次单位复数根的集合(每个元素出现两次)<script type=\"math/tex\">(W_n^{k+n/2})^2=W_n^{2k+n}=W_n^{2k}\\cdot W_n^n=(W_n^k)^2=W_{n/2}^k</script></li>\n<li><strong>求和引理</strong><script type=\"math/tex; mode=display\">\\sum_{j=0}^{n-1}(W_n^k)^j=\\frac{(W_n^k)^n-1}{W_n^k-1}=\\frac{(W_n^n)^k-1}{W_n^k-1}=0</script></li>\n</ul>\n<h1 id=\"DFT离散傅里叶变换\"><a href=\"#DFT离散傅里叶变换\" class=\"headerlink\" title=\"DFT离散傅里叶变换\"></a>DFT离散傅里叶变换</h1><p>这个算法的核心是利用了卷积定理<script type=\"math/tex\">a\\times b=DFT^{-1}_{2n}(DFT_{2n}(a)\\cdot DFT_{2n}(b))</script></p>\n<p>本文最开始的例题UOJ#34,目标多项式的系数$c<em>k=\\sum</em>{k=0}^ja<em>k*b</em>{k-j}$,熟悉的人可能都知道这实际上就是a,b的<a href=\"https://www.zhihu.com/question/22298352\" target=\"_blank\" rel=\"noopener\">卷积</a>,能用傅里叶变换求解的题目一般都可以被转化成类似这样的卷积的形式,大家一定要对这个式子足够熟悉!!!</p>\n<script type=\"math/tex; mode=display\">y_k=A(W_n^k)=\\sum_{j=0}^{n-1}a_j\\cdot W_n^{kj}=\\sum_{j=0}^{n-1}a_j\\cdot e^{\\frac{2\\pi i}{n}jk}</script><p>该算法的复杂度是O($n^2$)的,有没有适当变换使其结合一些复数根的性质加速此过程?答案是肯定的!</p>\n<h1 id=\"FFT快速傅里叶变换\"><a href=\"#FFT快速傅里叶变换\" class=\"headerlink\" title=\"FFT快速傅里叶变换\"></a>FFT快速傅里叶变换</h1><h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>利用分治的思想将$A(x)=a<em>0+a_1x+a_2x^2+\\dots+a</em>{n-1}x^{n-1}$分为下标为奇数和偶数的两部分:</p>\n<script type=\"math/tex; mode=display\">A^{[0]}(x)=a_0+a_2x+a_4x^2+\\dots+a_{n-2}x^{\\frac{n}{2}-1}</script><script type=\"math/tex; mode=display\">A^{[1]}(x)=a_1+a_3x+a_5x^2+\\dots+a_{n-1}x^{\\frac{n}{2}-1}</script><script type=\"math/tex; mode=display\">A(x)=A^{[0]}(x^2)+x*A^{[1]}(x^2)</script><p>这样的话问题就可以转化求在$(W_n^0)^2,(W_n^1)^2,\\dots,(W_n^{n-1})^2$上A(x)值,又根据折半引理,只需计算次数界为n/2的值即可,这样一直递归下去,即可在O($nlgn$)复杂度内计算出结果,附上伪代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FFT(a):  </span><br><span class=\"line\">    n=a.length()  </span><br><span class=\"line\">    if n==1:  </span><br><span class=\"line\">        return a  </span><br><span class=\"line\">    w_n=e^(pi*i/n)=complex(cos(2*pi/n),sin(2*pi/n))  </span><br><span class=\"line\">    w=1  </span><br><span class=\"line\">    a(0)=[a0,a2,...a_n-2]  </span><br><span class=\"line\">    a(1)=[a1,a3,...a_n-1]  </span><br><span class=\"line\">    y(0)=FFT(a(0))  </span><br><span class=\"line\">    y(1)=FFT(a(1))  </span><br><span class=\"line\">    for k in range(0,n/2):  </span><br><span class=\"line\">        y_k=y_k(0)+w*y_k(1)                     //w*y_k(1)为公用子表达式 </span><br><span class=\"line\">        y_k+n/2=y_k(0)-w*y_k(1)  </span><br><span class=\"line\">        w=w*w_n                                 //w为旋转因子</span><br><span class=\"line\">    return y</span><br></pre></td></tr></table></figure></p>\n<p>但递归的常数是很大的,我们是否可以进一步优化常数呢?只要将递归过程改为迭代的过程就好了!</p>\n<h2 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h2><ul>\n<li><p><strong>位逆序置换</strong><br>  <img src=\"/images/post_images/快速傅立叶变换(FFT)-01.png\" alt=\"位逆序置换实例\"><br>  观察其下标序列为<script type=\"math/tex\">0,4,2,6,1,5,3,7</script><br>  对应的二进制数为<script type=\"math/tex\">000,100,010,110,001,101,011,111</script><br>  若将每个数的二进制位反转,即得到<script type=\"math/tex\">000,001,010,011,100,101,110,111</script><br>  显然为0~7这8个数的升序排列,这样我们就找到了运算顺序与下标间的对应关系,这个过程就叫做位逆序置换,这样我们只要在计算之前将下标通过位逆序置换的方式更新即可按序自底向上求解,代码很简单:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rev</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> n)</span>                 <span class=\"comment\">//x为当前处理的待改变的数,n为二进制位的总长度(按上例则n=3)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x0=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) x0=(x0+(x&amp;<span class=\"number\">1</span>))&lt;&lt;<span class=\"number\">1</span>,x&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x0&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>蝴蝶操作</strong></p>\n<script type=\"math/tex; mode=display\">y_k=A(W_n^k)=y^{[0]}_k+W_n^k\\cdot y_k^{[1]}</script><script type=\"math/tex; mode=display\">y_{k+\\frac{n}{2}}=A(W_n^{k+\\frac{n}{2}})=A^{[0]}(W_n^{2k+n})+W_n^{k+\\frac{n}{2}}\\cdot A^{[1]}(W_n^{2k+n})=A^{[0]}(W_n^{2k})+W_n^{k+\\frac{n}{2}}\\cdot A^{[1]}(W_n^{2k})=y^{[0]}_k-W_n^k\\cdot y_k^{[1]}</script></li>\n</ul>\n<p>因此只要知道出$y^{[0]}<em>k$与$W_n^k\\cdot y_k^{<a href=\"http://uoj.ac/problem/34\" target=\"_blank\" rel=\"noopener\">1</a>}$的值就可直接算出$y_k$与$y</em>{k+\\frac{n}{2}}$的值,只要将上一步中分成的树状结构从下向上计算一遍就能求出答案了,这一操作也被称为<strong><em>蝴 蝶 操 作</em></strong>,伪代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for k in range(0,n/2):  </span><br><span class=\"line\">    t=w*y_k(1)  </span><br><span class=\"line\">    y_k=y_k(0)+t  </span><br><span class=\"line\">    y_k+n/2=y_k(0)-t  </span><br><span class=\"line\">    w=w*w_n</span><br></pre></td></tr></table></figure>\n<h2 id=\"傅里叶逆变换公式\"><a href=\"#傅里叶逆变换公式\" class=\"headerlink\" title=\"傅里叶逆变换公式\"></a>傅里叶逆变换公式</h2><p>以上我们了解到如何将系数表示转换为点值表示,通过点值表示在O(n)复杂度下求出多项式的乘积之后只要再将点值表示转换为系数表示(求插值)即可.前面讲多项式的点值表达时我们提到了一种求插值的过程,$a=V(x<em>0,x_1,x_2,\\dots,x</em>{n-1})^{-1}\\cdot y$ , 即只要得到范德蒙德行列式的逆矩阵就能求出对应的a.</p>\n<p>由于一个矩阵的逆矩阵$A^{-1}=\\frac{1}{|A|}A^*$,易推得傅里叶逆变换公式:</p>\n<script type=\"math/tex; mode=display\">a_k=\\frac{1}{n}\\sum_{j=0}^{n-1}y^j\\cdot e^{-\\frac{2\\pi i}{n}jk}</script><p>除了这种求逆矩阵的方法,我们还可以用拉格朗日公式求插值,但复杂度为O($n^2$),公式如下:</p>\n<script type=\"math/tex; mode=display\">A(x)=\\sum_{k=0}^{n-1}y_k\\frac{ \\prod_{j\\neq k}(x-x_j) }{ \\prod_{j\\neq k}(x_j-x_k) }</script><h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><h2 id=\"UOJ-34代码\"><a href=\"#UOJ-34代码\" class=\"headerlink\" title=\"UOJ#34代码\"></a>UOJ#34代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pi acos(-1.0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 300010</span></span><br><span class=\"line\"><span class=\"comment\">//#define DEBUG                                     //DEBUG无视就好</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"><span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; a[maxn],b[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span>                                   <span class=\"comment\">//读入优化</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> read=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sign=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\tch=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>((ch&lt;<span class=\"string\">'0'</span>||ch&gt;<span class=\"string\">'9'</span>)&amp;&amp;ch!=<span class=\"string\">'-'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ch==<span class=\"string\">'-'</span>) sign=<span class=\"number\">-1</span>,ch=getchar();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">'0'</span>&amp;&amp;ch&lt;=<span class=\"string\">'9'</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tread=read*<span class=\"number\">10</span>+ch-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">\t\tch=getchar(); </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> read*sign;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Power2</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>                                                <span class=\"comment\">//把x转化为2的整数次幂</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x0;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(x0=<span class=\"number\">1</span>;x0&lt;=x;x0&lt;&lt;=<span class=\"number\">1</span>) ;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lg</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span>                                             <span class=\"comment\">//计算二进制位数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">1</span>;x&lt;=n;x&lt;&lt;=<span class=\"number\">1</span>) l++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rev</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> n)</span>                                       <span class=\"comment\">//位逆序置换</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x0=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) x0=(x0+(x&amp;<span class=\"number\">1</span>))&lt;&lt;<span class=\"number\">1</span>,x&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x0&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; a[],<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> flag)</span>    <span class=\"comment\">//主体</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; A[n+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,l=lg(n<span class=\"number\">-1</span>);i&lt;n;++i) A[rev(i,l)]=a[i];</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l=lg(n<span class=\"number\">-1</span>);                                               <span class=\"comment\">//切记是lg(n-1)</span></span><br><span class=\"line\">\t<span class=\"built_in\">cerr</span>&lt;&lt;<span class=\"string\">\"l=\"</span>&lt;&lt;l&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) <span class=\"built_in\">cerr</span>&lt;&lt;rev(i,l)&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cerr</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i&lt;&lt;=<span class=\"number\">1</span>)                                     <span class=\"comment\">//枚举合并后序列长度</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; dw(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*pi/i),<span class=\"built_in\">sin</span>(flag*<span class=\"number\">2</span>*pi/i));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j+=i)                                   <span class=\"comment\">//该长度下每部分进行求解</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; w(<span class=\"number\">1.0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;(i&gt;&gt;<span class=\"number\">1</span>);k++,w=w*dw)                    <span class=\"comment\">//蝴蝶变换,只需求i&gt;&gt;1次即可</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; u=A[j+k];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; t=w*A[j+k+(i&gt;&gt;<span class=\"number\">1</span>)];</span><br><span class=\"line\">\t\t\t\tA[j+k]=u+t;</span><br><span class=\"line\">\t\t\t\tA[j+k+(i&gt;&gt;<span class=\"number\">1</span>)]=u-t;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) a[i]=<span class=\"keyword\">int</span>(A[i].real()/n+<span class=\"number\">0.5</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t \t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) a[i]=A[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">\tfreopen(<span class=\"string\">\"in.txt\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\tn=read();</span><br><span class=\"line\">\tm=read();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;++i) a[i]=read();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=m;++i) b[i]=read();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> length=Power2(n+m);</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">\t<span class=\"built_in\">cerr</span>&lt;&lt;<span class=\"string\">\"length=\"</span>&lt;&lt;length&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\tFFT(a,length,<span class=\"number\">1</span>);</span><br><span class=\"line\">\tFFT(b,length,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=length;++i) a[i]*=b[i];</span><br><span class=\"line\">\tFFT(a,length,<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n+m;++i) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,<span class=\"keyword\">int</span>(a[i].real()));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"FFT高精度代码\"><a href=\"#FFT高精度代码\" class=\"headerlink\" title=\"FFT高精度代码\"></a>FFT高精度代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*FFT高精度*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">include&lt;bits/stdc++.h&gt;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI acos(-1.0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eps 1e-1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> maxn 200005</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEBUG</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,l=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> rev[maxn],ans[maxn];</span><br><span class=\"line\"><span class=\"keyword\">char</span> x[maxn],y[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">double</span> real,imag;</span><br><span class=\"line\">  Complex(<span class=\"keyword\">double</span> real=<span class=\"number\">0</span>,<span class=\"keyword\">double</span> imag=<span class=\"number\">0</span>):real(real),imag(imag) &#123;&#125;</span><br><span class=\"line\">  Complex <span class=\"keyword\">operator</span> + (<span class=\"keyword\">const</span> Complex rhs)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Complex(real+rhs.real,imag+rhs.imag);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Complex <span class=\"keyword\">operator</span> - (<span class=\"keyword\">const</span> Complex rhs)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Complex(real-rhs.real,imag-rhs.imag);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Complex <span class=\"keyword\">operator</span> * (<span class=\"keyword\">const</span> Complex rhs)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> Complex((real*rhs.real-imag*rhs.imag),(real*rhs.imag+imag*rhs.real));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Complex a[maxn],b[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> read=<span class=\"number\">0</span>,sign=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    ch=getchar();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>((ch&lt;<span class=\"string\">'0'</span>||ch&gt;<span class=\"string\">'9'</span>)&amp;&amp;ch!=<span class=\"string\">'-'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ch==<span class=\"string\">'-'</span>) sign=<span class=\"number\">-1</span>,ch=getchar();</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">'0'</span>&amp;&amp;ch&lt;=<span class=\"string\">'9'</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    read=read*<span class=\"number\">10</span>+ch-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">    ch=getchar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sign*read;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pre_work</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> length1,length2;</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,x);length1=<span class=\"built_in\">strlen</span>(x);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,y);length2=<span class=\"built_in\">strlen</span>(y);</span><br><span class=\"line\">  n=max(length1,length2);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;length1;++i) a[i].real=x[length1-i<span class=\"number\">-1</span>]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;length2;++i) b[i].real=y[length2-i<span class=\"number\">-1</span>]-<span class=\"string\">'0'</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) <span class=\"built_in\">cerr</span>&lt;&lt;a[i].real&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cerr</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) <span class=\"built_in\">cout</span>&lt;&lt;b[i].real&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cerr</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">  m=<span class=\"number\">2</span>*n;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(n=<span class=\"number\">1</span>;n&lt;m;n&lt;&lt;=<span class=\"number\">1</span>) l++;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) rev[i]=rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>|(i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) <span class=\"built_in\">cerr</span>&lt;&lt;i&lt;&lt;<span class=\"string\">\"--&gt;\"</span>&lt;&lt;rev[i]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(Complex a[],<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> sign)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(rev[i]&lt;i) swap(a[i],a[rev[i]]);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;i&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">Complex <span class=\"title\">dw</span><span class=\"params\">(<span class=\"built_in\">cos</span>(<span class=\"number\">2</span>*PI/i),<span class=\"built_in\">sin</span>(<span class=\"number\">2</span>*PI*sign/i))</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j+=i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"function\">Complex <span class=\"title\">w</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;(i&gt;&gt;<span class=\"number\">1</span>);k++,w=dw*w)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        Complex u=a[j+k];</span><br><span class=\"line\">        Complex t=a[j+k+(i&gt;&gt;<span class=\"number\">1</span>)]*w;</span><br><span class=\"line\">        a[j+k]=u+t;</span><br><span class=\"line\">        a[j+k+(i&gt;&gt;<span class=\"number\">1</span>)]=u-t;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(sign==<span class=\"number\">-1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) ans[i]=<span class=\"keyword\">int</span>(a[i].real/n+eps);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">push_ans</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans[i]&gt;=<span class=\"number\">10</span>) ans[i+<span class=\"number\">1</span>]+=ans[i]/<span class=\"number\">10</span>,ans[i]%=<span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> first=n<span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(ans[first]==<span class=\"number\">0</span>) first--;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=first;i&gt;<span class=\"number\">-1</span>;i--) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,ans[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  pre_work();</span><br><span class=\"line\">  FFT(a,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">  FFT(b,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) a[i]=a[i]*b[i];</span><br><span class=\"line\">  FFT(a,n,<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) <span class=\"built_in\">cerr</span>&lt;&lt;ans[i]&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">cerr</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">  push_ans();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"http://blog.csdn.net/oiljt12138/article/details/54810204\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/oiljt12138/article/details/54810204</a><br><a href=\"http://blog.csdn.net/iamzky/article/details/22712347\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/iamzky/article/details/22712347</a><br>算法导论第三十章</p>\n</blockquote>"},{"title":"selenium实现自动健康填报","date":"2020-03-17T16:00:00.000Z","_content":"{% note info %}\n## selenium模拟浏览器操作\n{% endnote %}\n\n### 安装selenium\n\n首先和安装其他python模块一样，使用pip来安装selenium库\n{% code %}\npip3 install selenium\n{% endcode %}\n\n因为selenium要控制浏览器进行操作，我们还需要下载浏览器的驱动以解析python发送给它的指令，根据浏览器的类型及版本选择不同驱动进行下载\n> 四大主流浏览器下载地址：[Chrome][1]、[Safari][2]、[Edge][3]、[Firefox][4]\n\n对于**MacOS**和**Linux**用户 *(以chrome为例)* ：\n1. 将下载好的文件放入目录`/usr/local/bin`或`/usr/bin`中\n    {% code %}\n    sudo cp 当前chromedriver位置 /usr/local/bin\n    {% endcode %}\n2. 将驱动赋予执行权限\n    {% code %}\n    sudo chmod +x /usr/local/bin/chromedriver\n    {% endcode %}\n\n### selenium常用函数\n\n### selenium实战\n为什么突然想到学习一波selenium的用法呢？\n一方面是在爬虫学习中听说过有这么一款功能极强的浏览器操作模块，另一方面正赶上疫情爆发大家每天都要填报个人健康情况，对于大多数同学基本都能保持健康，每日填写信息也都大同小异，那为什么不让电脑每天自动帮我们上报呢？这样也能避免错过当天的填报时间。\n\n{% codeblock lang:python %}\nfrom selenium import webdriver\nimport time\nfrom selenium.webdriver.chrome.options import Options\n\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")\ndriver = webdriver.Chrome(executable_path=\"/usr/local/bin/chromedriver\",options=chrome_options)\nurl = \"http://xgsys.swjtu.edu.cn/SPCP/Web/UserLogin.aspx\"\ndriver.get(url)\n\nvalue = {\n    \"StudentId\": \"这儿写学号\",\n    \"Name\": \"这儿写名字\",\n    \"StuCard\": \"这儿写身份证号后六位\",\n    \"codeInput\":  driver.find_element_by_id('code-box').text\n}\nfor key in value.keys():\n    element = driver.find_element_by_id(key)\n    element.send_keys(value[key])\ndriver.find_element_by_id('Button4').click()\n\nif len(driver.find_elements_by_class_name('layui-layer-content')) == 0:\n    driver.find_element_by_id('Checkbox1').click()\n    driver.find_element_by_id('Save_Btn').click()\n    time.sleep(2)\ndriver.get_screenshot_as_file(\"./screenshot.png\")\nprint(driver.find_element_by_class_name('layui-layer-padding').text)\ndriver.close()\n{% endcodeblock %}\n\n{% note info %}\n## crontab定时执行脚本\n{% endnote %}\n\n### crontab常用指令\n\n> 在编辑任务时可能需要使用Vim修改，[这里][5]有关于Vim的教程\n\n+ 编辑当前用户crontab任务 `crontab -e`\n+ 查看当前用户所有crontab 列表 `crontab -l`\n+ 删除当前用户所有crontab 列表 `crontab -r`\n\n### crontab命令格式\n\ncrontab命令由六部分构成: `M H D m d command`\n\n{% note success %}\n`M`: 分（0-59） \n`H`: 时（0-23）\n`D`: 天（1-31）\n`m`: 月（1-12）\n`d`: 周（0-6），0为星期日\n`command`: 操作指令\n{% endnote %}\n\n{% note success %}\n`*`: 取值范围内的所有数字\n`/`: 代表\"每\"，如/3表示每3个\n`-`: 代表从某个数字到某个数字\n`,`: 代表离散的取值(取值的列表)\n{% endnote %}\n\n下面我们举一些常见的例子：\n1. `* * * * * date>>cron.log` 每分钟执行将当前计算机时间输入cron.log\n2. `* */3 * * * date>>cron.log` 每三小时执行\n3. `00 12 10-15 * * date>>cron.log` 每月10-15号12:00执行\n4. `* * * * 6,0 date>>cron.log` 每周六日执行\n\n### crontab常见问题\n\n+ crontab的运行目录和py脚本运行目录不一样,crontab\n+ 如果在同一任务中执行多条指令，指令间可以用`;`隔开\n+ 如果需要查看任务报错信息，需要在输出文件后加`>2&1`\n\n{% note primary %}\n## 参考资料\n{% endnote %}\n\n[1]:https://sites.google.com/a/chromium.org/chromedriver/downloads\n[2]:https://webkit.org/blog/6900/webdriver-support-in-safari-10/\n[3]:https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/\n[4]:https://github.com/mozilla/geckodriver/releases\n[5]:https://www.runoob.com/linux/linux-vim.html","source":"_posts/selenium实现自动健康填报.md","raw":"---\ntitle: selenium实现自动健康填报\ndate: 2020-03-18\ntags: [Notes, Python]\n---\n{% note info %}\n## selenium模拟浏览器操作\n{% endnote %}\n\n### 安装selenium\n\n首先和安装其他python模块一样，使用pip来安装selenium库\n{% code %}\npip3 install selenium\n{% endcode %}\n\n因为selenium要控制浏览器进行操作，我们还需要下载浏览器的驱动以解析python发送给它的指令，根据浏览器的类型及版本选择不同驱动进行下载\n> 四大主流浏览器下载地址：[Chrome][1]、[Safari][2]、[Edge][3]、[Firefox][4]\n\n对于**MacOS**和**Linux**用户 *(以chrome为例)* ：\n1. 将下载好的文件放入目录`/usr/local/bin`或`/usr/bin`中\n    {% code %}\n    sudo cp 当前chromedriver位置 /usr/local/bin\n    {% endcode %}\n2. 将驱动赋予执行权限\n    {% code %}\n    sudo chmod +x /usr/local/bin/chromedriver\n    {% endcode %}\n\n### selenium常用函数\n\n### selenium实战\n为什么突然想到学习一波selenium的用法呢？\n一方面是在爬虫学习中听说过有这么一款功能极强的浏览器操作模块，另一方面正赶上疫情爆发大家每天都要填报个人健康情况，对于大多数同学基本都能保持健康，每日填写信息也都大同小异，那为什么不让电脑每天自动帮我们上报呢？这样也能避免错过当天的填报时间。\n\n{% codeblock lang:python %}\nfrom selenium import webdriver\nimport time\nfrom selenium.webdriver.chrome.options import Options\n\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")\ndriver = webdriver.Chrome(executable_path=\"/usr/local/bin/chromedriver\",options=chrome_options)\nurl = \"http://xgsys.swjtu.edu.cn/SPCP/Web/UserLogin.aspx\"\ndriver.get(url)\n\nvalue = {\n    \"StudentId\": \"这儿写学号\",\n    \"Name\": \"这儿写名字\",\n    \"StuCard\": \"这儿写身份证号后六位\",\n    \"codeInput\":  driver.find_element_by_id('code-box').text\n}\nfor key in value.keys():\n    element = driver.find_element_by_id(key)\n    element.send_keys(value[key])\ndriver.find_element_by_id('Button4').click()\n\nif len(driver.find_elements_by_class_name('layui-layer-content')) == 0:\n    driver.find_element_by_id('Checkbox1').click()\n    driver.find_element_by_id('Save_Btn').click()\n    time.sleep(2)\ndriver.get_screenshot_as_file(\"./screenshot.png\")\nprint(driver.find_element_by_class_name('layui-layer-padding').text)\ndriver.close()\n{% endcodeblock %}\n\n{% note info %}\n## crontab定时执行脚本\n{% endnote %}\n\n### crontab常用指令\n\n> 在编辑任务时可能需要使用Vim修改，[这里][5]有关于Vim的教程\n\n+ 编辑当前用户crontab任务 `crontab -e`\n+ 查看当前用户所有crontab 列表 `crontab -l`\n+ 删除当前用户所有crontab 列表 `crontab -r`\n\n### crontab命令格式\n\ncrontab命令由六部分构成: `M H D m d command`\n\n{% note success %}\n`M`: 分（0-59） \n`H`: 时（0-23）\n`D`: 天（1-31）\n`m`: 月（1-12）\n`d`: 周（0-6），0为星期日\n`command`: 操作指令\n{% endnote %}\n\n{% note success %}\n`*`: 取值范围内的所有数字\n`/`: 代表\"每\"，如/3表示每3个\n`-`: 代表从某个数字到某个数字\n`,`: 代表离散的取值(取值的列表)\n{% endnote %}\n\n下面我们举一些常见的例子：\n1. `* * * * * date>>cron.log` 每分钟执行将当前计算机时间输入cron.log\n2. `* */3 * * * date>>cron.log` 每三小时执行\n3. `00 12 10-15 * * date>>cron.log` 每月10-15号12:00执行\n4. `* * * * 6,0 date>>cron.log` 每周六日执行\n\n### crontab常见问题\n\n+ crontab的运行目录和py脚本运行目录不一样,crontab\n+ 如果在同一任务中执行多条指令，指令间可以用`;`隔开\n+ 如果需要查看任务报错信息，需要在输出文件后加`>2&1`\n\n{% note primary %}\n## 参考资料\n{% endnote %}\n\n[1]:https://sites.google.com/a/chromium.org/chromedriver/downloads\n[2]:https://webkit.org/blog/6900/webdriver-support-in-safari-10/\n[3]:https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/\n[4]:https://github.com/mozilla/geckodriver/releases\n[5]:https://www.runoob.com/linux/linux-vim.html","slug":"selenium实现自动健康填报","published":1,"updated":"2020-03-18T10:49:30.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7x7h7ys0000mq6pvanjxbq2","content":"<div class=\"note info\"><h2 id=\"selenium模拟浏览器操作\"><a href=\"#selenium模拟浏览器操作\" class=\"headerlink\" title=\"selenium模拟浏览器操作\"></a>selenium模拟浏览器操作</h2></div>\n<h3 id=\"安装selenium\"><a href=\"#安装selenium\" class=\"headerlink\" title=\"安装selenium\"></a>安装selenium</h3><p>首先和安装其他python模块一样，使用pip来安装selenium库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install selenium</span><br></pre></td></tr></table></figure></p>\n<p>因为selenium要控制浏览器进行操作，我们还需要下载浏览器的驱动以解析python发送给它的指令，根据浏览器的类型及版本选择不同驱动进行下载</p>\n<blockquote>\n<p>四大主流浏览器下载地址：<a href=\"https://sites.google.com/a/chromium.org/chromedriver/downloads\" target=\"_blank\" rel=\"noopener\">Chrome</a>、<a href=\"https://webkit.org/blog/6900/webdriver-support-in-safari-10/\" target=\"_blank\" rel=\"noopener\">Safari</a>、<a href=\"https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/\" target=\"_blank\" rel=\"noopener\">Edge</a>、<a href=\"https://github.com/mozilla/geckodriver/releases\" target=\"_blank\" rel=\"noopener\">Firefox</a></p>\n</blockquote>\n<p>对于<strong>MacOS</strong>和<strong>Linux</strong>用户 <em>(以chrome为例)</em> ：</p>\n<ol>\n<li>将下载好的文件放入目录<code>/usr/local/bin</code>或<code>/usr/bin</code>中 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp 当前chromedriver位置 /usr/local/bin</span><br></pre></td></tr></table></figure></li>\n<li>将驱动赋予执行权限 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x /usr/local/bin/chromedriver</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"selenium常用函数\"><a href=\"#selenium常用函数\" class=\"headerlink\" title=\"selenium常用函数\"></a>selenium常用函数</h3><h3 id=\"selenium实战\"><a href=\"#selenium实战\" class=\"headerlink\" title=\"selenium实战\"></a>selenium实战</h3><p>为什么突然想到学习一波selenium的用法呢？<br>一方面是在爬虫学习中听说过有这么一款功能极强的浏览器操作模块，另一方面正赶上疫情爆发大家每天都要填报个人健康情况，对于大多数同学基本都能保持健康，每日填写信息也都大同小异，那为什么不让电脑每天自动帮我们上报呢？这样也能避免错过当天的填报时间。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.chrome.options <span class=\"keyword\">import</span> Options</span><br><span class=\"line\"></span><br><span class=\"line\">chrome_options = Options()</span><br><span class=\"line\">chrome_options.add_argument(<span class=\"string\">\"--headless\"</span>)</span><br><span class=\"line\">driver = webdriver.Chrome(executable_path=<span class=\"string\">\"/usr/local/bin/chromedriver\"</span>,options=chrome_options)</span><br><span class=\"line\">url = <span class=\"string\">\"http://xgsys.swjtu.edu.cn/SPCP/Web/UserLogin.aspx\"</span></span><br><span class=\"line\">driver.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\">value = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"StudentId\"</span>: <span class=\"string\">\"这儿写学号\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"这儿写名字\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"StuCard\"</span>: <span class=\"string\">\"这儿写身份证号后六位\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"codeInput\"</span>:  driver.find_element_by_id(<span class=\"string\">'code-box'</span>).text</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> value.keys():</span><br><span class=\"line\">    element = driver.find_element_by_id(key)</span><br><span class=\"line\">    element.send_keys(value[key])</span><br><span class=\"line\">driver.find_element_by_id(<span class=\"string\">'Button4'</span>).click()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> len(driver.find_elements_by_class_name(<span class=\"string\">'layui-layer-content'</span>)) == <span class=\"number\">0</span>:</span><br><span class=\"line\">    driver.find_element_by_id(<span class=\"string\">'Checkbox1'</span>).click()</span><br><span class=\"line\">    driver.find_element_by_id(<span class=\"string\">'Save_Btn'</span>).click()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">driver.get_screenshot_as_file(<span class=\"string\">\"./screenshot.png\"</span>)</span><br><span class=\"line\">print(driver.find_element_by_class_name(<span class=\"string\">'layui-layer-padding'</span>).text)</span><br><span class=\"line\">driver.close()</span><br></pre></td></tr></table></figure>\n<div class=\"note info\"><h2 id=\"crontab定时执行脚本\"><a href=\"#crontab定时执行脚本\" class=\"headerlink\" title=\"crontab定时执行脚本\"></a>crontab定时执行脚本</h2></div>\n<h3 id=\"crontab常用指令\"><a href=\"#crontab常用指令\" class=\"headerlink\" title=\"crontab常用指令\"></a>crontab常用指令</h3><blockquote>\n<p>在编辑任务时可能需要使用Vim修改，<a href=\"https://www.runoob.com/linux/linux-vim.html\" target=\"_blank\" rel=\"noopener\">这里</a>有关于Vim的教程</p>\n</blockquote>\n<ul>\n<li>编辑当前用户crontab任务 <code>crontab -e</code></li>\n<li>查看当前用户所有crontab 列表 <code>crontab -l</code></li>\n<li>删除当前用户所有crontab 列表 <code>crontab -r</code></li>\n</ul>\n<h3 id=\"crontab命令格式\"><a href=\"#crontab命令格式\" class=\"headerlink\" title=\"crontab命令格式\"></a>crontab命令格式</h3><p>crontab命令由六部分构成: <code>M H D m d command</code></p>\n<div class=\"note success\"><p><code>M</code>: 分（0-59）<br><code>H</code>: 时（0-23）<br><code>D</code>: 天（1-31）<br><code>m</code>: 月（1-12）<br><code>d</code>: 周（0-6），0为星期日<br><code>command</code>: 操作指令</p></div>\n<div class=\"note success\"><p><code>*</code>: 取值范围内的所有数字<br><code>/</code>: 代表”每”，如/3表示每3个<br><code>-</code>: 代表从某个数字到某个数字<br><code>,</code>: 代表离散的取值(取值的列表)</p></div>\n<p>下面我们举一些常见的例子：</p>\n<ol>\n<li><code>* * * * * date&gt;&gt;cron.log</code> 每分钟执行将当前计算机时间输入cron.log</li>\n<li><code>* */3 * * * date&gt;&gt;cron.log</code> 每三小时执行</li>\n<li><code>00 12 10-15 * * date&gt;&gt;cron.log</code> 每月10-15号12:00执行</li>\n<li><code>* * * * 6,0 date&gt;&gt;cron.log</code> 每周六日执行</li>\n</ol>\n<h3 id=\"crontab常见问题\"><a href=\"#crontab常见问题\" class=\"headerlink\" title=\"crontab常见问题\"></a>crontab常见问题</h3><ul>\n<li>crontab的运行目录和py脚本运行目录不一样,crontab</li>\n<li>如果在同一任务中执行多条指令，指令间可以用<code>;</code>隔开</li>\n<li>如果需要查看任务报错信息，需要在输出文件后加<code>&gt;2&amp;1</code></li>\n</ul>\n<div class=\"note primary\"><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2></div>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info\"><h2 id=\"selenium模拟浏览器操作\"><a href=\"#selenium模拟浏览器操作\" class=\"headerlink\" title=\"selenium模拟浏览器操作\"></a>selenium模拟浏览器操作</h2></div>\n<h3 id=\"安装selenium\"><a href=\"#安装selenium\" class=\"headerlink\" title=\"安装selenium\"></a>安装selenium</h3><p>首先和安装其他python模块一样，使用pip来安装selenium库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install selenium</span><br></pre></td></tr></table></figure></p>\n<p>因为selenium要控制浏览器进行操作，我们还需要下载浏览器的驱动以解析python发送给它的指令，根据浏览器的类型及版本选择不同驱动进行下载</p>\n<blockquote>\n<p>四大主流浏览器下载地址：<a href=\"https://sites.google.com/a/chromium.org/chromedriver/downloads\" target=\"_blank\" rel=\"noopener\">Chrome</a>、<a href=\"https://webkit.org/blog/6900/webdriver-support-in-safari-10/\" target=\"_blank\" rel=\"noopener\">Safari</a>、<a href=\"https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/\" target=\"_blank\" rel=\"noopener\">Edge</a>、<a href=\"https://github.com/mozilla/geckodriver/releases\" target=\"_blank\" rel=\"noopener\">Firefox</a></p>\n</blockquote>\n<p>对于<strong>MacOS</strong>和<strong>Linux</strong>用户 <em>(以chrome为例)</em> ：</p>\n<ol>\n<li>将下载好的文件放入目录<code>/usr/local/bin</code>或<code>/usr/bin</code>中 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp 当前chromedriver位置 /usr/local/bin</span><br></pre></td></tr></table></figure></li>\n<li>将驱动赋予执行权限 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x /usr/local/bin/chromedriver</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"selenium常用函数\"><a href=\"#selenium常用函数\" class=\"headerlink\" title=\"selenium常用函数\"></a>selenium常用函数</h3><h3 id=\"selenium实战\"><a href=\"#selenium实战\" class=\"headerlink\" title=\"selenium实战\"></a>selenium实战</h3><p>为什么突然想到学习一波selenium的用法呢？<br>一方面是在爬虫学习中听说过有这么一款功能极强的浏览器操作模块，另一方面正赶上疫情爆发大家每天都要填报个人健康情况，对于大多数同学基本都能保持健康，每日填写信息也都大同小异，那为什么不让电脑每天自动帮我们上报呢？这样也能避免错过当天的填报时间。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.chrome.options <span class=\"keyword\">import</span> Options</span><br><span class=\"line\"></span><br><span class=\"line\">chrome_options = Options()</span><br><span class=\"line\">chrome_options.add_argument(<span class=\"string\">\"--headless\"</span>)</span><br><span class=\"line\">driver = webdriver.Chrome(executable_path=<span class=\"string\">\"/usr/local/bin/chromedriver\"</span>,options=chrome_options)</span><br><span class=\"line\">url = <span class=\"string\">\"http://xgsys.swjtu.edu.cn/SPCP/Web/UserLogin.aspx\"</span></span><br><span class=\"line\">driver.get(url)</span><br><span class=\"line\"></span><br><span class=\"line\">value = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"StudentId\"</span>: <span class=\"string\">\"这儿写学号\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"这儿写名字\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"StuCard\"</span>: <span class=\"string\">\"这儿写身份证号后六位\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"codeInput\"</span>:  driver.find_element_by_id(<span class=\"string\">'code-box'</span>).text</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> value.keys():</span><br><span class=\"line\">    element = driver.find_element_by_id(key)</span><br><span class=\"line\">    element.send_keys(value[key])</span><br><span class=\"line\">driver.find_element_by_id(<span class=\"string\">'Button4'</span>).click()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> len(driver.find_elements_by_class_name(<span class=\"string\">'layui-layer-content'</span>)) == <span class=\"number\">0</span>:</span><br><span class=\"line\">    driver.find_element_by_id(<span class=\"string\">'Checkbox1'</span>).click()</span><br><span class=\"line\">    driver.find_element_by_id(<span class=\"string\">'Save_Btn'</span>).click()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">driver.get_screenshot_as_file(<span class=\"string\">\"./screenshot.png\"</span>)</span><br><span class=\"line\">print(driver.find_element_by_class_name(<span class=\"string\">'layui-layer-padding'</span>).text)</span><br><span class=\"line\">driver.close()</span><br></pre></td></tr></table></figure>\n<div class=\"note info\"><h2 id=\"crontab定时执行脚本\"><a href=\"#crontab定时执行脚本\" class=\"headerlink\" title=\"crontab定时执行脚本\"></a>crontab定时执行脚本</h2></div>\n<h3 id=\"crontab常用指令\"><a href=\"#crontab常用指令\" class=\"headerlink\" title=\"crontab常用指令\"></a>crontab常用指令</h3><blockquote>\n<p>在编辑任务时可能需要使用Vim修改，<a href=\"https://www.runoob.com/linux/linux-vim.html\" target=\"_blank\" rel=\"noopener\">这里</a>有关于Vim的教程</p>\n</blockquote>\n<ul>\n<li>编辑当前用户crontab任务 <code>crontab -e</code></li>\n<li>查看当前用户所有crontab 列表 <code>crontab -l</code></li>\n<li>删除当前用户所有crontab 列表 <code>crontab -r</code></li>\n</ul>\n<h3 id=\"crontab命令格式\"><a href=\"#crontab命令格式\" class=\"headerlink\" title=\"crontab命令格式\"></a>crontab命令格式</h3><p>crontab命令由六部分构成: <code>M H D m d command</code></p>\n<div class=\"note success\"><p><code>M</code>: 分（0-59）<br><code>H</code>: 时（0-23）<br><code>D</code>: 天（1-31）<br><code>m</code>: 月（1-12）<br><code>d</code>: 周（0-6），0为星期日<br><code>command</code>: 操作指令</p></div>\n<div class=\"note success\"><p><code>*</code>: 取值范围内的所有数字<br><code>/</code>: 代表”每”，如/3表示每3个<br><code>-</code>: 代表从某个数字到某个数字<br><code>,</code>: 代表离散的取值(取值的列表)</p></div>\n<p>下面我们举一些常见的例子：</p>\n<ol>\n<li><code>* * * * * date&gt;&gt;cron.log</code> 每分钟执行将当前计算机时间输入cron.log</li>\n<li><code>* */3 * * * date&gt;&gt;cron.log</code> 每三小时执行</li>\n<li><code>00 12 10-15 * * date&gt;&gt;cron.log</code> 每月10-15号12:00执行</li>\n<li><code>* * * * 6,0 date&gt;&gt;cron.log</code> 每周六日执行</li>\n</ol>\n<h3 id=\"crontab常见问题\"><a href=\"#crontab常见问题\" class=\"headerlink\" title=\"crontab常见问题\"></a>crontab常见问题</h3><ul>\n<li>crontab的运行目录和py脚本运行目录不一样,crontab</li>\n<li>如果在同一任务中执行多条指令，指令间可以用<code>;</code>隔开</li>\n<li>如果需要查看任务报错信息，需要在输出文件后加<code>&gt;2&amp;1</code></li>\n</ul>\n<div class=\"note primary\"><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2></div>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ck7w04u3i0005pv6p87mygy19","tag_id":"ck7w04u3f0003pv6p7qent5ru","_id":"ck7w04u3l0008pv6pstrl4ys0"},{"post_id":"ck7w04u380000pv6pjtom02se","tag_id":"ck7w04u3f0003pv6p7qent5ru","_id":"ck7w04u3n000apv6pp3m6kehi"},{"post_id":"ck7w04u3d0002pv6phb3uxy48","tag_id":"ck7w04u3f0003pv6p7qent5ru","_id":"ck7w04u3o000dpv6pw91dgawk"},{"post_id":"ck7w04u3g0004pv6poldssdvj","tag_id":"ck7w04u3o000cpv6p3spj00pk","_id":"ck7w04u3q000gpv6pwxnn9znk"},{"post_id":"ck7w04u3j0006pv6p394pp6d0","tag_id":"ck7w04u3q000fpv6pbbg3n3i1","_id":"ck7w04u3q000ipv6ptbvi3uom"},{"post_id":"ck7w04u3m0009pv6poaunfizq","tag_id":"ck7w04u3q000hpv6ptqa56dm1","_id":"ck7w04u3s000lpv6prsyz5m3h"},{"post_id":"ck7w04u3m0009pv6poaunfizq","tag_id":"ck7w04u3q000fpv6pbbg3n3i1","_id":"ck7w04u3s000mpv6p3iv0r0vl"},{"post_id":"ck7w04u3n000bpv6pwetboeqz","tag_id":"ck7w04u3q000fpv6pbbg3n3i1","_id":"ck7w04u3s000opv6p6vkpwzlo"},{"post_id":"ck7w04u3o000epv6p9t3yeml8","tag_id":"ck7w04u3q000fpv6pbbg3n3i1","_id":"ck7w04u3t000qpv6p97ai2ls3"},{"post_id":"ck7w04u3o000epv6p9t3yeml8","tag_id":"ck7w04u3q000hpv6ptqa56dm1","_id":"ck7w04u3t000rpv6p3z5a3n1m"},{"post_id":"ck7w04u4m000spv6pg0i9ij6v","tag_id":"ck7w04u3q000fpv6pbbg3n3i1","_id":"ck7w04u4n000tpv6p1fso80mq"},{"post_id":"ck7w04u4m000spv6pg0i9ij6v","tag_id":"ck7w04u3q000hpv6ptqa56dm1","_id":"ck7w04u4n000upv6pxyu4m47g"},{"post_id":"ck7x7h7ys0000mq6pvanjxbq2","tag_id":"ck7w04u3f0003pv6p7qent5ru","_id":"ck7x7h7z00002mq6p6fcji4t6"},{"post_id":"ck7x7h7ys0000mq6pvanjxbq2","tag_id":"ck7x7h7yy0001mq6pnmilbxil","_id":"ck7x7h7z10003mq6po5e1r339"}],"Tag":[{"name":"Notes","_id":"ck7w04u3f0003pv6p7qent5ru"},{"name":"Others","_id":"ck7w04u3o000cpv6p3spj00pk"},{"name":"Math","_id":"ck7w04u3q000fpv6pbbg3n3i1"},{"name":"NOI","_id":"ck7w04u3q000hpv6ptqa56dm1"},{"name":"Python","_id":"ck7x7h7yy0001mq6pnmilbxil"}]}}